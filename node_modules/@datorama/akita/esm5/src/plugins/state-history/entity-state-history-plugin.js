/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { StateHistoryPlugin } from './state-history-plugin';
import { toBoolean } from '../../internal/utils';
import { skip } from 'rxjs/operators';
import { EntityCollectionPlugin } from '../entity-collection-plugin';
/**
 * @record
 */
export function StateHistoryEntityParams() { }
function StateHistoryEntityParams_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    StateHistoryEntityParams.prototype.entityIds;
}
// unsupported: template constraints.
/**
 * @template E, P
 */
var 
// unsupported: template constraints.
/**
 * @template E, P
 */
EntityStateHistoryPlugin = /** @class */ (function (_super) {
    tslib_1.__extends(EntityStateHistoryPlugin, _super);
    function EntityStateHistoryPlugin(query, params) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this, query, params.entityIds) || this;
        _this.query = query;
        _this.params = params;
        params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;
        _this.activate();
        _this.selectIds()
            .pipe(skip(1))
            .subscribe(function (ids) { return _this.activate(ids); });
        return _this;
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.redo = /**
     * @param {?=} ids
     * @return {?}
     */
    function (ids) {
        this.forEachId(ids, function (e) { return e.redo(); });
    };
    /**
     * @param {?=} ids
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.undo = /**
     * @param {?=} ids
     * @return {?}
     */
    function (ids) {
        this.forEachId(ids, function (e) { return e.undo(); });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.hasPast = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (this.hasEntity(id)) {
            return this.getEntity(id).hasPast;
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.hasFuture = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (this.hasEntity(id)) {
            return this.getEntity(id).hasFuture;
        }
    };
    /**
     * @param {?} ids
     * @param {?} index
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.jumpToFuture = /**
     * @param {?} ids
     * @param {?} index
     * @return {?}
     */
    function (ids, index) {
        this.forEachId(ids, function (e) { return e.jumpToFuture(index); });
    };
    /**
     * @param {?} ids
     * @param {?} index
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.jumpToPast = /**
     * @param {?} ids
     * @param {?} index
     * @return {?}
     */
    function (ids, index) {
        this.forEachId(ids, function (e) { return e.jumpToPast(index); });
    };
    /**
     * @param {?=} ids
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.clear = /**
     * @param {?=} ids
     * @return {?}
     */
    function (ids) {
        this.forEachId(ids, function (e) { return e.clear(); });
    };
    /**
     * @param {?=} ids
     * @param {?=} clearHistory
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.destroy = /**
     * @param {?=} ids
     * @param {?=} clearHistory
     * @return {?}
     */
    function (ids, clearHistory) {
        if (clearHistory === void 0) { clearHistory = false; }
        this.forEachId(ids, function (e) { return e.destroy(clearHistory); });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    EntityStateHistoryPlugin.prototype.instantiatePlugin = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return /** @type {?} */ (new StateHistoryPlugin(this.query, this.params, id));
    };
    return EntityStateHistoryPlugin;
}(EntityCollectionPlugin));
// unsupported: template constraints.
/**
 * @template E, P
 */
export { EntityStateHistoryPlugin };
function EntityStateHistoryPlugin_tsickle_Closure_declarations() {
    /** @type {?} */
    EntityStateHistoryPlugin.prototype.query;
    /** @type {?} */
    EntityStateHistoryPlugin.prototype.params;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LXN0YXRlLWhpc3RvcnktcGx1Z2luLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhdG9yYW1hL2FraXRhLyIsInNvdXJjZXMiOlsic3JjL3BsdWdpbnMvc3RhdGUtaGlzdG9yeS9lbnRpdHktc3RhdGUtaGlzdG9yeS1wbHVnaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxPQUFPLEVBQUUsa0JBQWtCLEVBQXNCLE1BQU0sd0JBQXdCLENBQUM7QUFDaEYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0QyxPQUFPLEVBQUUsc0JBQXNCLEVBQTBCLE1BQU0sNkJBQTZCLENBQUM7Ozs7Ozs7Ozs7Ozs7QUFNN0Y7Ozs7O0FBQUE7SUFBb0gsb0RBQTRCO0lBQzlJLGtDQUFzQixLQUEwQixFQUFxQixNQUFxQzs0Q0FBQTtRQUExRyxZQUNFLGtCQUFNLEtBQUssRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLFNBTS9CO1FBUHFCLFdBQUssR0FBTCxLQUFLLENBQXFCO1FBQXFCLFlBQU0sR0FBTixNQUFNLENBQStCO1FBRXhHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzlELEtBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQixLQUFJLENBQUMsU0FBUyxFQUFFO2FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNiLFNBQVMsQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQWxCLENBQWtCLENBQUMsQ0FBQzs7S0FDekM7Ozs7O0lBRUQsdUNBQUk7Ozs7SUFBSixVQUFLLEdBQVM7UUFDWixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBUixDQUFRLENBQUMsQ0FBQztLQUNwQzs7Ozs7SUFFRCx1Q0FBSTs7OztJQUFKLFVBQUssR0FBUztRQUNaLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFSLENBQVEsQ0FBQyxDQUFDO0tBQ3BDOzs7OztJQUVELDBDQUFPOzs7O0lBQVAsVUFBUSxFQUFNO1FBQ1osSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUM7U0FDbkM7S0FDRjs7Ozs7SUFFRCw0Q0FBUzs7OztJQUFULFVBQVUsRUFBTTtRQUNkLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN0QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDO1NBQ3JDO0tBQ0Y7Ozs7OztJQUVELCtDQUFZOzs7OztJQUFaLFVBQWEsR0FBUSxFQUFFLEtBQWE7UUFDbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFyQixDQUFxQixDQUFDLENBQUM7S0FDakQ7Ozs7OztJQUVELDZDQUFVOzs7OztJQUFWLFVBQVcsR0FBUSxFQUFFLEtBQWE7UUFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFuQixDQUFtQixDQUFDLENBQUM7S0FDL0M7Ozs7O0lBRUQsd0NBQUs7Ozs7SUFBTCxVQUFNLEdBQVM7UUFDYixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBVCxDQUFTLENBQUMsQ0FBQztLQUNyQzs7Ozs7O0lBRUQsMENBQU87Ozs7O0lBQVAsVUFBUSxHQUFTLEVBQUUsWUFBb0I7UUFBcEIsNkJBQUEsRUFBQSxvQkFBb0I7UUFDckMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUF2QixDQUF1QixDQUFDLENBQUM7S0FDbkQ7Ozs7O0lBRVMsb0RBQWlCOzs7O0lBQTNCLFVBQTRCLEVBQU07UUFDaEMseUJBQU8sSUFBSSxrQkFBa0IsQ0FBUyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFNLEVBQUM7S0FDekU7bUNBM0RIO0VBV29ILHNCQUFzQixFQWlEekksQ0FBQTs7Ozs7QUFqREQsb0NBaURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUQsIElEUyB9IGZyb20gJy4uLy4uL2FwaS90eXBlcyc7XG5pbXBvcnQgeyBRdWVyeUVudGl0eSB9IGZyb20gJy4uLy4uL2FwaS9xdWVyeS1lbnRpdHknO1xuaW1wb3J0IHsgU3RhdGVIaXN0b3J5UGx1Z2luLCBTdGF0ZUhpc3RvcnlQYXJhbXMgfSBmcm9tICcuL3N0YXRlLWhpc3RvcnktcGx1Z2luJztcbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uLy4uL2ludGVybmFsL3V0aWxzJztcbmltcG9ydCB7IHNraXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBFbnRpdHlDb2xsZWN0aW9uUGx1Z2luLCBFbnRpdHlDb2xsZWN0aW9uUGFyYW1zIH0gZnJvbSAnLi4vZW50aXR5LWNvbGxlY3Rpb24tcGx1Z2luJztcblxuZXhwb3J0IGludGVyZmFjZSBTdGF0ZUhpc3RvcnlFbnRpdHlQYXJhbXMgZXh0ZW5kcyBTdGF0ZUhpc3RvcnlQYXJhbXMge1xuICBlbnRpdHlJZHM/OiBFbnRpdHlDb2xsZWN0aW9uUGFyYW1zO1xufVxuXG5leHBvcnQgY2xhc3MgRW50aXR5U3RhdGVIaXN0b3J5UGx1Z2luPEUsIFAgZXh0ZW5kcyBTdGF0ZUhpc3RvcnlQbHVnaW48RSwgYW55PiA9IFN0YXRlSGlzdG9yeVBsdWdpbjxFLCBhbnk+PiBleHRlbmRzIEVudGl0eUNvbGxlY3Rpb25QbHVnaW48RSwgUD4ge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcXVlcnk6IFF1ZXJ5RW50aXR5PGFueSwgRT4sIHByb3RlY3RlZCByZWFkb25seSBwYXJhbXM6IFN0YXRlSGlzdG9yeUVudGl0eVBhcmFtcyA9IHt9KSB7XG4gICAgc3VwZXIocXVlcnksIHBhcmFtcy5lbnRpdHlJZHMpO1xuICAgIHBhcmFtcy5tYXhBZ2UgPSB0b0Jvb2xlYW4ocGFyYW1zLm1heEFnZSkgPyBwYXJhbXMubWF4QWdlIDogMTA7XG4gICAgdGhpcy5hY3RpdmF0ZSgpO1xuICAgIHRoaXMuc2VsZWN0SWRzKClcbiAgICAgIC5waXBlKHNraXAoMSkpXG4gICAgICAuc3Vic2NyaWJlKGlkcyA9PiB0aGlzLmFjdGl2YXRlKGlkcykpO1xuICB9XG5cbiAgcmVkbyhpZHM/OiBJRFMpIHtcbiAgICB0aGlzLmZvckVhY2hJZChpZHMsIGUgPT4gZS5yZWRvKCkpO1xuICB9XG5cbiAgdW5kbyhpZHM/OiBJRFMpIHtcbiAgICB0aGlzLmZvckVhY2hJZChpZHMsIGUgPT4gZS51bmRvKCkpO1xuICB9XG5cbiAgaGFzUGFzdChpZDogSUQpIHtcbiAgICBpZiAodGhpcy5oYXNFbnRpdHkoaWQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRFbnRpdHkoaWQpLmhhc1Bhc3Q7XG4gICAgfVxuICB9XG5cbiAgaGFzRnV0dXJlKGlkOiBJRCkge1xuICAgIGlmICh0aGlzLmhhc0VudGl0eShpZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEVudGl0eShpZCkuaGFzRnV0dXJlO1xuICAgIH1cbiAgfVxuXG4gIGp1bXBUb0Z1dHVyZShpZHM6IElEUywgaW5kZXg6IG51bWJlcikge1xuICAgIHRoaXMuZm9yRWFjaElkKGlkcywgZSA9PiBlLmp1bXBUb0Z1dHVyZShpbmRleCkpO1xuICB9XG5cbiAganVtcFRvUGFzdChpZHM6IElEUywgaW5kZXg6IG51bWJlcikge1xuICAgIHRoaXMuZm9yRWFjaElkKGlkcywgZSA9PiBlLmp1bXBUb1Bhc3QoaW5kZXgpKTtcbiAgfVxuXG4gIGNsZWFyKGlkcz86IElEUykge1xuICAgIHRoaXMuZm9yRWFjaElkKGlkcywgZSA9PiBlLmNsZWFyKCkpO1xuICB9XG5cbiAgZGVzdHJveShpZHM/OiBJRFMsIGNsZWFySGlzdG9yeSA9IGZhbHNlKSB7XG4gICAgdGhpcy5mb3JFYWNoSWQoaWRzLCBlID0+IGUuZGVzdHJveShjbGVhckhpc3RvcnkpKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBpbnN0YW50aWF0ZVBsdWdpbihpZDogSUQpIHtcbiAgICByZXR1cm4gbmV3IFN0YXRlSGlzdG9yeVBsdWdpbjxFLCBhbnk+KHRoaXMucXVlcnksIHRoaXMucGFyYW1zLCBpZCkgYXMgUDtcbiAgfVxufVxuIl19