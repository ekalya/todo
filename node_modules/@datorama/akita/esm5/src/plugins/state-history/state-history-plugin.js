/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { pairwise } from 'rxjs/operators';
import { __globalState } from '../../internal/global-state';
import { toBoolean } from '../../internal/utils';
import { AkitaPlugin } from '../plugin';
/**
 * @record
 */
export function StateHistoryParams() { }
function StateHistoryParams_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    StateHistoryParams.prototype.maxAge;
}
/**
 * @template E, S
 */
var /**
 * @template E, S
 */
StateHistoryPlugin = /** @class */ (function (_super) {
    tslib_1.__extends(StateHistoryPlugin, _super);
    function StateHistoryPlugin(query, params, _entityId) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this, query) || this;
        _this.query = query;
        _this.params = params;
        _this._entityId = _entityId;
        /**
         * Allow skipping an update from outside
         */
        _this.skip = false;
        _this.history = {
            past: [],
            present: null,
            future: []
        };
        /**
         * Skip the update when redo/undo
         */
        _this.skipUpdate = false;
        params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;
        _this.activate();
        return _this;
    }
    Object.defineProperty(StateHistoryPlugin.prototype, "hasPast", {
        get: /**
         * @return {?}
         */
        function () {
            return this.history.past.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StateHistoryPlugin.prototype, "hasFuture", {
        get: /**
         * @return {?}
         */
        function () {
            return this.history.future.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    StateHistoryPlugin.prototype.activate = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.history.present = this.getSource(this._entityId);
        this.subscription = this.selectSource(this._entityId)
            .pipe(pairwise())
            .subscribe(function (_a) {
            var _b = tslib_1.__read(_a, 2), past = _b[0], present = _b[1];
            if (_this.skip) {
                _this.skip = false;
                return;
            }
            if (!_this.skipUpdate) {
                if (_this.history.past.length === _this.params.maxAge) {
                    _this.history.past = _this.history.past.slice(1);
                }
                _this.history.past = tslib_1.__spread(_this.history.past, [past]);
                _this.history.present = present;
            }
        });
    };
    /**
     * @return {?}
     */
    StateHistoryPlugin.prototype.undo = /**
     * @return {?}
     */
    function () {
        if (this.history.past.length > 0) {
            var _a = this.history, past = _a.past, present = _a.present, future = _a.future;
            /** @type {?} */
            var previous = past[past.length - 1];
            /** @type {?} */
            var newPast = past.slice(0, past.length - 1);
            this.history.past = newPast;
            this.history.present = previous;
            this.history.future = tslib_1.__spread([present], this.history.future);
            this.update();
        }
    };
    /**
     * @return {?}
     */
    StateHistoryPlugin.prototype.redo = /**
     * @return {?}
     */
    function () {
        if (this.history.future.length > 0) {
            var _a = this.history, past = _a.past, present = _a.present, future = _a.future;
            /** @type {?} */
            var next = this.history.future[0];
            /** @type {?} */
            var newFuture = this.history.future.slice(1);
            this.history.past = tslib_1.__spread(past, [present]);
            this.history.present = next;
            this.history.future = newFuture;
            this.update('Redo');
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    StateHistoryPlugin.prototype.jumpToPast = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (index < 0 || index >= this.history.past.length)
            return;
        var _a = this.history, past = _a.past, future = _a.future;
        /** *
         *
         * const past = [1, 2, 3, 4, 5];
         *
         * newPast = past.slice(0, 2) = [1, 2];
         * present = past[index] = 3;
         * [...past.slice(2 + 1), ...future] = [4, 5];
         *
          @type {?} */
        var newPast = past.slice(0, index);
        /** @type {?} */
        var newFuture = tslib_1.__spread(past.slice(index + 1), future);
        /** @type {?} */
        var newPresent = past[index];
        this.history.past = newPast;
        this.history.present = newPresent;
        this.history.future = newFuture;
        this.update();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    StateHistoryPlugin.prototype.jumpToFuture = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (index < 0 || index >= this.history.future.length)
            return;
        var _a = this.history, past = _a.past, future = _a.future;
        /** @type {?} */
        var newPast = tslib_1.__spread(past, future.slice(0, index));
        /** @type {?} */
        var newPresent = future[index];
        /** @type {?} */
        var newFuture = future.slice(index + 1);
        this.history.past = newPast;
        this.history.present = newPresent;
        this.history.future = newFuture;
        this.update('Redo');
    };
    /**
     * @return {?}
     */
    StateHistoryPlugin.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.history = {
            past: [],
            present: null,
            future: []
        };
    };
    /**
     * @param {?=} clearHistory
     * @return {?}
     */
    StateHistoryPlugin.prototype.destroy = /**
     * @param {?=} clearHistory
     * @return {?}
     */
    function (clearHistory) {
        if (clearHistory === void 0) { clearHistory = false; }
        if (clearHistory) {
            this.clear();
        }
        this.subscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    StateHistoryPlugin.prototype.ignoreNext = /**
     * @return {?}
     */
    function () {
        this.skip = true;
    };
    /**
     * @param {?=} action
     * @return {?}
     */
    StateHistoryPlugin.prototype.update = /**
     * @param {?=} action
     * @return {?}
     */
    function (action) {
        if (action === void 0) { action = 'Undo'; }
        this.skipUpdate = true;
        __globalState.setCustomAction({ type: "@StateHistory - " + action });
        this.updateStore(this.history.present, this._entityId);
        this.skipUpdate = false;
    };
    return StateHistoryPlugin;
}(AkitaPlugin));
/**
 * @template E, S
 */
export { StateHistoryPlugin };
function StateHistoryPlugin_tsickle_Closure_declarations() {
    /**
     * Allow skipping an update from outside
     * @type {?}
     */
    StateHistoryPlugin.prototype.skip;
    /** @type {?} */
    StateHistoryPlugin.prototype.history;
    /**
     * Skip the update when redo/undo
     * @type {?}
     */
    StateHistoryPlugin.prototype.skipUpdate;
    /** @type {?} */
    StateHistoryPlugin.prototype.subscription;
    /** @type {?} */
    StateHistoryPlugin.prototype.query;
    /** @type {?} */
    StateHistoryPlugin.prototype.params;
    /** @type {?} */
    StateHistoryPlugin.prototype._entityId;
}

//# sourceMappingURL=data:application/json;base64,