/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { filterNil } from '../api/operators';
import { toBoolean } from '../internal/utils';
/**
 * @abstract
 * @template E, S
 */
var /**
 * @abstract
 * @template E, S
 */
AkitaPlugin = /** @class */ (function () {
    function AkitaPlugin(query) {
        this.query = query;
    }
    /** This method is responsible for getting access to the query. */
    /**
     * This method is responsible for getting access to the query.
     * @return {?}
     */
    AkitaPlugin.prototype.getQuery = /**
     * This method is responsible for getting access to the query.
     * @return {?}
     */
    function () {
        return this.query;
    };
    /** This method is responsible for getting access to the store. */
    /**
     * This method is responsible for getting access to the store.
     * @return {?}
     */
    AkitaPlugin.prototype.getStore = /**
     * This method is responsible for getting access to the store.
     * @return {?}
     */
    function () {
        return this.getQuery().__store__;
    };
    /** This method is responsible tells whether the plugin is entityBased or not.  */
    /**
     * This method is responsible tells whether the plugin is entityBased or not.
     * @param {?} entityId
     * @return {?}
     */
    AkitaPlugin.prototype.isEntityBased = /**
     * This method is responsible tells whether the plugin is entityBased or not.
     * @param {?} entityId
     * @return {?}
     */
    function (entityId) {
        return toBoolean(entityId);
    };
    /** This method is responsible for selecting the source; it can be the whole store or one entity. */
    /**
     * This method is responsible for selecting the source; it can be the whole store or one entity.
     * @param {?} entityId
     * @return {?}
     */
    AkitaPlugin.prototype.selectSource = /**
     * This method is responsible for selecting the source; it can be the whole store or one entity.
     * @param {?} entityId
     * @return {?}
     */
    function (entityId) {
        if (this.isEntityBased(entityId)) {
            return (/** @type {?} */ (this.getQuery())).selectEntity(entityId).pipe(filterNil);
        }
        return (/** @type {?} */ (this.getQuery())).select(function (state) { return state; });
    };
    /**
     * @param {?} entityId
     * @return {?}
     */
    AkitaPlugin.prototype.getSource = /**
     * @param {?} entityId
     * @return {?}
     */
    function (entityId) {
        if (this.isEntityBased(entityId)) {
            return (/** @type {?} */ (this.getQuery())).getEntity(entityId);
        }
        return this.getQuery().getSnapshot();
    };
    /** This method is responsible for updating the store or one entity; it can be the whole store or one entity. */
    /**
     * This method is responsible for updating the store or one entity; it can be the whole store or one entity.
     * @param {?} newState
     * @param {?=} entityId
     * @return {?}
     */
    AkitaPlugin.prototype.updateStore = /**
     * This method is responsible for updating the store or one entity; it can be the whole store or one entity.
     * @param {?} newState
     * @param {?=} entityId
     * @return {?}
     */
    function (newState, entityId) {
        if (this.isEntityBased(entityId)) {
            this.getStore().update(entityId, newState);
        }
        else {
            this.getStore().setState(function (state) { return (tslib_1.__assign({}, state, newState)); });
        }
    };
    return AkitaPlugin;
}());
/**
 * @abstract
 * @template E, S
 */
export { AkitaPlugin };
function AkitaPlugin_tsickle_Closure_declarations() {
    /** @type {?} */
    AkitaPlugin.prototype.query;
    /**
     * This method is responsible for cleaning.
     * @abstract
     * @return {?}
     */
    AkitaPlugin.prototype.destroy = function () { };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhdG9yYW1hL2FraXRhLyIsInNvdXJjZXMiOlsic3JjL3BsdWdpbnMvcGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7QUFLOUM7Ozs7QUFBQTtJQUNFLHFCQUFnQyxLQUFvQjtRQUFwQixVQUFLLEdBQUwsS0FBSyxDQUFlO0tBQUk7SUFFeEQsa0VBQWtFOzs7OztJQUN4RCw4QkFBUTs7OztJQUFsQjtRQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztLQUNuQjtJQUVELGtFQUFrRTs7Ozs7SUFDeEQsOEJBQVE7Ozs7SUFBbEI7UUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxTQUFTLENBQUM7S0FDbEM7SUFLRCxrRkFBa0Y7Ozs7OztJQUN4RSxtQ0FBYTs7Ozs7SUFBdkIsVUFBd0IsUUFBWTtRQUNsQyxPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUM1QjtJQUVELG9HQUFvRzs7Ozs7O0lBQzFGLGtDQUFZOzs7OztJQUF0QixVQUF1QixRQUFZO1FBQ2pDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNoQyxPQUFPLG1CQUFDLElBQUksQ0FBQyxRQUFRLEVBQXVCLEVBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3RGO1FBRUQsT0FBTyxtQkFBQyxJQUFJLENBQUMsUUFBUSxFQUFjLEVBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLEVBQUwsQ0FBSyxDQUFDLENBQUM7S0FDN0Q7Ozs7O0lBRVMsK0JBQVM7Ozs7SUFBbkIsVUFBb0IsUUFBWTtRQUM5QixJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDaEMsT0FBTyxtQkFBQyxJQUFJLENBQUMsUUFBUSxFQUF1QixFQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ25FO1FBRUQsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDdEM7SUFFRCxnSEFBZ0g7Ozs7Ozs7SUFDdEcsaUNBQVc7Ozs7OztJQUFyQixVQUFzQixRQUFRLEVBQUUsUUFBUztRQUN2QyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDNUM7YUFBTTtZQUNMLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBQyxLQUFLLElBQUssT0FBQSxzQkFBSyxLQUFLLEVBQUssUUFBUSxFQUFFLEVBQXpCLENBQXlCLENBQUMsQ0FBQztTQUNoRTtLQUNGO3NCQXRESDtJQXVEQyxDQUFBOzs7OztBQTlDRCx1QkE4Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRdWVyeUVudGl0eSB9IGZyb20gJy4uL2FwaS9xdWVyeS1lbnRpdHknO1xuaW1wb3J0IHsgUXVlcnkgfSBmcm9tICcuLi9hcGkvcXVlcnknO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyTmlsIH0gZnJvbSAnLi4vYXBpL29wZXJhdG9ycyc7XG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi9pbnRlcm5hbC91dGlscyc7XG5pbXBvcnQgeyBJRCB9IGZyb20gJy4uL2FwaS90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIFF1ZXJpZXM8RSwgUz4gPSBRdWVyeTxTPiB8IFF1ZXJ5RW50aXR5PFMsIEU+O1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWtpdGFQbHVnaW48RSA9IGFueSwgUyA9IGFueT4ge1xuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocHJvdGVjdGVkIHF1ZXJ5OiBRdWVyaWVzPEUsIFM+KSB7fVxuXG4gIC8qKiBUaGlzIG1ldGhvZCBpcyByZXNwb25zaWJsZSBmb3IgZ2V0dGluZyBhY2Nlc3MgdG8gdGhlIHF1ZXJ5LiAqL1xuICBwcm90ZWN0ZWQgZ2V0UXVlcnkoKTogUXVlcmllczxFLCBTPiB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnk7XG4gIH1cblxuICAvKiogVGhpcyBtZXRob2QgaXMgcmVzcG9uc2libGUgZm9yIGdldHRpbmcgYWNjZXNzIHRvIHRoZSBzdG9yZS4gKi9cbiAgcHJvdGVjdGVkIGdldFN0b3JlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFF1ZXJ5KCkuX19zdG9yZV9fO1xuICB9XG5cbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHJlc3BvbnNpYmxlIGZvciBjbGVhbmluZy4gKi9cbiAgcHVibGljIGFic3RyYWN0IGRlc3Ryb3koKTtcblxuICAvKiogVGhpcyBtZXRob2QgaXMgcmVzcG9uc2libGUgdGVsbHMgd2hldGhlciB0aGUgcGx1Z2luIGlzIGVudGl0eUJhc2VkIG9yIG5vdC4gICovXG4gIHByb3RlY3RlZCBpc0VudGl0eUJhc2VkKGVudGl0eUlkOiBJRCkge1xuICAgIHJldHVybiB0b0Jvb2xlYW4oZW50aXR5SWQpO1xuICB9XG5cbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHJlc3BvbnNpYmxlIGZvciBzZWxlY3RpbmcgdGhlIHNvdXJjZTsgaXQgY2FuIGJlIHRoZSB3aG9sZSBzdG9yZSBvciBvbmUgZW50aXR5LiAqL1xuICBwcm90ZWN0ZWQgc2VsZWN0U291cmNlKGVudGl0eUlkOiBJRCk6IE9ic2VydmFibGU8UyB8IEU+IHtcbiAgICBpZiAodGhpcy5pc0VudGl0eUJhc2VkKGVudGl0eUlkKSkge1xuICAgICAgcmV0dXJuICh0aGlzLmdldFF1ZXJ5KCkgYXMgUXVlcnlFbnRpdHk8UywgRT4pLnNlbGVjdEVudGl0eShlbnRpdHlJZCkucGlwZShmaWx0ZXJOaWwpO1xuICAgIH1cblxuICAgIHJldHVybiAodGhpcy5nZXRRdWVyeSgpIGFzIFF1ZXJ5PFM+KS5zZWxlY3Qoc3RhdGUgPT4gc3RhdGUpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldFNvdXJjZShlbnRpdHlJZDogSUQpOiBTIHwgRSB7XG4gICAgaWYgKHRoaXMuaXNFbnRpdHlCYXNlZChlbnRpdHlJZCkpIHtcbiAgICAgIHJldHVybiAodGhpcy5nZXRRdWVyeSgpIGFzIFF1ZXJ5RW50aXR5PFMsIEU+KS5nZXRFbnRpdHkoZW50aXR5SWQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdldFF1ZXJ5KCkuZ2V0U25hcHNob3QoKTtcbiAgfVxuXG4gIC8qKiBUaGlzIG1ldGhvZCBpcyByZXNwb25zaWJsZSBmb3IgdXBkYXRpbmcgdGhlIHN0b3JlIG9yIG9uZSBlbnRpdHk7IGl0IGNhbiBiZSB0aGUgd2hvbGUgc3RvcmUgb3Igb25lIGVudGl0eS4gKi9cbiAgcHJvdGVjdGVkIHVwZGF0ZVN0b3JlKG5ld1N0YXRlLCBlbnRpdHlJZD8pIHtcbiAgICBpZiAodGhpcy5pc0VudGl0eUJhc2VkKGVudGl0eUlkKSkge1xuICAgICAgdGhpcy5nZXRTdG9yZSgpLnVwZGF0ZShlbnRpdHlJZCwgbmV3U3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdldFN0b3JlKCkuc2V0U3RhdGUoKHN0YXRlKSA9PiAoey4uLnN0YXRlLCAuLi5uZXdTdGF0ZX0pKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==