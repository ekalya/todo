/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { AkitaPlugin } from '../plugin';
import { QueryEntity } from '../../api/query-entity';
import { BehaviorSubject, merge } from 'rxjs';
import { distinctUntilChanged, map, skip } from 'rxjs/operators';
import { coerceArray, isFunction, isUndefined, toBoolean } from '../../internal/utils';
import { __globalState } from '../../internal/global-state';
/** @type {?} */
export var dirtyCheckDefaultParams = {
    comparator: function (head, current) { return JSON.stringify(head) !== JSON.stringify(current); }
};
/**
 * @template Entity, StoreState
 */
var /**
 * @template Entity, StoreState
 */
DirtyCheckPlugin = /** @class */ (function (_super) {
    tslib_1.__extends(DirtyCheckPlugin, _super);
    function DirtyCheckPlugin(query, params, _entityId) {
        var _this = _super.call(this, query) || this;
        _this.query = query;
        _this.params = params;
        _this._entityId = _entityId;
        _this.dirty = new BehaviorSubject(false);
        _this.active = false;
        _this.isDirty$ = _this.dirty.asObservable().pipe(distinctUntilChanged());
        _this.params = tslib_1.__assign({}, dirtyCheckDefaultParams, params);
        if (_this.params.watchProperty) {
            /** @type {?} */
            var watchProp = _this.params.watchProperty;
            watchProp = coerceArray(watchProp);
            if (watchProp.includes('entities') && !watchProp.includes('ids') && query instanceof QueryEntity) {
                watchProp.push('ids');
            }
            _this.params.watchProperty = watchProp;
        }
        return _this;
    }
    /**
     * @return {?}
     */
    DirtyCheckPlugin.prototype.getHead = /**
     * @return {?}
     */
    function () {
        return this.head;
    };
    /**
     * @return {?}
     */
    DirtyCheckPlugin.prototype.activate = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.head = this._getHead();
        /** *
         * if we are tracking specific properties select only the relevant ones
          @type {?} */
        var source = this.params.watchProperty
            ? (/** @type {?} */ (this.params.watchProperty)).map(function (prop) { return _this.query.select(function (state) { return state[prop]; }).pipe(map(function (val) { return ({ val: val, __akitaKey: prop }); })); })
            : [this.selectSource(this._entityId)];
        this.subscription = merge.apply(void 0, tslib_1.__spread(source)).pipe(skip(1))
            .subscribe(function (currentState) {
            if (isUndefined(_this.head))
                return;
            /** *
             * __akitaKey is used to determine if we are tracking a specific property or a store change
              @type {?} */
            var head = currentState.__akitaKey ? _this.head[/** @type {?} */ (currentState.__akitaKey)] : _this.head;
            /** @type {?} */
            var compareTo = currentState.__akitaKey ? currentState.val : currentState;
            /** @type {?} */
            var isChange = _this.params.comparator(head, compareTo);
            _this.updateDirtiness(isChange);
        });
    };
    /**
     * @param {?=} params
     * @return {?}
     */
    DirtyCheckPlugin.prototype.reset = /**
     * @param {?=} params
     * @return {?}
     */
    function (params) {
        if (params === void 0) { params = {}; }
        /** @type {?} */
        var currentValue = this.head;
        if (isFunction(params.updateFn)) {
            if (this.isEntityBased(this._entityId)) {
                currentValue = params.updateFn(this.head, (/** @type {?} */ (this.getQuery())).getEntity(this._entityId));
            }
            else {
                currentValue = params.updateFn(this.head, (/** @type {?} */ (this.getQuery())).getSnapshot());
            }
        }
        /** *
         * If we are watching specific props compare them, if not compare the entire store
          @type {?} */
        var update = this.params.watchProperty ? this.compareProp(currentValue) : this._getHead() !== currentValue;
        if (update) {
            __globalState.setCustomAction({ type: "@DirtyCheck - Revert" });
            this.updateStore(currentValue, this._entityId);
        }
    };
    /**
     * @return {?}
     */
    DirtyCheckPlugin.prototype.setHead = /**
     * @return {?}
     */
    function () {
        if (!this.active) {
            this.activate();
            this.active = true;
        }
        else {
            this.head = this._getHead();
        }
        this.updateDirtiness(false);
        return this;
    };
    /**
     * @return {?}
     */
    DirtyCheckPlugin.prototype.isDirty = /**
     * @return {?}
     */
    function () {
        return toBoolean(this.dirty.value);
    };
    /**
     * @return {?}
     */
    DirtyCheckPlugin.prototype.hasHead = /**
     * @return {?}
     */
    function () {
        return toBoolean(this.getHead());
    };
    /**
     * @return {?}
     */
    DirtyCheckPlugin.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.head = null;
        this.subscription && this.subscription.unsubscribe();
    };
    /**
     * @param {?} isDirty
     * @return {?}
     */
    DirtyCheckPlugin.prototype.updateDirtiness = /**
     * @param {?} isDirty
     * @return {?}
     */
    function (isDirty) {
        this.dirty.next(isDirty);
    };
    /**
     * @return {?}
     */
    DirtyCheckPlugin.prototype._getHead = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var head = /** @type {?} */ (this.getSource(this._entityId));
        if (this.params.watchProperty) {
            head = (/** @type {?} */ (this.params.watchProperty)).reduce(function (_head, prop) {
                _head[prop] = (/** @type {?} */ (head))[prop];
                return _head;
            }, /** @type {?} */ ({}));
        }
        return head;
    };
    /**
     * @param {?} currentState
     * @return {?}
     */
    DirtyCheckPlugin.prototype.compareProp = /**
     * @param {?} currentState
     * @return {?}
     */
    function (currentState) {
        /** @type {?} */
        var propKeys = Object.keys(currentState);
        /** @type {?} */
        var head = this._getHead();
        return propKeys.some(function (propKey) { return currentState[propKey] !== head[propKey]; });
    };
    return DirtyCheckPlugin;
}(AkitaPlugin));
/**
 * @template Entity, StoreState
 */
export { DirtyCheckPlugin };
function DirtyCheckPlugin_tsickle_Closure_declarations() {
    /** @type {?} */
    DirtyCheckPlugin.prototype.head;
    /** @type {?} */
    DirtyCheckPlugin.prototype.dirty;
    /** @type {?} */
    DirtyCheckPlugin.prototype.subscription;
    /** @type {?} */
    DirtyCheckPlugin.prototype.active;
    /** @type {?} */
    DirtyCheckPlugin.prototype.isDirty$;
    /** @type {?} */
    DirtyCheckPlugin.prototype.query;
    /** @type {?} */
    DirtyCheckPlugin.prototype.params;
    /** @type {?} */
    DirtyCheckPlugin.prototype._entityId;
}

//# sourceMappingURL=data:application/json;base64,