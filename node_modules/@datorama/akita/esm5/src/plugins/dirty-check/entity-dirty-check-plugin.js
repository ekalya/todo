/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { dirtyCheckDefaultParams, DirtyCheckPlugin } from './dirty-check-plugin';
import { EntityCollectionPlugin } from '../entity-collection-plugin';
import { map, skip } from 'rxjs/operators';
// unsupported: template constraints.
/**
 * @template E, P
 */
var 
// unsupported: template constraints.
/**
 * @template E, P
 */
EntityDirtyCheckPlugin = /** @class */ (function (_super) {
    tslib_1.__extends(EntityDirtyCheckPlugin, _super);
    function EntityDirtyCheckPlugin(query, params) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this, query, params.entityIds) || this;
        _this.query = query;
        _this.params = params;
        _this.isSomeDirty$ = _this.query.select(function (state) { return state.entities; })
            .pipe(map(function (entities) { return _this.checkSomeDirty(entities); }));
        _this.params = tslib_1.__assign({}, dirtyCheckDefaultParams, params);
        _this.activate();
        _this.selectIds().pipe(skip(1)).subscribe(function (ids) {
            _this.rebase(ids, { afterAdd: function (plugin) { return plugin.setHead(); } });
        });
        return _this;
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.setHead = /**
     * @param {?=} ids
     * @return {?}
     */
    function (ids) {
        this.forEachId(ids, function (e) { return e.setHead(); });
        return this;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.hasHead = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (this.entities.has(id)) {
            /** @type {?} */
            var entity = this.getEntity(id);
            return entity.hasHead();
        }
        return false;
    };
    /**
     * @param {?=} ids
     * @param {?=} params
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.reset = /**
     * @param {?=} ids
     * @param {?=} params
     * @return {?}
     */
    function (ids, params) {
        if (params === void 0) { params = {}; }
        this.forEachId(ids, function (e) { return e.reset(params); });
    };
    /**
     * @param {?} id
     * @param {?=} asObservable
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.isDirty = /**
     * @param {?} id
     * @param {?=} asObservable
     * @return {?}
     */
    function (id, asObservable) {
        if (asObservable === void 0) { asObservable = true; }
        if (this.entities.has(id)) {
            /** @type {?} */
            var entity = this.getEntity(id);
            return asObservable ? entity.isDirty$ : entity.isDirty();
        }
        return false;
    };
    /**
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.isSomeDirty = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var entities = this.query.getAll({ asObject: true });
        return this.checkSomeDirty(entities);
    };
    /**
     * @param {?=} ids
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.destroy = /**
     * @param {?=} ids
     * @return {?}
     */
    function (ids) {
        this.forEachId(ids, function (e) { return e.destroy(); });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.instantiatePlugin = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return /** @type {?} */ (new DirtyCheckPlugin(this.query, this.params, id));
    };
    /**
     * @param {?} entities
     * @return {?}
     */
    EntityDirtyCheckPlugin.prototype.checkSomeDirty = /**
     * @param {?} entities
     * @return {?}
     */
    function (entities) {
        var e_1, _a;
        /** @type {?} */
        var entitiesIds = this.resolvedIds();
        try {
            for (var entitiesIds_1 = tslib_1.__values(entitiesIds), entitiesIds_1_1 = entitiesIds_1.next(); !entitiesIds_1_1.done; entitiesIds_1_1 = entitiesIds_1.next()) {
                var id = entitiesIds_1_1.value;
                /** @type {?} */
                var dirty = this.params.comparator((/** @type {?} */ (this.getEntity(id))).getHead(), entities[id]);
                if (dirty) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (entitiesIds_1_1 && !entitiesIds_1_1.done && (_a = entitiesIds_1.return)) _a.call(entitiesIds_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
    };
    return EntityDirtyCheckPlugin;
}(EntityCollectionPlugin));
// unsupported: template constraints.
/**
 * @template E, P
 */
export { EntityDirtyCheckPlugin };
function EntityDirtyCheckPlugin_tsickle_Closure_declarations() {
    /** @type {?} */
    EntityDirtyCheckPlugin.prototype.isSomeDirty$;
    /** @type {?} */
    EntityDirtyCheckPlugin.prototype.query;
    /** @type {?} */
    EntityDirtyCheckPlugin.prototype.params;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWRpcnR5LWNoZWNrLXBsdWdpbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkYXRvcmFtYS9ha2l0YS8iLCJzb3VyY2VzIjpbInNyYy9wbHVnaW5zL2RpcnR5LWNoZWNrL2VudGl0eS1kaXJ0eS1jaGVjay1wbHVnaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQXVCLHVCQUF1QixFQUFFLGdCQUFnQixFQUF3QixNQUFNLHNCQUFzQixDQUFDO0FBRTVILE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQ25FLE9BQU8sRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7Ozs7O0FBUXpDOzs7OztBQUFBO0lBQThHLGtEQUE0QjtJQUt4SSxnQ0FBc0IsS0FBMEIsRUFBbUIsTUFBMEM7NENBQUE7UUFBN0csWUFDRSxrQkFBTSxLQUFLLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQU0vQjtRQVBxQixXQUFLLEdBQUwsS0FBSyxDQUFxQjtRQUFtQixZQUFNLEdBQU4sTUFBTSxDQUFvQzs2QkFIekUsS0FBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLENBQUMsUUFBUSxFQUFkLENBQWMsQ0FBQzthQUMzRSxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQUMsUUFBYSxJQUFLLE9BQUEsS0FBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBN0IsQ0FBNkIsQ0FBQyxDQUFDO1FBSTVELEtBQUksQ0FBQyxNQUFNLHdCQUFPLHVCQUF1QixFQUFLLE1BQU0sQ0FBQyxDQUFDO1FBQ3RELEtBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQixLQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFBLEdBQUc7WUFDMUMsS0FBSSxDQUFDLE1BQU0sQ0FB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RUQsa0NBbUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtIYXNoTWFwLCBJRCwgSURTfSBmcm9tICcuLi8uLi9hcGkvdHlwZXMnO1xuaW1wb3J0IHtEaXJ0eUNoZWNrQ29tcGFyYXRvciwgZGlydHlDaGVja0RlZmF1bHRQYXJhbXMsIERpcnR5Q2hlY2tQbHVnaW4sIERpcnR5Q2hlY2tSZXNldFBhcmFtc30gZnJvbSAnLi9kaXJ0eS1jaGVjay1wbHVnaW4nO1xuaW1wb3J0IHtRdWVyeUVudGl0eX0gZnJvbSAnLi4vLi4vYXBpL3F1ZXJ5LWVudGl0eSc7XG5pbXBvcnQge0VudGl0eUNvbGxlY3Rpb25QbHVnaW59IGZyb20gJy4uL2VudGl0eS1jb2xsZWN0aW9uLXBsdWdpbic7XG5pbXBvcnQge21hcCwgc2tpcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IHR5cGUgRGlydHlDaGVja0NvbGxlY3Rpb25QYXJhbXM8RT4gPSB7XG4gIGNvbXBhcmF0b3I/OiBEaXJ0eUNoZWNrQ29tcGFyYXRvcjxFPjtcbiAgZW50aXR5SWRzPzogSUQgfCBJRFtdO1xufTtcblxuZXhwb3J0IGNsYXNzIEVudGl0eURpcnR5Q2hlY2tQbHVnaW48RSwgUCBleHRlbmRzIERpcnR5Q2hlY2tQbHVnaW48RSwgYW55PiA9IERpcnR5Q2hlY2tQbHVnaW48RSwgYW55Pj4gZXh0ZW5kcyBFbnRpdHlDb2xsZWN0aW9uUGx1Z2luPEUsIFA+IHtcblxuICBpc1NvbWVEaXJ0eSQ6IE9ic2VydmFibGU8Ym9vbGVhbj4gPSB0aGlzLnF1ZXJ5LnNlbGVjdChzdGF0ZSA9PiBzdGF0ZS5lbnRpdGllcylcbiAgICAucGlwZShtYXAoKGVudGl0aWVzOiBhbnkpID0+IHRoaXMuY2hlY2tTb21lRGlydHkoZW50aXRpZXMpKSk7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHF1ZXJ5OiBRdWVyeUVudGl0eTxhbnksIEU+LCBwcml2YXRlIHJlYWRvbmx5IHBhcmFtczogRGlydHlDaGVja0NvbGxlY3Rpb25QYXJhbXM8RT4gPSB7fSkge1xuICAgIHN1cGVyKHF1ZXJ5LCBwYXJhbXMuZW50aXR5SWRzKTtcbiAgICB0aGlzLnBhcmFtcyA9IHsuLi5kaXJ0eUNoZWNrRGVmYXVsdFBhcmFtcywgLi4ucGFyYW1zfTtcbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgdGhpcy5zZWxlY3RJZHMoKS5waXBlKHNraXAoMSkpLnN1YnNjcmliZShpZHMgPT4ge1xuICAgICAgdGhpcy5yZWJhc2UoaWRzLCB7YWZ0ZXJBZGQ6IHBsdWdpbiA9PiBwbHVnaW4uc2V0SGVhZCgpfSk7XG4gICAgfSk7XG4gIH1cblxuICBzZXRIZWFkKGlkcz86IElEUykge1xuICAgIHRoaXMuZm9yRWFjaElkKGlkcywgZSA9PiBlLnNldEhlYWQoKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBoYXNIZWFkKGlkOiBJRCk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLmVudGl0aWVzLmhhcyhpZCkpIHtcbiAgICAgIGNvbnN0IGVudGl0eSA9IHRoaXMuZ2V0RW50aXR5KGlkKTtcbiAgICAgIHJldHVybiBlbnRpdHkuaGFzSGVhZCgpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJlc2V0KGlkcz86IElEUywgcGFyYW1zOiBEaXJ0eUNoZWNrUmVzZXRQYXJhbXMgPSB7fSkge1xuICAgIHRoaXMuZm9yRWFjaElkKGlkcywgZSA9PiBlLnJlc2V0KHBhcmFtcykpO1xuICB9XG5cbiAgaXNEaXJ0eShpZDogSUQpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICBpc0RpcnR5KGlkOiBJRCwgYXNPYnNlcnZhYmxlOiB0cnVlKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgaXNEaXJ0eShpZDogSUQsIGFzT2JzZXJ2YWJsZTogZmFsc2UpOiBib29sZWFuO1xuICBpc0RpcnR5KGlkOiBJRCwgYXNPYnNlcnZhYmxlID0gdHJ1ZSk6IE9ic2VydmFibGU8Ym9vbGVhbj4gfCBib29sZWFuIHtcbiAgICBpZiAodGhpcy5lbnRpdGllcy5oYXMoaWQpKSB7XG4gICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmdldEVudGl0eShpZCk7XG4gICAgICByZXR1cm4gYXNPYnNlcnZhYmxlID8gZW50aXR5LmlzRGlydHkkIDogZW50aXR5LmlzRGlydHkoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpc1NvbWVEaXJ0eSgpOiBib29sZWFuIHtcbiAgICBjb25zdCBlbnRpdGllcyA9IHRoaXMucXVlcnkuZ2V0QWxsKHthc09iamVjdDogdHJ1ZX0pO1xuICAgIHJldHVybiB0aGlzLmNoZWNrU29tZURpcnR5KGVudGl0aWVzKTtcbiAgfVxuXG4gIGRlc3Ryb3koaWRzPzogSURTKSB7XG4gICAgdGhpcy5mb3JFYWNoSWQoaWRzLCBlID0+IGUuZGVzdHJveSgpKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBpbnN0YW50aWF0ZVBsdWdpbihpZDogSUQpOiBQIHtcbiAgICByZXR1cm4gbmV3IERpcnR5Q2hlY2tQbHVnaW4odGhpcy5xdWVyeSwgdGhpcy5wYXJhbXMsIGlkKSBhcyBQO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja1NvbWVEaXJ0eShlbnRpdGllczogSGFzaE1hcDxFPik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGVudGl0aWVzSWRzID0gdGhpcy5yZXNvbHZlZElkcygpO1xuICAgIGZvciAoY29uc3QgaWQgb2YgZW50aXRpZXNJZHMpIHtcbiAgICAgIGNvbnN0IGRpcnR5ID0gdGhpcy5wYXJhbXMuY29tcGFyYXRvcigodGhpcy5nZXRFbnRpdHkoaWQpIGFzIGFueSkuZ2V0SGVhZCgpLCBlbnRpdGllc1tpZF0pO1xuICAgICAgaWYgKGRpcnR5KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdfQ==