/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { delay, map, switchMap, take } from 'rxjs/operators';
import { BehaviorSubject, from } from 'rxjs';
import { isObservable, isUndefined } from '../../internal/utils';
import { AkitaPlugin } from '../plugin';
import { applyTransaction } from '../../api/transaction';
import { action, applyAction } from '../../internal/action';
/**
 * @record
 * @template E
 */
export function PaginationResponse() { }
function PaginationResponse_tsickle_Closure_declarations() {
    /** @type {?} */
    PaginationResponse.prototype.currentPage;
    /** @type {?} */
    PaginationResponse.prototype.perPage;
    /** @type {?} */
    PaginationResponse.prototype.lastPage;
    /** @type {?} */
    PaginationResponse.prototype.data;
    /** @type {?|undefined} */
    PaginationResponse.prototype.total;
    /** @type {?|undefined} */
    PaginationResponse.prototype.from;
    /** @type {?|undefined} */
    PaginationResponse.prototype.to;
    /** @type {?|undefined} */
    PaginationResponse.prototype.pageControls;
}
/** @type {?} */
var paginatorDefaults = {
    pagesControls: false,
    range: false,
    startWith: 1,
    cacheTimeout: undefined
};
/**
 * @template E
 */
var PaginatorPlugin = /** @class */ (function (_super) {
    tslib_1.__extends(PaginatorPlugin, _super);
    function PaginatorPlugin(query, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, query) || this;
        _this.query = query;
        _this.config = config;
        /**
         * Save current filters, sorting, etc. in cache
         */
        _this.metadata = new Map();
        _this.pages = new Map();
        _this.pagination = {
            currentPage: 1,
            perPage: 0,
            total: 0,
            lastPage: 0,
            data: []
        };
        /**
         * When the user navigates to a different page and return
         * we don't want to call `clearCache` on first time.
         */
        _this.initial = false;
        /**
         * Proxy to the query loading
         */
        _this.isLoading$ = _this.query.selectLoading().pipe(delay(0));
        _this.config = Object.assign(paginatorDefaults, config);
        var _a = _this.config, startWith = _a.startWith, cacheTimeout = _a.cacheTimeout;
        _this.page = new BehaviorSubject(startWith);
        if (isObservable(cacheTimeout)) {
            _this.clearCacheSubscription = cacheTimeout.subscribe(function (_) { return _this.clearCache(); });
        }
        return _this;
    }
    Object.defineProperty(PaginatorPlugin.prototype, "pageChanges", {
        /**
         * Listen to page changes
         */
        get: /**
         * Listen to page changes
         * @return {?}
         */
        function () {
            return this.page.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginatorPlugin.prototype, "currentPage", {
        /**
         * Get the current page number
         */
        get: /**
         * Get the current page number
         * @return {?}
         */
        function () {
            return this.pagination.currentPage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginatorPlugin.prototype, "isFirst", {
        /**
         * Check if current page is the first one
         */
        get: /**
         * Check if current page is the first one
         * @return {?}
         */
        function () {
            return this.currentPage === 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaginatorPlugin.prototype, "isLast", {
        /**
         * Check if current page is the last one
         */
        get: /**
         * Check if current page is the last one
         * @return {?}
         */
        function () {
            return this.currentPage === this.pagination.lastPage;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Whether to generate an array of pages for *ngFor
     * [1, 2, 3, 4]
     */
    /**
     * Whether to generate an array of pages for *ngFor
     * [1, 2, 3, 4]
     * @return {?}
     */
    PaginatorPlugin.prototype.withControls = /**
     * Whether to generate an array of pages for *ngFor
     * [1, 2, 3, 4]
     * @return {?}
     */
    function () {
        this.config.pagesControls = true;
        return this;
    };
    /**
     * Whether to generate the `from` and `to` keys
     * [1, 2, 3, 4]
     */
    /**
     * Whether to generate the `from` and `to` keys
     * [1, 2, 3, 4]
     * @return {?}
     */
    PaginatorPlugin.prototype.withRange = /**
     * Whether to generate the `from` and `to` keys
     * [1, 2, 3, 4]
     * @return {?}
     */
    function () {
        this.config.range = true;
        return this;
    };
    /**
     * Set the loading state
     */
    /**
     * Set the loading state
     * @param {?=} value
     * @return {?}
     */
    PaginatorPlugin.prototype.setLoading = /**
     * Set the loading state
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = true; }
        this.getStore().setLoading(value);
    };
    /**
     * Update the pagination object and add the page
     */
    /**
     * Update the pagination object and add the page
     * @param {?} response
     * @return {?}
     */
    PaginatorPlugin.prototype.update = /**
     * Update the pagination object and add the page
     * @param {?} response
     * @return {?}
     */
    function (response) {
        this.pagination = response;
        this.addPage(response.data);
    };
    /**
     *
     * Set the ids and add the page to store
     */
    /**
     *
     * Set the ids and add the page to store
     * @param {?} data
     * @return {?}
     */
    PaginatorPlugin.prototype.addPage = /**
     *
     * Set the ids and add the page to store
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.pages.set(this.currentPage, { ids: data.map(function (entity) { return entity[_this.getStore().idKey]; }) });
        this.getStore().add(data);
    };
    /**
     * Clear the cache.
     */
    /**
     * Clear the cache.
     * @return {?}
     */
    PaginatorPlugin.prototype.clearCache = /**
     * Clear the cache.
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.initial) {
            applyAction(function () {
                _this.getStore().remove();
            }, { type: '@Pagination - Clear Cache' });
            this.pages = new Map();
        }
        this.initial = false;
    };
    /**
     * @param {?} page
     * @return {?}
     */
    PaginatorPlugin.prototype.clearPage = /**
     * @param {?} page
     * @return {?}
     */
    function (page) {
        this.pages.delete(page);
    };
    /**
     * Clear the cache timeout and optionally the pages
     */
    /**
     * Clear the cache timeout and optionally the pages
     * @param {?=} __0
     * @return {?}
     */
    PaginatorPlugin.prototype.destroy = /**
     * Clear the cache timeout and optionally the pages
     * @param {?=} __0
     * @return {?}
     */
    function (_a) {
        var _b = _a === void 0 ? {} : _a, clearCache = _b.clearCache, currentPage = _b.currentPage;
        if (this.clearCacheSubscription) {
            this.clearCacheSubscription.unsubscribe();
        }
        if (clearCache) {
            this.clearCache();
        }
        if (!isUndefined(currentPage)) {
            this.setPage(currentPage);
        }
        this.initial = true;
    };
    /**
     * Whether the provided page is active
     */
    /**
     * Whether the provided page is active
     * @param {?} page
     * @return {?}
     */
    PaginatorPlugin.prototype.isPageActive = /**
     * Whether the provided page is active
     * @param {?} page
     * @return {?}
     */
    function (page) {
        return this.currentPage === page;
    };
    /**
     * Set the current page
     */
    /**
     * Set the current page
     * @param {?} page
     * @return {?}
     */
    PaginatorPlugin.prototype.setPage = /**
     * Set the current page
     * @param {?} page
     * @return {?}
     */
    function (page) {
        if (page !== this.currentPage || !this.hasPage(page)) {
            this.page.next((this.pagination.currentPage = page));
        }
    };
    /**
     * Increment current page
     */
    /**
     * Increment current page
     * @return {?}
     */
    PaginatorPlugin.prototype.nextPage = /**
     * Increment current page
     * @return {?}
     */
    function () {
        if (this.currentPage !== this.pagination.lastPage) {
            this.setPage(this.pagination.currentPage + 1);
        }
    };
    /**
     * Decrement current page
     */
    /**
     * Decrement current page
     * @return {?}
     */
    PaginatorPlugin.prototype.prevPage = /**
     * Decrement current page
     * @return {?}
     */
    function () {
        if (this.pagination.currentPage > 1) {
            this.setPage(this.pagination.currentPage - 1);
        }
    };
    /**
     * Set current page to last
     */
    /**
     * Set current page to last
     * @return {?}
     */
    PaginatorPlugin.prototype.setLastPage = /**
     * Set current page to last
     * @return {?}
     */
    function () {
        this.setPage(this.pagination.lastPage);
    };
    /**
     * Set current page to first
     */
    /**
     * Set current page to first
     * @return {?}
     */
    PaginatorPlugin.prototype.setFirstPage = /**
     * Set current page to first
     * @return {?}
     */
    function () {
        this.setPage(1);
    };
    /**
     * Check if page exists in cache
     */
    /**
     * Check if page exists in cache
     * @param {?} page
     * @return {?}
     */
    PaginatorPlugin.prototype.hasPage = /**
     * Check if page exists in cache
     * @param {?} page
     * @return {?}
     */
    function (page) {
        return this.pages.has(page);
    };
    /**
     * Get the current page if it's in cache, otherwise invoke the request
     */
    /**
     * Get the current page if it's in cache, otherwise invoke the request
     * @param {?} req
     * @return {?}
     */
    PaginatorPlugin.prototype.getPage = /**
     * Get the current page if it's in cache, otherwise invoke the request
     * @param {?} req
     * @return {?}
     */
    function (req) {
        var _this = this;
        /** @type {?} */
        var page = this.pagination.currentPage;
        if (this.hasPage(page)) {
            return this.selectPage(page);
        }
        else {
            this.setLoading(true);
            return from(req()).pipe(switchMap(function (config) {
                applyTransaction(function () {
                    _this.setLoading(false);
                    _this.update(config);
                });
                return _this.selectPage(page);
            }));
        }
    };
    /**
     * @return {?}
     */
    PaginatorPlugin.prototype.getQuery = /**
     * @return {?}
     */
    function () {
        return this.query;
    };
    /**
     * @return {?}
     */
    PaginatorPlugin.prototype.getFrom = /**
     * @return {?}
     */
    function () {
        if (this.isFirst) {
            return 1;
        }
        return (this.currentPage - 1) * this.pagination.perPage + 1;
    };
    /**
     * @return {?}
     */
    PaginatorPlugin.prototype.getTo = /**
     * @return {?}
     */
    function () {
        return this.currentPage * this.pagination.perPage;
    };
    /**
     * Select the page
     * @param {?} page
     * @return {?}
     */
    PaginatorPlugin.prototype.selectPage = /**
     * Select the page
     * @param {?} page
     * @return {?}
     */
    function (page) {
        var _this = this;
        return this.query.selectAll({ asObject: true }).pipe(take(1), map(function (entities) {
            /** @type {?} */
            var response = tslib_1.__assign({}, _this.pagination, { data: _this.pages.get(page).ids.map(function (id) { return entities[id]; }) });
            var _a = _this.config, range = _a.range, pagesControls = _a.pagesControls;
            if (!_this.pagination.total) {
                response.total = response.perPage * response.lastPage;
                _this.pagination.total = response.total;
            }
            if (range) {
                response.from = _this.getFrom();
                response.to = _this.getTo();
            }
            if (pagesControls) {
                response.pageControls = generatePages(_this.pagination.total, _this.pagination.perPage);
            }
            return response;
        }));
    };
    tslib_1.__decorate([
        action({ type: '@Pagination - New Page' }, true),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PaginatorPlugin.prototype, "update", null);
    return PaginatorPlugin;
}(AkitaPlugin));
export { PaginatorPlugin };
function PaginatorPlugin_tsickle_Closure_declarations() {
    /**
     * Save current filters, sorting, etc. in cache
     * @type {?}
     */
    PaginatorPlugin.prototype.metadata;
    /** @type {?} */
    PaginatorPlugin.prototype.page;
    /** @type {?} */
    PaginatorPlugin.prototype.pages;
    /** @type {?} */
    PaginatorPlugin.prototype.clearCacheSubscription;
    /** @type {?} */
    PaginatorPlugin.prototype.pagination;
    /**
     * When the user navigates to a different page and return
     * we don't want to call `clearCache` on first time.
     * @type {?}
     */
    PaginatorPlugin.prototype.initial;
    /**
     * Proxy to the query loading
     * @type {?}
     */
    PaginatorPlugin.prototype.isLoading$;
    /** @type {?} */
    PaginatorPlugin.prototype.query;
    /** @type {?} */
    PaginatorPlugin.prototype.config;
}
/**
 * Generate an array so we can ngFor them to navigate between pages
 * @param {?} total
 * @param {?} perPage
 * @return {?}
 */
function generatePages(total, perPage) {
    /** @type {?} */
    var len = Math.ceil(total / perPage);
    /** @type {?} */
    var arr = [];
    for (var i = 0; i < len; i++) {
        arr.push(i + 1);
    }
    return arr;
}
/** *
 * backward compatibility
  @type {?} */
export var Paginator = PaginatorPlugin;

//# sourceMappingURL=data:application/json;base64,