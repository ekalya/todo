/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { AkitaPlugin } from '../plugin';
import { debounceTime } from 'rxjs/operators';
import { __globalState } from '../../internal/global-state';
import { getValue, isString, setValue } from '../../internal/utils';
/**
 * @template T
 */
var /**
 * @template T
 */
PersistNgFormPlugin = /** @class */ (function (_super) {
    tslib_1.__extends(PersistNgFormPlugin, _super);
    function PersistNgFormPlugin(query, factoryFnOrPath, params) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this, query) || this;
        _this.query = query;
        _this.factoryFnOrPath = factoryFnOrPath;
        _this.params = params;
        _this.params = tslib_1.__assign({ debounceTime: 300, formKey: 'akitaForm', emitEvent: false }, params);
        _this.isKeyBased = isString(factoryFnOrPath);
        return _this;
    }
    /**
     * @param {?} form
     * @return {?}
     */
    PersistNgFormPlugin.prototype.setForm = /**
     * @param {?} form
     * @return {?}
     */
    function (form) {
        this.form = form;
        this.activate();
        return this;
    };
    /**
     * @param {?=} initialState
     * @return {?}
     */
    PersistNgFormPlugin.prototype.reset = /**
     * @param {?=} initialState
     * @return {?}
     */
    function (initialState) {
        var _a;
        /** @type {?} */
        var value;
        if (initialState) {
            value = initialState;
        }
        else {
            value = this.isKeyBased ? this.initialValue : (/** @type {?} */ (this)).factoryFnOrPath();
        }
        this.form.patchValue(value);
        /** @type {?} */
        var storeValue = this.isKeyBased ? setValue(this.getStore()._value(), this.getStore().storeName + "." + this.factoryFnOrPath, value) : (_a = {}, _a[this.params.formKey] = value, _a);
        this.updateStore(storeValue);
    };
    /**
     * @return {?}
     */
    PersistNgFormPlugin.prototype.activate = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var _a;
        /** @type {?} */
        var path;
        if (this.isKeyBased) {
            path = this.getStore().storeName + "." + this.factoryFnOrPath;
            this.initialValue = getValue(this.getStore()._value(), path);
            this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });
        }
        else {
            if (!(/** @type {?} */ (this.getQuery().getSnapshot()))[this.params.formKey]) {
                __globalState.setAction({ type: '@PersistNgFormPlugin activate' });
                this.updateStore((_a = {}, _a[this.params.formKey] = (/** @type {?} */ (this)).factoryFnOrPath(), _a));
            }
            this.query.selectOnce(function (state) { return (/** @type {?} */ (state))[_this.params.formKey]; }).subscribe(function (formValue) { return _this.form.patchValue(formValue); });
        }
        this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe(function (value) {
            __globalState.setAction({ type: '@PersistForm - Update' });
            /** @type {?} */
            var newState;
            if (_this.isKeyBased) {
                newState = function (state) { return setValue(state, path, value); };
            }
            else {
                newState = function () {
                    var _a;
                    return (_a = {}, _a[_this.params.formKey] = value, _a);
                };
            }
            _this.updateStore(newState(_this.getStore()._value()));
        });
    };
    /**
     * @return {?}
     */
    PersistNgFormPlugin.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.formChanges && this.formChanges.unsubscribe();
    };
    return PersistNgFormPlugin;
}(AkitaPlugin));
/**
 * @template T
 */
export { PersistNgFormPlugin };
function PersistNgFormPlugin_tsickle_Closure_declarations() {
    /** @type {?} */
    PersistNgFormPlugin.prototype.formChanges;
    /** @type {?} */
    PersistNgFormPlugin.prototype.form;
    /** @type {?} */
    PersistNgFormPlugin.prototype.isKeyBased;
    /** @type {?} */
    PersistNgFormPlugin.prototype.initialValue;
    /** @type {?} */
    PersistNgFormPlugin.prototype.query;
    /** @type {?} */
    PersistNgFormPlugin.prototype.factoryFnOrPath;
    /** @type {?} */
    PersistNgFormPlugin.prototype.params;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc2lzdC1uZy1mb3JtLXBsdWdpbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkYXRvcmFtYS9ha2l0YS8iLCJzb3VyY2VzIjpbInNyYy9wbHVnaW5zL3BlcnNpc3QtZm9ybS9wZXJzaXN0LW5nLWZvcm0tcGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUd4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzVELE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7O0FBa0JwRTs7O0FBQUE7SUFBa0QsK0NBQVc7SUFNM0QsNkJBQXNCLEtBQWlCLEVBQVUsZUFBa0MsRUFBVSxNQUE4Qjs0Q0FBQTtRQUEzSCxZQUNFLGtCQUFNLEtBQUssQ0FBQyxTQUdiO1FBSnFCLFdBQUssR0FBTCxLQUFLLENBQVk7UUFBVSxxQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUFBVSxZQUFNLEdBQU4sTUFBTSxDQUF3QjtRQUV6SCxLQUFJLENBQUMsTUFBTSxvQkFBUSxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEVBQUssTUFBTSxDQUFFLENBQUM7UUFDOUYsS0FBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7O0tBQzdDOzs7OztJQUVELHFDQUFPOzs7O0lBQVAsVUFBUSxJQUFtQjtRQUN6QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsT0FBTyxJQUFJLENBQUM7S0FDYjs7Ozs7SUFFRCxtQ0FBSzs7OztJQUFMLFVBQU0sWUFBZ0I7OztRQUNwQixJQUFJLEtB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QUc7Z0JBQWxDLENBQWtDLENBQUM7YUFDckQ7WUFDRCxLQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3RELENBQUMsQ0FBQzs7Ozs7SUFHTCxxQ0FBTzs7O0lBQVA7UUFDRSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDcEQ7OEJBckZIO0VBdUJrRCxXQUFXLEVBK0Q1RCxDQUFBOzs7O0FBL0RELCtCQStEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFraXRhUGx1Z2luIH0gZnJvbSAnLi4vcGx1Z2luJztcbmltcG9ydCB7IFF1ZXJ5IH0gZnJvbSAnLi4vLi4vYXBpL3F1ZXJ5JztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgX19nbG9iYWxTdGF0ZSB9IGZyb20gJy4uLy4uL2ludGVybmFsL2dsb2JhbC1zdGF0ZSc7XG5pbXBvcnQgeyBnZXRWYWx1ZSwgaXNTdHJpbmcsIHNldFZhbHVlIH0gZnJvbSAnLi4vLi4vaW50ZXJuYWwvdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBGb3JtR3JvdXBMaWtlID0ge1xuICBwYXRjaFZhbHVlOiBGdW5jdGlvbjtcbiAgc2V0VmFsdWU6IEZ1bmN0aW9uO1xuICB2YWx1ZUNoYW5nZXM6IE9ic2VydmFibGU8YW55Pjtcbn07XG5cbmV4cG9ydCB0eXBlIEFraXRhRm9ybVByb3A8VD4gPSB7XG4gIFtrZXk6IHN0cmluZ106IFQ7XG59O1xuXG5leHBvcnQgdHlwZSBQZXJzaXN0Rm9ybVBhcmFtcyA9IHtcbiAgZGVib3VuY2VUaW1lPzogbnVtYmVyO1xuICBmb3JtS2V5Pzogc3RyaW5nO1xuICBlbWl0RXZlbnQ/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IGNsYXNzIFBlcnNpc3ROZ0Zvcm1QbHVnaW48VCA9IGFueT4gZXh0ZW5kcyBBa2l0YVBsdWdpbiB7XG4gIGZvcm1DaGFuZ2VzOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgZm9ybTogRm9ybUdyb3VwTGlrZTtcbiAgcHJpdmF0ZSBpc0tleUJhc2VkOiBib29sZWFuO1xuICBwcml2YXRlIGluaXRpYWxWYWx1ZTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcXVlcnk6IFF1ZXJ5PGFueT4sIHByaXZhdGUgZmFjdG9yeUZuT3JQYXRoOiBGdW5jdGlvbiB8IHN0cmluZywgcHJpdmF0ZSBwYXJhbXM6IFBlcnNpc3RGb3JtUGFyYW1zID0ge30pIHtcbiAgICBzdXBlcihxdWVyeSk7XG4gICAgdGhpcy5wYXJhbXMgPSB7IC4uLnsgZGVib3VuY2VUaW1lOiAzMDAsIGZvcm1LZXk6ICdha2l0YUZvcm0nLCBlbWl0RXZlbnQ6IGZhbHNlIH0sIC4uLnBhcmFtcyB9O1xuICAgIHRoaXMuaXNLZXlCYXNlZCA9IGlzU3RyaW5nKGZhY3RvcnlGbk9yUGF0aCk7XG4gIH1cblxuICBzZXRGb3JtKGZvcm06IEZvcm1Hcm91cExpa2UpIHtcbiAgICB0aGlzLmZvcm0gPSBmb3JtO1xuICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlc2V0KGluaXRpYWxTdGF0ZT86IFQpIHtcbiAgICBsZXQgdmFsdWU7XG4gICAgaWYgKGluaXRpYWxTdGF0ZSkge1xuICAgICAgdmFsdWUgPSBpbml0aWFsU3RhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gdGhpcy5pc0tleUJhc2VkID8gdGhpcy5pbml0aWFsVmFsdWUgOiAodGhpcyBhcyBhbnkpLmZhY3RvcnlGbk9yUGF0aCgpO1xuICAgIH1cblxuICAgIHRoaXMuZm9ybS5wYXRjaFZhbHVlKHZhbHVlKTtcblxuICAgIGNvbnN0IHN0b3JlVmFsdWUgPSB0aGlzLmlzS2V5QmFzZWQgPyBzZXRWYWx1ZSh0aGlzLmdldFN0b3JlKCkuX3ZhbHVlKCksIGAke3RoaXMuZ2V0U3RvcmUoKS5zdG9yZU5hbWV9LiR7dGhpcy5mYWN0b3J5Rm5PclBhdGh9YCwgdmFsdWUpIDogeyBbdGhpcy5wYXJhbXMuZm9ybUtleV06IHZhbHVlIH07XG4gICAgdGhpcy51cGRhdGVTdG9yZShzdG9yZVZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgYWN0aXZhdGUoKSB7XG4gICAgbGV0IHBhdGg7XG5cbiAgICBpZiAodGhpcy5pc0tleUJhc2VkKSB7XG4gICAgICBwYXRoID0gYCR7dGhpcy5nZXRTdG9yZSgpLnN0b3JlTmFtZX0uJHt0aGlzLmZhY3RvcnlGbk9yUGF0aH1gO1xuICAgICAgdGhpcy5pbml0aWFsVmFsdWUgPSBnZXRWYWx1ZSh0aGlzLmdldFN0b3JlKCkuX3ZhbHVlKCksIHBhdGgpO1xuICAgICAgdGhpcy5mb3JtLnBhdGNoVmFsdWUodGhpcy5pbml0aWFsVmFsdWUsIHsgZW1pdEV2ZW50OiB0aGlzLnBhcmFtcy5lbWl0RXZlbnQgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghKHRoaXMuZ2V0UXVlcnkoKS5nZXRTbmFwc2hvdCgpIGFzIEFraXRhRm9ybVByb3A8VD4pW3RoaXMucGFyYW1zLmZvcm1LZXldKSB7XG4gICAgICAgIF9fZ2xvYmFsU3RhdGUuc2V0QWN0aW9uKHsgdHlwZTogJ0BQZXJzaXN0TmdGb3JtUGx1Z2luIGFjdGl2YXRlJyB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVTdG9yZSh7IFt0aGlzLnBhcmFtcy5mb3JtS2V5XTogKHRoaXMgYXMgYW55KS5mYWN0b3J5Rm5PclBhdGgoKSB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5xdWVyeS5zZWxlY3RPbmNlKHN0YXRlID0+IChzdGF0ZSBhcyBBa2l0YUZvcm1Qcm9wPFQ+KVt0aGlzLnBhcmFtcy5mb3JtS2V5XSkuc3Vic2NyaWJlKGZvcm1WYWx1ZSA9PiB0aGlzLmZvcm0ucGF0Y2hWYWx1ZShmb3JtVmFsdWUpKTtcbiAgICB9XG5cbiAgICB0aGlzLmZvcm1DaGFuZ2VzID0gdGhpcy5mb3JtLnZhbHVlQ2hhbmdlcy5waXBlKGRlYm91bmNlVGltZSh0aGlzLnBhcmFtcy5kZWJvdW5jZVRpbWUpKS5zdWJzY3JpYmUodmFsdWUgPT4ge1xuICAgICAgX19nbG9iYWxTdGF0ZS5zZXRBY3Rpb24oeyB0eXBlOiAnQFBlcnNpc3RGb3JtIC0gVXBkYXRlJyB9KTtcbiAgICAgIGxldCBuZXdTdGF0ZTtcbiAgICAgIGlmICh0aGlzLmlzS2V5QmFzZWQpIHtcbiAgICAgICAgbmV3U3RhdGUgPSBzdGF0ZSA9PiBzZXRWYWx1ZShzdGF0ZSwgcGF0aCwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3U3RhdGUgPSAoKSA9PiAoeyBbdGhpcy5wYXJhbXMuZm9ybUtleV06IHZhbHVlIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy51cGRhdGVTdG9yZShuZXdTdGF0ZSh0aGlzLmdldFN0b3JlKCkuX3ZhbHVlKCkpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5mb3JtQ2hhbmdlcyAmJiB0aGlzLmZvcm1DaGFuZ2VzLnVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cbiJdfQ==