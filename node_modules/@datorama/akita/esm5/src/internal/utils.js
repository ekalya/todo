/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Observable } from 'rxjs';
/**
 * Wraps the provided value in an array, unless the provided _value is an array.
 * @template T
 * @param {?} value
 * @return {?}
 */
export function coerceArray(value) {
    return Array.isArray(value) ? value : [value];
}
/**
 * Check if a value is an object
 * @param {?} value
 * @return {?}
 */
export function isObject(value) {
    return Object.prototype.toString.call(value) === '[object Object]';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isPlainObject(value) {
    return toBoolean(value) && value.constructor.name === 'Object';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isFunction(value) {
    return typeof value === 'function';
}
/**
 * @param {?} value
 * @return {?}
 */
export function toBoolean(value) {
    return value != null && "" + value !== 'false';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isUndefined(value) {
    return typeof value === 'undefined';
}
/**
 * Check if entity exists
 * @template E
 * @param {?} id
 * @param {?} entities
 * @return {?}
 */
export function entityExists(id, entities) {
    return entities.hasOwnProperty(id);
}
/**
 * Observable that emits empty value and complete
 * @template T
 * @return {?}
 */
export function noop() {
    return new Observable(function (observer) {
        observer.next();
        observer.complete();
    });
}
/**
 * @param {?} value
 * @return {?}
 */
export function isObservable(value) {
    return toBoolean(value) && isFunction(value.subscribe);
}
/**
 * @param {?} val
 * @return {?}
 */
export function isString(val) {
    return typeof val === 'string';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNumber(value) {
    return typeof value === 'number';
}
/**
 * @param {?} val
 * @return {?}
 */
export function isDefined(val) {
    return val !== null && typeof val !== 'undefined';
}
/**
 * Check if the active entity exist
 * @template E
 * @param {?} state
 * @return {?}
 */
export function resetActive(state) {
    return isActiveState(state) && entityExists((/** @type {?} */ (state)).active, state.entities) === false;
}
/**
 * Check if the store supports active entity
 * @template E
 * @param {?} state
 * @return {?}
 */
export function isActiveState(state) {
    return (/** @type {?} */ (state)).hasOwnProperty('active');
}
/** *
 * setValue(state, 'todos.ui', { filter: {}})
  @type {?} */
export var setValue = function (obj, prop, val) {
    /** @type {?} */
    var split = prop.split('.');
    if (split.length === 1)
        return val;
    obj = tslib_1.__assign({}, obj);
    /** @type {?} */
    var lastIndex = split.length - 2;
    /** @type {?} */
    var removeStoreName = prop.split('.').slice(1);
    removeStoreName.reduce(function (acc, part, index) {
        if (index === lastIndex) {
            acc[part] = val;
        }
        else {
            acc[part] = tslib_1.__assign({}, acc[part]);
        }
        return acc && acc[part];
    }, obj);
    return obj;
};
/** *
 * getValue(state, 'todos.ui')
  @type {?} */
export var getValue = function (obj, prop) {
    /** return the whole state  */
    if (prop.split('.').length === 1) {
        return obj;
    }
    /** @type {?} */
    var removeStoreName = prop
        .split('.')
        .slice(1)
        .join('.');
    return removeStoreName.split('.').reduce(function (acc, part) { return acc && acc[part]; }, obj);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEvIiwic291cmNlcyI6WyJzcmMvaW50ZXJuYWwvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7Ozs7O0FBSWxDLE1BQU0sc0JBQXlCLEtBQWM7SUFDM0MsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDL0M7Ozs7OztBQUdELE1BQU0sbUJBQW1CLEtBQVU7SUFDakMsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssaUJBQWlCLENBQUM7Q0FDcEU7Ozs7O0FBRUQsTUFBTSx3QkFBd0IsS0FBSztJQUNqQyxPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7Q0FDaEU7Ozs7O0FBRUQsTUFBTSxxQkFBcUIsS0FBSztJQUM5QixPQUFPLE9BQU8sS0FBSyxLQUFLLFVBQVUsQ0FBQztDQUNwQzs7Ozs7QUFFRCxNQUFNLG9CQUFvQixLQUFVO0lBQ2xDLE9BQU8sS0FBSyxJQUFJLElBQUksSUFBSSxLQUFHLEtBQU8sS0FBSyxPQUFPLENBQUM7Q0FDaEQ7Ozs7O0FBRUQsTUFBTSxzQkFBc0IsS0FBSztJQUMvQixPQUFPLE9BQU8sS0FBSyxLQUFLLFdBQVcsQ0FBQztDQUNyQzs7Ozs7Ozs7QUFLRCxNQUFNLHVCQUEwQixFQUFNLEVBQUUsUUFBb0I7SUFDMUQsT0FBTyxRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ3BDOzs7Ozs7QUFLRCxNQUFNO0lBQ0osT0FBTyxJQUFJLFVBQVUsQ0FBQyxVQUFBLFFBQVE7UUFDNUIsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2hCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUNyQixDQUFDLENBQUM7Q0FDSjs7Ozs7QUFFRCxNQUFNLHVCQUF1QixLQUFLO0lBQ2hDLE9BQU8sU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDeEQ7Ozs7O0FBRUQsTUFBTSxtQkFBbUIsR0FBaUI7SUFDeEMsT0FBTyxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUM7Q0FDaEM7Ozs7O0FBRUQsTUFBTSxtQkFBbUIsS0FBSztJQUM1QixPQUFPLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQztDQUNsQzs7Ozs7QUFFRCxNQUFNLG9CQUFvQixHQUFHO0lBQzNCLE9BQU8sR0FBRyxLQUFLLElBQUksSUFBSSxPQUFPLEdBQUcsS0FBSyxXQUFXLENBQUM7Q0FDbkQ7Ozs7Ozs7QUFLRCxNQUFNLHNCQUF5QixLQUFxQjtJQUNsRCxPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxZQUFZLENBQUMsbUJBQUMsS0FBb0IsRUFBQyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssS0FBSyxDQUFDO0NBQ3RHOzs7Ozs7O0FBS0QsTUFBTSx3QkFBMkIsS0FBcUI7SUFDcEQsT0FBTyxtQkFBQyxLQUFvQixFQUFDLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQ3hEOzs7O0FBS0QsV0FBYSxRQUFRLEdBQUcsVUFBQyxHQUFRLEVBQUUsSUFBWSxFQUFFLEdBQVE7O0lBQ3ZELElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFOUIsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUM7UUFBRSxPQUFPLEdBQUcsQ0FBQztJQUVuQyxHQUFHLHdCQUFRLEdBQUcsQ0FBRSxDQUFDOztJQUVqQixJQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQzs7SUFDbkMsSUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFakQsZUFBZSxDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSztRQUN0QyxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFDdkIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztTQUNqQjthQUFNO1lBQ0wsR0FBRyxDQUFDLElBQUksQ0FBQyx3QkFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUUsQ0FBQztTQUM5QjtRQUVELE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN6QixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRVIsT0FBTyxHQUFHLENBQUM7Q0FDWixDQUFDOzs7O0FBS0YsV0FBYSxRQUFRLEdBQUcsVUFBQyxHQUFRLEVBQUUsSUFBWTs7SUFFN0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDaEMsT0FBTyxHQUFHLENBQUM7S0FDWjs7SUFDRCxJQUFNLGVBQWUsR0FBRyxJQUFJO1NBQ3pCLEtBQUssQ0FBQyxHQUFHLENBQUM7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ1IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsT0FBTyxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQVEsRUFBRSxJQUFZLElBQUssT0FBQSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFoQixDQUFnQixFQUFFLEdBQUcsQ0FBQyxDQUFDO0NBQzdGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBY3RpdmVTdGF0ZSwgRW50aXR5U3RhdGUsIEhhc2hNYXAsIElEIH0gZnJvbSAnLi4vYXBpL3R5cGVzJztcblxuLyoqIFdyYXBzIHRoZSBwcm92aWRlZCB2YWx1ZSBpbiBhbiBhcnJheSwgdW5sZXNzIHRoZSBwcm92aWRlZCBfdmFsdWUgaXMgYW4gYXJyYXkuICovXG5leHBvcnQgZnVuY3Rpb24gY29lcmNlQXJyYXk8VD4odmFsdWU6IFQgfCBUW10pOiBUW10ge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG59XG5cbi8qKiBDaGVjayBpZiBhIHZhbHVlIGlzIGFuIG9iamVjdCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlOiBhbnkpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdG9Cb29sZWFuKHZhbHVlKSAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnT2JqZWN0Jztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpOiB2YWx1ZSBpcyBGdW5jdGlvbiB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0Jvb2xlYW4odmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBgJHt2YWx1ZX1gICE9PSAnZmFsc2UnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgZW50aXR5IGV4aXN0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gZW50aXR5RXhpc3RzPEU+KGlkOiBJRCwgZW50aXRpZXM6IEhhc2hNYXA8RT4pIHtcbiAgcmV0dXJuIGVudGl0aWVzLmhhc093blByb3BlcnR5KGlkKTtcbn1cblxuLyoqXG4gKiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgZW1wdHkgdmFsdWUgYW5kIGNvbXBsZXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub29wPFQ+KCk6IE9ic2VydmFibGU8VD4ge1xuICByZXR1cm4gbmV3IE9ic2VydmFibGUob2JzZXJ2ZXIgPT4ge1xuICAgIG9ic2VydmVyLm5leHQoKTtcbiAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JzZXJ2YWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdG9Cb29sZWFuKHZhbHVlKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnN1YnNjcmliZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyh2YWw6IHN0cmluZyB8IGFueSk6IHZhbCBpcyBzdHJpbmcge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsICE9PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgYWN0aXZlIGVudGl0eSBleGlzdFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRBY3RpdmU8RT4oc3RhdGU6IEVudGl0eVN0YXRlPEU+KSB7XG4gIHJldHVybiBpc0FjdGl2ZVN0YXRlKHN0YXRlKSAmJiBlbnRpdHlFeGlzdHMoKHN0YXRlIGFzIEFjdGl2ZVN0YXRlKS5hY3RpdmUsIHN0YXRlLmVudGl0aWVzKSA9PT0gZmFsc2U7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIHN0b3JlIHN1cHBvcnRzIGFjdGl2ZSBlbnRpdHlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQWN0aXZlU3RhdGU8RT4oc3RhdGU6IEVudGl0eVN0YXRlPEU+KSB7XG4gIHJldHVybiAoc3RhdGUgYXMgQWN0aXZlU3RhdGUpLmhhc093blByb3BlcnR5KCdhY3RpdmUnKTtcbn1cblxuLyoqXG4gKiBzZXRWYWx1ZShzdGF0ZSwgJ3RvZG9zLnVpJywgeyBmaWx0ZXI6IHt9fSlcbiAqL1xuZXhwb3J0IGNvbnN0IHNldFZhbHVlID0gKG9iajogYW55LCBwcm9wOiBzdHJpbmcsIHZhbDogYW55KSA9PiB7XG4gIGNvbnN0IHNwbGl0ID0gcHJvcC5zcGxpdCgnLicpO1xuXG4gIGlmIChzcGxpdC5sZW5ndGggPT09IDEpIHJldHVybiB2YWw7XG5cbiAgb2JqID0geyAuLi5vYmogfTtcblxuICBjb25zdCBsYXN0SW5kZXggPSBzcGxpdC5sZW5ndGggLSAyO1xuICBjb25zdCByZW1vdmVTdG9yZU5hbWUgPSBwcm9wLnNwbGl0KCcuJykuc2xpY2UoMSk7XG5cbiAgcmVtb3ZlU3RvcmVOYW1lLnJlZHVjZSgoYWNjLCBwYXJ0LCBpbmRleCkgPT4ge1xuICAgIGlmIChpbmRleCA9PT0gbGFzdEluZGV4KSB7XG4gICAgICBhY2NbcGFydF0gPSB2YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY1twYXJ0XSA9IHsgLi4uYWNjW3BhcnRdIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYyAmJiBhY2NbcGFydF07XG4gIH0sIG9iaik7XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbi8qKlxuICogZ2V0VmFsdWUoc3RhdGUsICd0b2Rvcy51aScpXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRWYWx1ZSA9IChvYmo6IGFueSwgcHJvcDogc3RyaW5nKSA9PiB7XG4gIC8qKiByZXR1cm4gdGhlIHdob2xlIHN0YXRlICAqL1xuICBpZiAocHJvcC5zcGxpdCgnLicpLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgY29uc3QgcmVtb3ZlU3RvcmVOYW1lID0gcHJvcFxuICAgIC5zcGxpdCgnLicpXG4gICAgLnNsaWNlKDEpXG4gICAgLmpvaW4oJy4nKTtcbiAgcmV0dXJuIHJlbW92ZVN0b3JlTmFtZS5zcGxpdCgnLicpLnJlZHVjZSgoYWNjOiBhbnksIHBhcnQ6IHN0cmluZykgPT4gYWNjICYmIGFjY1twYXJ0XSwgb2JqKTtcbn07XG4iXX0=