/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { entityExists, isObject, toBoolean } from './utils';
var AkitaError = /** @class */ (function (_super) {
    tslib_1.__extends(AkitaError, _super);
    function AkitaError(message) {
        return _super.call(this, message) || this;
    }
    return AkitaError;
}(Error));
export { AkitaError };
var AkitaImmutabilityError = /** @class */ (function (_super) {
    tslib_1.__extends(AkitaImmutabilityError, _super);
    function AkitaImmutabilityError(storeName) {
        return _super.call(this, "The new state should be immutable. Make sure to return a new immutable state. \n store: \n " + storeName) || this;
    }
    return AkitaImmutabilityError;
}(AkitaError));
export { AkitaImmutabilityError };
var AkitaEntityNotExistsError = /** @class */ (function (_super) {
    tslib_1.__extends(AkitaEntityNotExistsError, _super);
    function AkitaEntityNotExistsError(id) {
        return _super.call(this, "Entity " + id + " does not exists") || this;
    }
    return AkitaEntityNotExistsError;
}(AkitaError));
export { AkitaEntityNotExistsError };
var AkitaNoActiveError = /** @class */ (function (_super) {
    tslib_1.__extends(AkitaNoActiveError, _super);
    function AkitaNoActiveError() {
        return _super.call(this, "Active is null/undefined") || this;
    }
    return AkitaNoActiveError;
}(AkitaError));
export { AkitaNoActiveError };
var AkitaInvalidEntityState = /** @class */ (function (_super) {
    tslib_1.__extends(AkitaInvalidEntityState, _super);
    function AkitaInvalidEntityState() {
        return _super.call(this, "Entity state is invalid") || this;
    }
    return AkitaInvalidEntityState;
}(AkitaError));
export { AkitaInvalidEntityState };
var AkitaUpdateIdKeyError = /** @class */ (function (_super) {
    tslib_1.__extends(AkitaUpdateIdKeyError, _super);
    function AkitaUpdateIdKeyError() {
        return _super.call(this, "Updating entity id is not permitted when updating many entities") || this;
    }
    return AkitaUpdateIdKeyError;
}(AkitaError));
export { AkitaUpdateIdKeyError };
/**
 * @param {?} id
 * @param {?} entities
 * @return {?}
 */
export function assertEntityExists(id, entities) {
    if (!entityExists(id, entities)) {
        throw new AkitaEntityNotExistsError(id);
    }
}
/**
 * @param {?} store
 * @return {?}
 */
export function assertActive(store) {
    if (!toBoolean(store.active)) {
        throw new AkitaNoActiveError();
    }
}
/**
 * @param {?} state
 * @return {?}
 */
export function assertEntityState(state) {
    /** @type {?} */
    var assertEntities = isObject(state);
    if (!assertEntities) {
        throw new AkitaInvalidEntityState();
    }
}
/**
 * @param {?} name
 * @param {?} className
 * @return {?}
 */
export function assertDecorator(name, className) {
    if (!name) {
        console.error("@StoreConfig({ name }) is missing in " + className);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEvIiwic291cmNlcyI6WyJzcmMvaW50ZXJuYWwvZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFHNUQsSUFBQTtJQUFnQyxzQ0FBSztJQUNuQyxvQkFBWSxPQUFlO2VBQ3pCLGtCQUFNLE9BQU8sQ0FBQztLQUNmO3FCQU5IO0VBR2dDLEtBQUssRUFJcEMsQ0FBQTtBQUpELHNCQUlDO0FBRUQsSUFBQTtJQUE0QyxrREFBVTtJQUNwRCxnQ0FBWSxTQUFTO2VBQ25CLGtCQUFNLGdHQUE4RixTQUFXLENBQUM7S0FDakg7aUNBWkg7RUFTNEMsVUFBVSxFQUlyRCxDQUFBO0FBSkQsa0NBSUM7QUFFRCxJQUFBO0lBQStDLHFEQUFVO0lBQ3ZELG1DQUFZLEVBQUU7ZUFDWixrQkFBTSxZQUFVLEVBQUUscUJBQWtCLENBQUM7S0FDdEM7b0NBbEJIO0VBZStDLFVBQVUsRUFJeEQsQ0FBQTtBQUpELHFDQUlDO0FBRUQsSUFBQTtJQUF3Qyw4Q0FBVTtJQUNoRDtlQUNFLGtCQUFNLDBCQUEwQixDQUFDO0tBQ2xDOzZCQXhCSDtFQXFCd0MsVUFBVSxFQUlqRCxDQUFBO0FBSkQsOEJBSUM7QUFFRCxJQUFBO0lBQTZDLG1EQUFVO0lBQ3JEO2VBQ0Usa0JBQU0seUJBQXlCLENBQUM7S0FDakM7a0NBOUJIO0VBMkI2QyxVQUFVLEVBSXRELENBQUE7QUFKRCxtQ0FJQztBQUVELElBQUE7SUFBMkMsaURBQVU7SUFDbkQ7ZUFDRSxrQkFBTSxpRUFBaUUsQ0FBQztLQUN6RTtnQ0FwQ0g7RUFpQzJDLFVBQVUsRUFJcEQsQ0FBQTtBQUpELGlDQUlDOzs7Ozs7QUFFRCxNQUFNLDZCQUE2QixFQUFNLEVBQUUsUUFBUTtJQUNqRCxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsRUFBRTtRQUMvQixNQUFNLElBQUkseUJBQXlCLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDekM7Q0FDRjs7Ozs7QUFFRCxNQUFNLHVCQUF1QixLQUFLO0lBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzVCLE1BQU0sSUFBSSxrQkFBa0IsRUFBRSxDQUFDO0tBQ2hDO0NBQ0Y7Ozs7O0FBRUQsTUFBTSw0QkFBNEIsS0FBdUI7O0lBQ3ZELElBQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUV2QyxJQUFJLENBQUMsY0FBYyxFQUFFO1FBQ25CLE1BQU0sSUFBSSx1QkFBdUIsRUFBRSxDQUFDO0tBQ3JDO0NBQ0Y7Ozs7OztBQUVELE1BQU0sMEJBQTBCLElBQVksRUFBRSxTQUFpQjtJQUM3RCxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1QsT0FBTyxDQUFDLEtBQUssQ0FBQywwQ0FBd0MsU0FBVyxDQUFDLENBQUM7S0FDcEU7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVudGl0eUV4aXN0cywgaXNPYmplY3QsIHRvQm9vbGVhbiB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgRW50aXR5U3RhdGUsIElEIH0gZnJvbSAnLi4vYXBpL3R5cGVzJztcblxuZXhwb3J0IGNsYXNzIEFraXRhRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBa2l0YUltbXV0YWJpbGl0eUVycm9yIGV4dGVuZHMgQWtpdGFFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHN0b3JlTmFtZSkge1xuICAgIHN1cGVyKGBUaGUgbmV3IHN0YXRlIHNob3VsZCBiZSBpbW11dGFibGUuIE1ha2Ugc3VyZSB0byByZXR1cm4gYSBuZXcgaW1tdXRhYmxlIHN0YXRlLiBcXG4gc3RvcmU6IFxcbiAke3N0b3JlTmFtZX1gKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQWtpdGFFbnRpdHlOb3RFeGlzdHNFcnJvciBleHRlbmRzIEFraXRhRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihpZCkge1xuICAgIHN1cGVyKGBFbnRpdHkgJHtpZH0gZG9lcyBub3QgZXhpc3RzYCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFraXRhTm9BY3RpdmVFcnJvciBleHRlbmRzIEFraXRhRXJyb3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihgQWN0aXZlIGlzIG51bGwvdW5kZWZpbmVkYCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFraXRhSW52YWxpZEVudGl0eVN0YXRlIGV4dGVuZHMgQWtpdGFFcnJvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKGBFbnRpdHkgc3RhdGUgaXMgaW52YWxpZGApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBa2l0YVVwZGF0ZUlkS2V5RXJyb3IgZXh0ZW5kcyBBa2l0YUVycm9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoYFVwZGF0aW5nIGVudGl0eSBpZCBpcyBub3QgcGVybWl0dGVkIHdoZW4gdXBkYXRpbmcgbWFueSBlbnRpdGllc2ApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRFbnRpdHlFeGlzdHMoaWQ6IElELCBlbnRpdGllcykge1xuICBpZiAoIWVudGl0eUV4aXN0cyhpZCwgZW50aXRpZXMpKSB7XG4gICAgdGhyb3cgbmV3IEFraXRhRW50aXR5Tm90RXhpc3RzRXJyb3IoaWQpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRBY3RpdmUoc3RvcmUpIHtcbiAgaWYgKCF0b0Jvb2xlYW4oc3RvcmUuYWN0aXZlKSkge1xuICAgIHRocm93IG5ldyBBa2l0YU5vQWN0aXZlRXJyb3IoKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RW50aXR5U3RhdGUoc3RhdGU6IEVudGl0eVN0YXRlPGFueT4pIHtcbiAgY29uc3QgYXNzZXJ0RW50aXRpZXMgPSBpc09iamVjdChzdGF0ZSk7XG5cbiAgaWYgKCFhc3NlcnRFbnRpdGllcykge1xuICAgIHRocm93IG5ldyBBa2l0YUludmFsaWRFbnRpdHlTdGF0ZSgpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnREZWNvcmF0b3IobmFtZTogc3RyaW5nLCBjbGFzc05hbWU6IHN0cmluZykge1xuICBpZiAoIW5hbWUpIHtcbiAgICBjb25zb2xlLmVycm9yKGBAU3RvcmVDb25maWcoeyBuYW1lIH0pIGlzIG1pc3NpbmcgaW4gJHtjbGFzc05hbWV9YCk7XG4gIH1cbn1cbiJdfQ==