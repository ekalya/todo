/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { AkitaUpdateIdKeyError, assertEntityExists, assertEntityState } from './error';
import { entityExists, isFunction, isPlainObject, resetActive } from './utils';
var CRUD = /** @class */ (function () {
    function CRUD() {
    }
    /**
     * @template S, E
     * @param {?} state
     * @param {?} entities
     * @param {?} entityClass
     * @param {?} idKey
     * @return {?}
     */
    CRUD.prototype._set = /**
     * @template S, E
     * @param {?} state
     * @param {?} entities
     * @param {?} entityClass
     * @param {?} idKey
     * @return {?}
     */
    function (state, entities, entityClass, idKey) {
        /** @type {?} */
        var ids;
        /** @type {?} */
        var normalized;
        if ((/** @type {?} */ (entities)).ids && (/** @type {?} */ (entities)).entities) {
            ids = (/** @type {?} */ (entities)).ids;
            normalized = (/** @type {?} */ (entities)).entities;
        }
        else {
            /** @type {?} */
            var isArray = Array.isArray(entities);
            normalized = entities;
            if (isArray) {
                normalized = /** @type {?} */ (this.keyBy(/** @type {?} */ (entities), entityClass, idKey));
            }
            else {
                assertEntityState(entities);
            }
            ids = isArray ? (/** @type {?} */ (entities)).map(function (entity) { return entity[idKey]; }) : Object.keys(/** @type {?} */ (normalized)).map(function (id) { return entities[id][idKey]; });
        }
        /** @type {?} */
        var newState = tslib_1.__assign({}, (/** @type {?} */ (state)), { entities: normalized, ids: ids, loading: false });
        if (resetActive(newState)) {
            newState.active = null;
        }
        return newState;
    };
    /**
     * @template T
     * @param {?} state
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    CRUD.prototype._replaceEntity = /**
     * @template T
     * @param {?} state
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    function (state, id, entity) {
        var _a;
        return tslib_1.__assign({}, (/** @type {?} */ (state)), { entities: tslib_1.__assign({}, state.entities, (_a = {}, _a[id] = entity, _a)) });
    };
    /**
     * @template S, E
     * @param {?} state
     * @param {?} entities
     * @param {?} idKey
     * @return {?}
     */
    CRUD.prototype._add = /**
     * @template S, E
     * @param {?} state
     * @param {?} entities
     * @param {?} idKey
     * @return {?}
     */
    function (state, entities, idKey) {
        /** @type {?} */
        var addedEntities = {};
        /** @type {?} */
        var addedIds = [];
        for (var i = 0; i < entities.length; i++) {
            /** @type {?} */
            var entity = entities[i];
            /** @type {?} */
            var entityId = entity[idKey];
            if (!entityExists(entityId, state.entities)) {
                addedEntities[entityId] = entity;
                addedIds.push(entityId);
            }
        }
        return tslib_1.__assign({}, (/** @type {?} */ (state)), { entities: tslib_1.__assign({}, state.entities, addedEntities), ids: tslib_1.__spread(state.ids, addedIds) });
    };
    /**
     * @template T
     * @param {?} state
     * @param {?} ids
     * @param {?} newStateOrFn
     * @param {?} idKey
     * @return {?}
     */
    CRUD.prototype._update = /**
     * @template T
     * @param {?} state
     * @param {?} ids
     * @param {?} newStateOrFn
     * @param {?} idKey
     * @return {?}
     */
    function (state, ids, newStateOrFn, idKey) {
        /** @type {?} */
        var updatedEntities = {};
        /** @type {?} */
        var isUpdatingIdKey = false;
        /** @type {?} */
        var idToUpdate;
        for (var i = 0; i < ids.length; i++) {
            /** @type {?} */
            var id = ids[i];
            idToUpdate = id;
            assertEntityExists(id, state.entities);
            /** @type {?} */
            var oldEntity = state.entities[id];
            /** @type {?} */
            var newState = isFunction(newStateOrFn) ? newStateOrFn(oldEntity) : newStateOrFn;
            if (newState.hasOwnProperty(idKey) && newState[idKey] !== oldEntity[idKey]) {
                if (ids.length > 1) {
                    throw new AkitaUpdateIdKeyError();
                }
                isUpdatingIdKey = true;
                idToUpdate = newState[idKey];
            }
            /** @type {?} */
            var newEntity = void 0;
            /** @type {?} */
            var merged = tslib_1.__assign({}, oldEntity, newState);
            if (isPlainObject(oldEntity)) {
                newEntity = merged;
            }
            else {
                newEntity = new oldEntity.constructor(merged);
            }
            updatedEntities[idToUpdate] = newEntity;
        }
        /** @type {?} */
        var updatedIds = state.ids;
        /** @type {?} */
        var stateEntities = state.entities;
        if (isUpdatingIdKey) {
            var _a = tslib_1.__read(ids, 1), id_1 = _a[0];
            var _b = state.entities, _c = id_1, deletedEntity = _b[_c], rest = tslib_1.__rest(_b, [typeof _c === "symbol" ? _c : _c + ""]);
            stateEntities = rest;
            updatedIds = state.ids.map(function (current) { return (current === id_1 ? idToUpdate : current); });
        }
        return tslib_1.__assign({}, (/** @type {?} */ (state)), { entities: tslib_1.__assign({}, stateEntities, updatedEntities), ids: updatedIds });
    };
    /**
     * @template T
     * @param {?} state
     * @param {?} ids
     * @return {?}
     */
    CRUD.prototype._remove = /**
     * @template T
     * @param {?} state
     * @param {?} ids
     * @return {?}
     */
    function (state, ids) {
        if (!ids)
            return this._removeAll(state);
        /** @type {?} */
        var removed = ids.reduce(function (acc, id) {
            var _a = id, entity = acc[_a], rest = tslib_1.__rest(acc, [typeof _a === "symbol" ? _a : _a + ""]);
            return rest;
        }, state.entities);
        /** @type {?} */
        var newState = tslib_1.__assign({}, (/** @type {?} */ (state)), { entities: removed, ids: state.ids.filter(function (current) { return ids.indexOf(current) === -1; }) });
        if (resetActive(newState)) {
            newState.active = null;
        }
        return newState;
    };
    /**
     * @template T
     * @param {?} state
     * @return {?}
     */
    CRUD.prototype._removeAll = /**
     * @template T
     * @param {?} state
     * @return {?}
     */
    function (state) {
        /** @type {?} */
        var newState = tslib_1.__assign({}, (/** @type {?} */ (state)), { entities: {}, ids: [], active: null });
        return newState;
    };
    /**
     * @param {?} entities
     * @param {?=} entityClass
     * @param {?=} id
     * @return {?}
     */
    CRUD.prototype.keyBy = /**
     * @param {?} entities
     * @param {?=} entityClass
     * @param {?=} id
     * @return {?}
     */
    function (entities, entityClass, id) {
        if (id === void 0) { id = 'id'; }
        /** @type {?} */
        var acc = {};
        for (var i = 0, len = entities.length; i < len; i++) {
            /** @type {?} */
            var entity = entities[i];
            acc[entity[id]] = entityClass ? new entityClass(entity) : entity;
        }
        return acc;
    };
    return CRUD;
}());
export { CRUD };
/** @type {?} */
export var _crud = new CRUD();

//# sourceMappingURL=data:application/json;base64,