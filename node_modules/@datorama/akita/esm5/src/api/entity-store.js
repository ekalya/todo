/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { _crud } from '../internal/crud';
import { AkitaImmutabilityError, assertActive } from '../internal/error';
import { __globalState } from '../internal/global-state';
import { coerceArray, entityExists, isFunction, toBoolean } from '../internal/utils';
import { isDev, Store } from './store';
// unsupported: template constraints.
/**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S, E
 */
var 
// unsupported: template constraints.
/**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S, E
 */
EntityStore = /** @class */ (function (_super) {
    tslib_1.__extends(EntityStore, _super);
    /**
     *
     * Initiate the store with the state
     */
    function EntityStore(initialState, options) {
        if (initialState === void 0) { initialState = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, tslib_1.__assign({}, getInitialEntitiesState(), initialState)) || this;
        _this.options = options;
        return _this;
    }
    Object.defineProperty(EntityStore.prototype, "entities", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value().entities;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityStore.prototype, "idKey", {
        get: /**
         * @return {?}
         */
        function () {
            /** *
             * backward compatibility
              @type {?} */
            var newIdKey = this.config && this.config.idKey;
            if (!newIdKey) {
                return this.options.idKey || 'id';
            }
            return newIdKey;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * Replace current collection with provided collection
     *
     * @example
     * this.store.set([Entity, Entity]);
     * this.store.set({1: Entity, 2: Entity});
     * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });
     *
     */
    /**
     *
     * Replace current collection with provided collection
     *
     * \@example
     * this.store.set([Entity, Entity]);
     * this.store.set({1: Entity, 2: Entity});
     * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });
     *
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    EntityStore.prototype.set = /**
     *
     * Replace current collection with provided collection
     *
     * \@example
     * this.store.set([Entity, Entity]);
     * this.store.set({1: Entity, 2: Entity});
     * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });
     *
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    function (entities, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        isDev() && __globalState.setAction({ type: 'Set Entities' });
        this.setState(function (state) { return _crud._set(state, entities, options.entityClass, _this.idKey); });
        this.setDirty();
    };
    /**
     * Create or replace an entity in the store.
     *
     * @example
     * this.store.createOrReplace(3, Entity);
     *
     */
    /**
     * Create or replace an entity in the store.
     *
     * \@example
     * this.store.createOrReplace(3, Entity);
     *
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    EntityStore.prototype.createOrReplace = /**
     * Create or replace an entity in the store.
     *
     * \@example
     * this.store.createOrReplace(3, Entity);
     *
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    function (id, entity) {
        if (!entityExists(id, this._value().entities)) {
            if (!entity[this.idKey]) {
                entity[this.idKey] = id;
            }
            return this.add(entity);
        }
        isDev() && __globalState.setAction({ type: 'Upsert Entity', entityId: [id] });
        this.setState(function (state) { return _crud._replaceEntity(state, id, entity); });
    };
    /**
     * Add an entity or entities to the store.
     *
     * @example
     * this.store.add([Entity, Entity]);
     * this.store.add(Entity);
     */
    /**
     * Add an entity or entities to the store.
     *
     * \@example
     * this.store.add([Entity, Entity]);
     * this.store.add(Entity);
     * @param {?} entities
     * @return {?}
     */
    EntityStore.prototype.add = /**
     * Add an entity or entities to the store.
     *
     * \@example
     * this.store.add([Entity, Entity]);
     * this.store.add(Entity);
     * @param {?} entities
     * @return {?}
     */
    function (entities) {
        var _this = this;
        /** @type {?} */
        var toArray = coerceArray(entities);
        if (toArray.length === 0)
            return;
        isDev() && __globalState.setAction({ type: 'Add Entity' });
        this.setState(function (state) { return _crud._add(state, toArray, _this.idKey); });
    };
    /**
     * @param {?} idsOrFn
     * @param {?=} newStateOrFn
     * @return {?}
     */
    EntityStore.prototype.update = /**
     * @param {?} idsOrFn
     * @param {?=} newStateOrFn
     * @return {?}
     */
    function (idsOrFn, newStateOrFn) {
        var _this = this;
        /** @type {?} */
        var ids = [];
        /** @type {?} */
        var storeIds = this._value().ids;
        if (isFunction(idsOrFn)) {
            for (var i = 0, len = storeIds.length; i < len; i++) {
                /** @type {?} */
                var id = storeIds[i];
                /** @type {?} */
                var entity = this._value().entities[id];
                if (entity && (/** @type {?} */ (idsOrFn))(entity)) {
                    ids.push(id);
                }
            }
        }
        else {
            ids = toBoolean(idsOrFn) ? coerceArray(idsOrFn) : storeIds;
        }
        if (ids.length === 0)
            return;
        isDev() && __globalState.setAction({ type: 'Update Entity', entityId: ids });
        this.setState(function (state) {
            return _crud._update(state, ids, newStateOrFn, _this.idKey);
        });
    };
    /**
     * An alias to update all.
     */
    /**
     * An alias to update all.
     * @param {?} state
     * @return {?}
     */
    EntityStore.prototype.updateAll = /**
     * An alias to update all.
     * @param {?} state
     * @return {?}
     */
    function (state) {
        if (this._value().ids.length === 0)
            return;
        this.update(null, state);
    };
    /**
     * Update the root state (data which is external to the entities).
     *
     * @example
     * this.store.updateRoot({
     *   metadata: 'new metadata
     * });
     *
     *  this.store.updateRoot(state => {
     *    return {
     *      metadata: {
     *        ...state.metadata,
     *        key: 'new value'
     *      }
     *    }
     *  });
     */
    /**
     * Update the root state (data which is external to the entities).
     *
     * \@example
     * this.store.updateRoot({
     *   metadata: 'new metadata
     * });
     *
     *  this.store.updateRoot(state => {
     *    return {
     *      metadata: {
     *        ...state.metadata,
     *        key: 'new value'
     *      }
     *    }
     *  });
     * @param {?} newStateFn
     * @param {?=} action
     * @return {?}
     */
    EntityStore.prototype.updateRoot = /**
     * Update the root state (data which is external to the entities).
     *
     * \@example
     * this.store.updateRoot({
     *   metadata: 'new metadata
     * });
     *
     *  this.store.updateRoot(state => {
     *    return {
     *      metadata: {
     *        ...state.metadata,
     *        key: 'new value'
     *      }
     *    }
     *  });
     * @param {?} newStateFn
     * @param {?=} action
     * @return {?}
     */
    function (newStateFn, action) {
        /** @type {?} */
        var newState = isFunction(newStateFn) ? newStateFn(this._value()) : newStateFn;
        if (newState === this._value()) {
            throw new AkitaImmutabilityError(this.storeName);
        }
        isDev() && __globalState.setAction(action || { type: 'Update Root' });
        this.setState(function (state) {
            return tslib_1.__assign({}, (/** @type {?} */ (state)), (/** @type {?} */ (newState)));
        });
    };
    /**
     * @param {?=} idsOrFn
     * @return {?}
     */
    EntityStore.prototype.remove = /**
     * @param {?=} idsOrFn
     * @return {?}
     */
    function (idsOrFn) {
        /** @type {?} */
        var storeIds = this._value().ids;
        if (storeIds.length === 0)
            return;
        /** @type {?} */
        var idPassed = toBoolean(idsOrFn);
        if (!idPassed)
            this.setPristine();
        /** @type {?} */
        var ids = [];
        if (isFunction(idsOrFn)) {
            for (var i = 0, len = storeIds.length; i < len; i++) {
                /** @type {?} */
                var id = storeIds[i];
                /** @type {?} */
                var entity = this._value().entities[id];
                if (entity && idsOrFn(entity)) {
                    ids.push(id);
                }
            }
        }
        else {
            ids = idPassed ? coerceArray(idsOrFn) : null;
        }
        if (ids && ids.length === 0)
            return;
        isDev() && __globalState.setAction({ type: 'Remove Entity', entityId: ids });
        this.setState(function (state) {
            return _crud._remove(state, ids);
        });
    };
    /**
     *
     * Update the active entity.
     *
     * @example
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     */
    /**
     *
     * Update the active entity.
     *
     * \@example
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     * @param {?} newStateFn
     * @return {?}
     */
    EntityStore.prototype.updateActive = /**
     *
     * Update the active entity.
     *
     * \@example
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     * @param {?} newStateFn
     * @return {?}
     */
    function (newStateFn) {
        var _this = this;
        assertActive(this._value());
        isDev() && __globalState.setAction({ type: 'Update Active Entity', entityId: this._value()["active"] });
        this.setState(function (state) {
            /** @type {?} */
            var activeId = state["active"];
            /** @type {?} */
            var newState = isFunction(newStateFn) ? newStateFn(state.entities[activeId]) : newStateFn;
            if (newState === state) {
                throw new AkitaImmutabilityError(_this.storeName);
            }
            return _crud._update(state, [activeId], newState, _this.idKey);
        });
    };
    /**
     * Set the given entity as active.
     */
    /**
     * Set the given entity as active.
     * @param {?} id
     * @return {?}
     */
    EntityStore.prototype.setActive = /**
     * Set the given entity as active.
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id === this._value()["active"])
            return;
        isDev() && __globalState.setAction({ type: 'Set Active Entity', entityId: id });
        this.setState(function (state) {
            return tslib_1.__assign({}, (/** @type {?} */ (state)), { active: id });
        });
    };
    return EntityStore;
}(Store));
// unsupported: template constraints.
/**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S, E
 */
export { EntityStore };
function EntityStore_tsickle_Closure_declarations() {
    /** @type {?} */
    EntityStore.prototype.options;
}
/** @type {?} */
export var getInitialEntitiesState = function () {
    return (/** @type {?} */ ({
        entities: {},
        ids: [],
        loading: true,
        error: null
    }));
};
/** @type {?} */
export var getInitialActiveState = function () {
    return (/** @type {?} */ ({
        active: null
    }));
};

//# sourceMappingURL=data:application/json;base64,