/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { __stores__ } from './store';
import { isString } from '../internal/utils';
var SnapshotManager = /** @class */ (function () {
    function SnapshotManager() {
    }
    /**
     * Get a snapshot of the whole state or a specific stores
     * Use it ONLY for things like saving the state in the server
     */
    /**
     * Get a snapshot of the whole state or a specific stores
     * Use it ONLY for things like saving the state in the server
     * @param {?=} stores
     * @return {?}
     */
    SnapshotManager.prototype.getStoresSnapshot = /**
     * Get a snapshot of the whole state or a specific stores
     * Use it ONLY for things like saving the state in the server
     * @param {?=} stores
     * @return {?}
     */
    function (stores) {
        if (stores === void 0) { stores = []; }
        /** @type {?} */
        var acc = {};
        /** @type {?} */
        var hasInclude = stores.length > 0;
        /** @type {?} */
        var keys = hasInclude ? stores : Object.keys(__stores__);
        for (var i = 0; i < keys.length; i++) {
            /** @type {?} */
            var storeName = keys[i];
            acc[storeName] = __stores__[storeName]._value();
        }
        return acc;
    };
    /**
     * Set snapshot we get from the server
     */
    /**
     * Set snapshot we get from the server
     * @param {?} stores
     * @return {?}
     */
    SnapshotManager.prototype.setStoresSnapshot = /**
     * Set snapshot we get from the server
     * @param {?} stores
     * @return {?}
     */
    function (stores) {
        /** @type {?} */
        var normalizedStores = stores;
        if (isString(stores)) {
            normalizedStores = JSON.parse(/** @type {?} */ (normalizedStores));
        }
        var _loop_1 = function (i, keys) {
            /** @type {?} */
            var storeName = keys[i];
            if (__stores__[storeName]) {
                __stores__[storeName].setState(function () { return normalizedStores[storeName]; });
            }
        };
        for (var i = 0, keys = Object.keys(normalizedStores); i < keys.length; i++) {
            _loop_1(i, keys);
        }
    };
    return SnapshotManager;
}());
export { SnapshotManager };
/** @type {?} */
export var snapshotManager = new SnapshotManager();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hcHNob3QtbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkYXRvcmFtYS9ha2l0YS8iLCJzb3VyY2VzIjpbInNyYy9hcGkvc25hcHNob3QtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNyQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFN0MsSUFBQTs7O0lBQ0U7OztPQUdHOzs7Ozs7O0lBQ0gsMkNBQWlCOzs7Ozs7SUFBakIsVUFBa0IsTUFBcUI7UUFBckIsdUJBQUEsRUFBQSxXQUFxQjs7UUFDckMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDOztRQUNiLElBQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDOztRQUNyQyxJQUFNLElBQUksR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMzRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTs7WUFDcEMsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDakQ7UUFFRCxPQUFPLEdBQUcsQ0FBQztLQUNaO0lBRUQ7O09BRUc7Ozs7OztJQUNILDJDQUFpQjs7Ozs7SUFBakIsVUFBa0IsTUFBNkM7O1FBQzdELElBQUksZ0JBQWdCLEdBQUcsTUFBTSxDQUFDO1FBQzlCLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3BCLGdCQUFnQixHQUFHLElBQUksQ0FBQyxLQUFLLG1CQUFDLGdCQUEwQixFQUFDLENBQUM7U0FDM0Q7Z0NBRVEsQ0FBQyxFQUFNLElBQUk7O1lBQ2xCLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQixJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDekIsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFNLE9BQUEsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQTNCLENBQTJCLENBQUMsQ0FBQzthQUNuRTs7UUFKSCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRTtvQkFBakUsQ0FBQyxFQUFNLElBQUk7U0FLbkI7S0FDRjswQkFuQ0g7SUFvQ0MsQ0FBQTtBQWpDRCwyQkFpQ0M7O0FBRUQsV0FBYSxlQUFlLEdBQUcsSUFBSSxlQUFlLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fc3RvcmVzX18gfSBmcm9tICcuL3N0b3JlJztcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi4vaW50ZXJuYWwvdXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgU25hcHNob3RNYW5hZ2VyIHtcbiAgLyoqXG4gICAqIEdldCBhIHNuYXBzaG90IG9mIHRoZSB3aG9sZSBzdGF0ZSBvciBhIHNwZWNpZmljIHN0b3Jlc1xuICAgKiBVc2UgaXQgT05MWSBmb3IgdGhpbmdzIGxpa2Ugc2F2aW5nIHRoZSBzdGF0ZSBpbiB0aGUgc2VydmVyXG4gICAqL1xuICBnZXRTdG9yZXNTbmFwc2hvdChzdG9yZXM6IHN0cmluZ1tdID0gW10pIHtcbiAgICBsZXQgYWNjID0ge307XG4gICAgY29uc3QgaGFzSW5jbHVkZSA9IHN0b3Jlcy5sZW5ndGggPiAwO1xuICAgIGNvbnN0IGtleXMgPSBoYXNJbmNsdWRlID8gc3RvcmVzIDogT2JqZWN0LmtleXMoX19zdG9yZXNfXyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgc3RvcmVOYW1lID0ga2V5c1tpXTtcbiAgICAgIGFjY1tzdG9yZU5hbWVdID0gX19zdG9yZXNfX1tzdG9yZU5hbWVdLl92YWx1ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHNuYXBzaG90IHdlIGdldCBmcm9tIHRoZSBzZXJ2ZXJcbiAgICovXG4gIHNldFN0b3Jlc1NuYXBzaG90KHN0b3JlczogeyBbc3RvcmVOYW1lOiBzdHJpbmddOiBhbnkgfSB8IHN0cmluZykge1xuICAgIGxldCBub3JtYWxpemVkU3RvcmVzID0gc3RvcmVzO1xuICAgIGlmIChpc1N0cmluZyhzdG9yZXMpKSB7XG4gICAgICBub3JtYWxpemVkU3RvcmVzID0gSlNPTi5wYXJzZShub3JtYWxpemVkU3RvcmVzIGFzIHN0cmluZyk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGtleXMgPSBPYmplY3Qua2V5cyhub3JtYWxpemVkU3RvcmVzKTsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHN0b3JlTmFtZSA9IGtleXNbaV07XG4gICAgICBpZiAoX19zdG9yZXNfX1tzdG9yZU5hbWVdKSB7XG4gICAgICAgIF9fc3RvcmVzX19bc3RvcmVOYW1lXS5zZXRTdGF0ZSgoKSA9PiBub3JtYWxpemVkU3RvcmVzW3N0b3JlTmFtZV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgc25hcHNob3RNYW5hZ2VyID0gbmV3IFNuYXBzaG90TWFuYWdlcigpO1xuIl19