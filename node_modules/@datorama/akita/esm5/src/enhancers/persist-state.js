/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { AkitaError } from '../internal/error';
import { __stores__, rootDispatcher } from '../api/store';
import { skip } from 'rxjs/operators';
import { getValue, setValue } from '../internal/utils';
import { __globalState } from '../internal/global-state';
/** @type {?} */
var notBs = typeof localStorage === 'undefined';
/**
 * @record
 */
export function PersistStateParams() { }
function PersistStateParams_tsickle_Closure_declarations() {
    /**
     * The storage key
     * @type {?}
     */
    PersistStateParams.prototype.key;
    /**
     * Storage strategy to use. This defaults to LocalStorage but you can pass SessionStorage or anything that implements the StorageEngine API.
     * @type {?}
     */
    PersistStateParams.prototype.storage;
    /**
     * Custom deserializer. Defaults to JSON.parse
     * @type {?}
     */
    PersistStateParams.prototype.deserialize;
    /**
     * Custom serializer, defaults to JSON.stringify
     * @type {?}
     */
    PersistStateParams.prototype.serialize;
    /**
     * By default the whole state is saved to storage, use this param to include only the stores you need.
     * Pay attention that you can't use both include and exclude
     * @type {?}
     */
    PersistStateParams.prototype.include;
    /**
     *  By default the whole state is saved to storage, use this param to exclude stores that you don't need.
     *  Pay attention that you can't use both include and exclude
     * @type {?}
     */
    PersistStateParams.prototype.exclude;
}
/**
 * @param {?=} params
 * @return {?}
 */
export function persistState(params) {
    if (notBs)
        return;
    /** @type {?} */
    var defaults = {
        key: 'AkitaStores',
        storage: localStorage,
        deserialize: JSON.parse,
        serialize: JSON.stringify,
        include: [],
        exclude: []
    };
    var _a = Object.assign({}, defaults, params), storage = _a.storage, deserialize = _a.deserialize, serialize = _a.serialize, include = _a.include, exclude = _a.exclude, key = _a.key;
    /** @type {?} */
    var hasInclude = include.length > 0;
    /** @type {?} */
    var hasExclude = exclude.length > 0;
    if (hasInclude && hasExclude) {
        throw new AkitaError("You can't use both include and exclude");
    }
    /** @type {?} */
    var storageState = deserialize(storage.getItem(key) || '{}');
    /** @type {?} */
    var stores = {};
    /** @type {?} */
    var acc = {};
    /**
     * @return {?}
     */
    function save() {
        storage.setItem(key, serialize(Object.assign({}, storageState, acc)));
    }
    /**
     * @param {?} storeName
     * @param {?} path
     * @return {?}
     */
    function subscribe(storeName, path) {
        stores[storeName] = __stores__[storeName]
            ._select(function (state) { return getValue(state, path); })
            .pipe(skip(1))
            .subscribe(function (data) {
            acc[storeName] = data;
            save();
        });
    }
    /**
     * @param {?} storeName
     * @param {?} store
     * @param {?} path
     * @return {?}
     */
    function setInitial(storeName, store, path) {
        if (storageState[storeName]) {
            __globalState.setAction({ type: '@PersistState' });
            store.setState(function (state) {
                return setValue(state, path, storageState[storeName]);
            });
            if (store.setDirty) {
                store.setDirty();
            }
        }
    }
    /** @type {?} */
    var subscription = rootDispatcher.subscribe(function (action) {
        if (action.type === 0 /* NEW_STORE */) {
            /** @type {?} */
            var currentStoreName_1 = action.payload["store"].storeName;
            if (hasExclude && exclude.indexOf(currentStoreName_1) > -1 === true) {
                return;
            }
            if (hasInclude) {
                /** @type {?} */
                var path = include.find(function (name) { return name.indexOf(currentStoreName_1) > -1; });
                if (!path) {
                    return;
                }
                else {
                    currentStoreName_1 = path.split('.')[0];
                    setInitial(currentStoreName_1, action.payload["store"], path);
                    subscribe(currentStoreName_1, path);
                }
            }
            else {
                setInitial(currentStoreName_1, action.payload["store"], currentStoreName_1);
                subscribe(currentStoreName_1, currentStoreName_1);
            }
        }
    });
    return {
        destroy: /**
         * @return {?}
         */
        function () {
            subscription.unsubscribe();
            for (var i = 0, keys = Object.keys(stores); i < keys.length; i++) {
                /** @type {?} */
                var storeName = keys[i];
                stores[storeName].unsubscribe();
            }
            stores = {};
        },
        clear: /**
         * @return {?}
         */
        function () {
            storage.clear();
        },
        clearStore: /**
         * @param {?} storeName
         * @return {?}
         */
        function (storeName) {
            /** @type {?} */
            var storageState = deserialize(storage.getItem(key) || '{}');
            if (storageState[storeName]) {
                delete storageState[storeName];
                storage.setItem(key, serialize(storageState));
            }
        }
    };
}

//# sourceMappingURL=data:application/json;base64,