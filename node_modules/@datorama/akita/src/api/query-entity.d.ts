import { Observable } from 'rxjs';
import { Order } from '../internal/sort';
import { EntityStore } from './entity-store';
import { Query } from './query';
import { SortBy, SortByOptions } from './query-config';
import { EntityState, HashMap, ID } from './types';
export interface SelectOptions<E> extends SortByOptions<E> {
    asObject?: boolean;
    filterBy?: ((entity: E) => boolean) | undefined;
    limitTo?: number;
}
/**
 *  An abstraction for querying the entities from the store
 */
export declare class QueryEntity<S extends EntityState, E> extends Query<S> {
    protected store: EntityStore<S, E>;
    private memoized;
    /** Use only for internal plugins like Pagination - don't use this property **/
    __store__: any;
    constructor(store: EntityStore<S, E>);
    /**
     * Select the entire store's entity collection.
     *
     * @example
     * this.store.selectAll();
     */
    selectAll(options: {
        asObject: true;
        filterBy?: SelectOptions<E>['filterBy'];
        limitTo?: number;
        sortBy?: undefined;
        sortByOrder?: undefined;
    }): Observable<HashMap<E>>;
    selectAll(options: {
        filterBy: SelectOptions<E>['filterBy'];
        limitTo?: number;
        sortBy?: SortBy<E>;
        sortByOrder?: Order;
    }): Observable<E[]>;
    selectAll(options: {
        asObject: true;
        limitTo?: number;
        sortBy?: undefined;
        sortByOrder?: undefined;
    }): Observable<HashMap<E>>;
    selectAll(options: {
        limitTo?: number;
        sortBy?: SortBy<E>;
        sortByOrder?: Order;
    }): Observable<E[]>;
    selectAll(options: {
        asObject: false;
        filterBy?: SelectOptions<E>['filterBy'];
        limitTo?: number;
        sortBy?: SortBy<E>;
        sortByOrder?: Order;
    }): Observable<E[]>;
    selectAll(): Observable<E[]>;
    /**
     * Get the entire store's entity collection.
     *
     * @example
     * this.store.getAll();
     */
    getAll(options: {
        asObject: true;
        filterBy?: SelectOptions<E>['filterBy'];
        limitTo?: number;
    }): HashMap<E>;
    getAll(options: {
        filterBy: SelectOptions<E>['filterBy'];
        limitTo?: number;
    }): E[];
    getAll(options: {
        asObject: true;
        limitTo?: number;
    }): HashMap<E>;
    getAll(options: {
        limitTo?: number;
    }): E[];
    getAll(options: {
        asObject: false;
        filterBy?: SelectOptions<E>['filterBy'];
        limitTo?: number;
    }): E[];
    getAll(): E[];
    /**
     * Select multiple entities from the store.
     *
     * @example
     * this.store.selectMany([1,2]);
     */
    selectMany(ids: ID[], options?: {
        filterUndefined?: boolean;
    }): Observable<E[]>;
    /**
     * Select an entity or a slice of an entity.
     *
     * @example
     * this.pagesStore.selectEntity(1)
     * this.pagesStore.selectEntity(1, entity => entity.config.date)
     *
     */
    selectEntity<R>(id: ID): Observable<E>;
    selectEntity<R>(id: ID, project: (entity: E) => R): Observable<R>;
    /**
     * Get an entity by id
     *
     * @example
     * this.store.getEntity(1);
     */
    getEntity(id: ID): E;
    /**
     * Select the active entity's id.
     */
    selectActiveId(): Observable<ID>;
    /**
     * Get the active id
     */
    getActiveId(): ID;
    /**
     * Select the active entity.
     */
    selectActive<R>(): Observable<E>;
    selectActive<R>(project: (entity: E) => R): Observable<R>;
    /**
     * Get the active entity.
     */
    getActive(): E;
    /**
     * Select the store's entity collection length.
     */
    selectCount(predicate?: (entity: E) => boolean): Observable<number>;
    /**
     * Get the store's entity collection length.
     */
    getCount(predicate?: (entity: E) => boolean): number;
    /**
     * Returns whether entity exists.
     */
    hasEntity(id: ID): boolean;
    hasEntity(project: (entity: E) => boolean): boolean;
    isEmpty(): boolean;
    private _byId;
    ngOnDestroy(): void;
}
