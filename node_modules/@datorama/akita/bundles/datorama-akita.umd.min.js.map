{"version":3,"sources":["null","ng://@datorama/akita/src/internal/utils.ts","ng://@datorama/akita/src/internal/error.ts","ng://@datorama/akita/src/internal/crud.ts","ng://@datorama/akita/src/internal/global-state.ts","ng://@datorama/akita/src/internal/transaction.internal.ts","ng://@datorama/akita/src/api/store-config.ts","ng://@datorama/akita/src/api/store.ts","ng://@datorama/akita/src/internal/deep-freeze.ts","ng://@datorama/akita/src/api/entity-store.ts","ng://@datorama/akita/src/internal/sort.ts","ng://@datorama/akita/src/api/memoize.ts","ng://@datorama/akita/src/api/query-config.ts","ng://@datorama/akita/src/api/query.ts","ng://@datorama/akita/src/api/query-entity.ts","ng://@datorama/akita/src/api/transaction.ts","ng://@datorama/akita/src/api/arrays.ts","ng://@datorama/akita/src/api/operators.ts","ng://@datorama/akita/src/internal/action.ts","ng://@datorama/akita/src/api/snapshot-manager.ts","ng://@datorama/akita/src/plugins/plugin.ts","ng://@datorama/akita/src/plugins/paginator/paginator-plugin.ts","ng://@datorama/akita/src/plugins/persist-form/persist-ng-form-plugin.ts","ng://@datorama/akita/src/enhancers/persist-state.ts","ng://@datorama/akita/src/plugins/entity-collection-plugin.ts","ng://@datorama/akita/src/plugins/state-history/state-history-plugin.ts","ng://@datorama/akita/src/plugins/state-history/entity-state-history-plugin.ts","ng://@datorama/akita/src/plugins/dirty-check/dirty-check-plugin.ts","ng://@datorama/akita/src/plugins/dirty-check/entity-dirty-check-plugin.ts","ng://@datorama/akita/src/api/worker.ts","ng://@datorama/akita/src/enhancers/devtools.ts","ng://@datorama/akita/src/api/store-utils.ts"],"names":["extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","__rest","e","indexOf","getOwnPropertySymbols","__metadata","metadataKey","metadataValue","Reflect","metadata","__read","o","m","Symbol","iterator","r","ar","next","done","push","value","error","__spread","concat","coerceArray","isArray","isObject","toString","isPlainObject","toBoolean","name","isFunction","isUndefined","entityExists","id","entities","isObservable","subscribe","isString","val","isNumber","isDefined","resetActive","state","isActiveState","active","setValue","obj","prop","split","lastIndex","slice","reduce","acc","part","index","getValue","join","AkitaError","_super","message","tslib_1.__extends","Error","AkitaImmutabilityError","storeName","AkitaEntityNotExistsError","AkitaNoActiveError","AkitaInvalidEntityState","AkitaUpdateIdKeyError","assertEntityExists","_crud","CRUD","_set","entityClass","idKey","ids","normalized","keyBy","assertEntityState","map","entity","keys","newState","loading","_replaceEntity","_a","_add","addedEntities","addedIds","entityId","_update","newStateOrFn","idToUpdate","updatedEntities","isUpdatingIdKey","oldEntity","newEntity","merged","updatedIds","stateEntities","id_1","_b","_c","current","_remove","_removeAll","removed","filter","len","AkitaGlobals","setAction","_action","customAction","currentAction","skipTransactionMsg","activeTransactions","currentT","setCustomAction","action","setSkipAction","skip","skipAction","__globalState","isTransactionInProcess","configKey","__DEV__","__stores__","rootDispatcher","ReplaySubject","nextState","initialState","type","payload","isDev","Store","setState","store","assertDecorator","className","console","setLoading","_value","tslib_1.__assign","setError","_select","project","store$","pipe","distinctUntilChanged","storeValue","defineProperty","config","_isPristine","newStateFn","_rootDispatcher","prevState","deepFreeze","freeze","getOwnPropertyNames","forEach","isFrozen","BehaviorSubject","handleTransaction","dispatch","update","newStateOrId","setDirty","setPristine","asObservable","watchTransaction","commit","batchTransaction","of","_this","inTransaction","ngOnDestroy","EntityStore","options","getInitialEntitiesState","newIdKey","set","createOrReplace","add","toArray","idsOrFn","storeIds","updateAll","updateRoot","remove","idPassed","updateActive","assertActive","activeId","setActive","ASC","DESC","compareValues","key","order","Order","a","varA","toUpperCase","varB","comparison","memoizeOne","fn","lastArgs","lastResult","changed","firstInit","args","_i","apply","queryConfigKey","Query","__store__","select","selectOnce","take","selectLoading","selectError","getSnapshot","isPristine","QueryEntity","selectAll","asObject","selectState$","selectEntities$","sortBy","sortByOrder","withLatestFrom","toMap","filterBy","memoized","getAll","undefined","limitTo","selectMany","filterUndefined","selectEntity","combineLatest","auditTime","hasEntity","getEntity","_byId","selectActiveId","getActiveId","selectActive","switchMap","getActive","selectCount","predicate","getCount","projectOrId","some","isEmpty","arr","_sortBy_1","sort","Math","min","get","count","length_1","applyTransaction","thisArg","startBatch","Subject","endBatch","complete","array","elementN","filterNil","source","applyAction","func","target","propertyKey","descriptor","originalMethod","SnapshotManager","getStoresSnapshot","stores","setStoresSnapshot","normalizedStores","JSON","parse","snapshotManager","AkitaPlugin","query","getQuery","getStore","isEntityBased","selectSource","getSource","updateStore","paginatorDefaults","pagesControls","range","startWith","cacheTimeout","PaginatorPlugin","Map","currentPage","perPage","total","lastPage","data","delay","page","clearCacheSubscription","_","clearCache","pagination","withControls","withRange","response","addPage","pages","initial","clearPage","delete","destroy","unsubscribe","setPage","isPageActive","hasPage","nextPage","prevPage","setLastPage","setFirstPage","has","getPage","req","selectPage","from","getFrom","isFirst","getTo","to","pageControls","generatePages","ceil","__decorate","decorators","desc","c","getOwnPropertyDescriptor","decorate","Paginator","PersistNgFormPlugin","factoryFnOrPath","params","debounceTime","formKey","emitEvent","isKeyBased","setForm","form","activate","reset","initialValue","patchValue","path","formValue","formChanges","valueChanges","notBs","localStorage","defaultActions","beforeRemove","plugin","EntityCollectionPlugin","entityIds","removeEntity","createEntity","getIds","resolvedIds","rebase","actions","beforeAdd","instantiatePlugin","afterAdd","_ids","selectIds","forEachId","cb","StateHistoryPlugin","_entityId","past","present","future","maxAge","history","subscription","pairwise","skipUpdate","undo","previous","newPast","redo","newFuture","jumpToPast","newPresent","jumpToFuture","clear","clearHistory","ignoreNext","EntityStateHistoryPlugin","hasPast","hasFuture","dirtyCheckDefaultParams","comparator","head","stringify","DirtyCheckPlugin","dirty","watchProperty","watchProp","includes","getHead","_getHead","__akitaKey","merge","currentState","compareTo","isChange","updateDirtiness","currentValue","updateFn","compareProp","setHead","isDirty","hasHead","_head","propKeys","propKey","EntityDirtyCheckPlugin","checkSomeDirty","isDirty$","isSomeDirty","entitiesIds","entitiesIds_1","__values","tslib_1.__values","entitiesIds_1_1","enableAkitaProdMode","transaction","pop","unshift","compareFunction","tslib_1.__spread","reverse","swap","firstIndex","secondIndex","results","firstItem","indexOrItem","updated","idx","splice","start","deleteCount","toggle","item","noop","Observable","observer","mapInWorker","factoryFn","worker","createWorker","blob","Blob","url","URL","createObjectURL","Worker","onmessage","terminate","onerror","err","serialized","serialize","object","factory","postMessage","StoreConfig","QueryConfig","persistState","defaults","storage","deserialize","include","exclude","hasInclude","hasExclude","storageState","getItem","currentStoreName_1","find","setInitial","clearStore","setItem","save","akitaDevtools","ngZoneOrOptions","__REDUX_DEVTOOLS_EXTENSION__","run","devTools","connect","appState","capitalize","string","charAt","msg","logTrace","group","trace","groupEnd","send","storeName_1","funcCall","replace","Function","warn","init","rootState_1","increment","maxValue","decrement","allowNegative","guid","random"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Observable } from 'rxjs';\nimport { ActiveState, EntityState, HashMap, ID } from '../api/types';\n\n/** Wraps the provided value in an array, unless the provided _value is an array. */\nexport function coerceArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n\n/** Check if a value is an object */\nexport function isObject(value: any) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n}\n\nexport function isPlainObject(value) {\n  return toBoolean(value) && value.constructor.name === 'Object';\n}\n\nexport function isFunction(value): value is Function {\n  return typeof value === 'function';\n}\n\nexport function toBoolean(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport function isUndefined(value) {\n  return typeof value === 'undefined';\n}\n\n/**\n * Check if entity exists\n */\nexport function entityExists<E>(id: ID, entities: HashMap<E>) {\n  return entities.hasOwnProperty(id);\n}\n\n/**\n * Observable that emits empty value and complete\n */\nexport function noop<T>(): Observable<T> {\n  return new Observable(observer => {\n    observer.next();\n    observer.complete();\n  });\n}\n\nexport function isObservable(value) {\n  return toBoolean(value) && isFunction(value.subscribe);\n}\n\nexport function isString(val: string | any): val is string {\n  return typeof val === 'string';\n}\n\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\n\nexport function isDefined(val) {\n  return val !== null && typeof val !== 'undefined';\n}\n\n/**\n * Check if the active entity exist\n */\nexport function resetActive<E>(state: EntityState<E>) {\n  return isActiveState(state) && entityExists((state as ActiveState).active, state.entities) === false;\n}\n\n/**\n * Check if the store supports active entity\n */\nexport function isActiveState<E>(state: EntityState<E>) {\n  return (state as ActiveState).hasOwnProperty('active');\n}\n\n/**\n * setValue(state, 'todos.ui', { filter: {}})\n */\nexport const setValue = (obj: any, prop: string, val: any) => {\n  const split = prop.split('.');\n\n  if (split.length === 1) return val;\n\n  obj = { ...obj };\n\n  const lastIndex = split.length - 2;\n  const removeStoreName = prop.split('.').slice(1);\n\n  removeStoreName.reduce((acc, part, index) => {\n    if (index === lastIndex) {\n      acc[part] = val;\n    } else {\n      acc[part] = { ...acc[part] };\n    }\n\n    return acc && acc[part];\n  }, obj);\n\n  return obj;\n};\n\n/**\n * getValue(state, 'todos.ui')\n */\nexport const getValue = (obj: any, prop: string) => {\n  /** return the whole state  */\n  if (prop.split('.').length === 1) {\n    return obj;\n  }\n  const removeStoreName = prop\n    .split('.')\n    .slice(1)\n    .join('.');\n  return removeStoreName.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\n};\n","import { entityExists, isObject, toBoolean } from './utils';\nimport { EntityState, ID } from '../api/types';\n\nexport class AkitaError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class AkitaImmutabilityError extends AkitaError {\n  constructor(storeName) {\n    super(`The new state should be immutable. Make sure to return a new immutable state. \\n store: \\n ${storeName}`);\n  }\n}\n\nexport class AkitaEntityNotExistsError extends AkitaError {\n  constructor(id) {\n    super(`Entity ${id} does not exists`);\n  }\n}\n\nexport class AkitaNoActiveError extends AkitaError {\n  constructor() {\n    super(`Active is null/undefined`);\n  }\n}\n\nexport class AkitaInvalidEntityState extends AkitaError {\n  constructor() {\n    super(`Entity state is invalid`);\n  }\n}\n\nexport class AkitaUpdateIdKeyError extends AkitaError {\n  constructor() {\n    super(`Updating entity id is not permitted when updating many entities`);\n  }\n}\n\nexport function assertEntityExists(id: ID, entities) {\n  if (!entityExists(id, entities)) {\n    throw new AkitaEntityNotExistsError(id);\n  }\n}\n\nexport function assertActive(store) {\n  if (!toBoolean(store.active)) {\n    throw new AkitaNoActiveError();\n  }\n}\n\nexport function assertEntityState(state: EntityState<any>) {\n  const assertEntities = isObject(state);\n\n  if (!assertEntities) {\n    throw new AkitaInvalidEntityState();\n  }\n}\n\nexport function assertDecorator(name: string, className: string) {\n  if (!name) {\n    console.error(`@StoreConfig({ name }) is missing in ${className}`);\n  }\n}\n","import { Entities, EntityState, HashMap, ID, Newable } from '../api/types';\nimport { AkitaUpdateIdKeyError, assertEntityExists, assertEntityState } from './error';\nimport { entityExists, isFunction, isPlainObject, resetActive } from './utils';\n\nexport class CRUD {\n  _set<S, E>(state: S, entities: E[] | HashMap<E> | Entities<E>, entityClass: Newable<E>, idKey): S {\n    let ids, normalized;\n\n    if ((entities as Entities<E>).ids && (entities as Entities<E>).entities) {\n      ids = (entities as Entities<E>).ids;\n      normalized = (entities as Entities<E>).entities;\n    } else {\n      const isArray = Array.isArray(entities);\n      normalized = entities;\n\n      if (isArray) {\n        normalized = this.keyBy(entities as E[], entityClass, idKey) as E[];\n      } else {\n        assertEntityState(entities);\n      }\n\n      ids = isArray ? (entities as E[]).map(entity => entity[idKey]) : Object.keys(normalized as HashMap<E>).map(id => entities[id][idKey]);\n    }\n\n    const newState = {\n      ...(state as any),\n      entities: normalized,\n      ids,\n      loading: false\n    };\n\n    if (resetActive(newState)) {\n      newState.active = null;\n    }\n\n    return newState;\n  }\n\n  _replaceEntity<T extends EntityState>(state: T, id: ID, entity): T {\n    return {\n      ...(state as any),\n      entities: {\n        ...state.entities,\n        [id]: entity\n      }\n    };\n  }\n\n  _add<S extends EntityState, E>(state: S, entities: E[], idKey): S {\n    let addedEntities = {};\n    let addedIds = [];\n\n    for (let i = 0; i < entities.length; i++) {\n      const entity = entities[i];\n      const entityId = entity[idKey];\n\n      if (!entityExists(entityId, state.entities)) {\n        addedEntities[entityId] = entity;\n        addedIds.push(entityId);\n      }\n    }\n\n    return {\n      ...(state as any),\n      entities: {\n        ...state.entities,\n        ...addedEntities\n      },\n      ids: [...state.ids, ...addedIds]\n    };\n  }\n\n  _update<T extends EntityState>(state: T, ids: ID[], newStateOrFn: object | ((e: Readonly<any>) => object), idKey: string): T {\n    const updatedEntities = {};\n\n    let isUpdatingIdKey = false;\n    let idToUpdate: ID;\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      idToUpdate = id;\n      assertEntityExists(id, state.entities);\n\n      const oldEntity = state.entities[id];\n      const newState = isFunction(newStateOrFn) ? newStateOrFn(oldEntity) : newStateOrFn;\n\n      if (newState.hasOwnProperty(idKey) && newState[idKey] !== oldEntity[idKey]) {\n        if (ids.length > 1) {\n          throw new AkitaUpdateIdKeyError();\n        }\n        isUpdatingIdKey = true;\n        idToUpdate = newState[idKey];\n      }\n\n      let newEntity;\n\n      const merged = {\n        ...oldEntity,\n        ...newState\n      };\n\n      if (isPlainObject(oldEntity)) {\n        newEntity = merged;\n      } else {\n        newEntity = new oldEntity.constructor(merged);\n      }\n\n      updatedEntities[idToUpdate] = newEntity;\n    }\n\n    let updatedIds = state.ids;\n    let stateEntities = state.entities;\n    if (isUpdatingIdKey) {\n      const [id] = ids;\n      const { [id]: deletedEntity, ...rest } = state.entities;\n      stateEntities = rest;\n      updatedIds = state.ids.map(current => (current === id ? idToUpdate : current));\n    }\n\n    return {\n      ...(state as any),\n      entities: {\n        ...stateEntities,\n        ...updatedEntities\n      },\n      ids: updatedIds\n    };\n  }\n\n  _remove<T extends EntityState>(state: T, ids: ID[] | null): T {\n    if (!ids) return this._removeAll(state);\n\n    const removed = ids.reduce((acc, id) => {\n      const { [id]: entity, ...rest } = acc;\n      return rest;\n    }, state.entities);\n    const newState = {\n      ...(state as any),\n      entities: removed,\n      ids: state.ids.filter(current => ids.indexOf(current) === -1)\n    };\n\n    if (resetActive(newState)) {\n      newState.active = null;\n    }\n\n    return newState;\n  }\n\n  private _removeAll<T extends EntityState>(state: T): T {\n    const newState = {\n      ...(state as any),\n      entities: {},\n      ids: [],\n      active: null\n    };\n\n    return newState;\n  }\n\n  private keyBy(entities: any[], entityClass?: Newable<any>, id = 'id') {\n    const acc = {};\n\n    for (let i = 0, len = entities.length; i < len; i++) {\n      const entity = entities[i];\n      acc[entity[id]] = entityClass ? new entityClass(entity) : entity;\n    }\n\n    return acc;\n  }\n}\n\nexport const _crud = new CRUD();\n","import { Subject } from 'rxjs';\nimport { ID } from '../api/types';\n\nexport type Action = {\n  type: string;\n  entityId?: ID[] | ID;\n  payload?: any;\n};\n\nexport class AkitaGlobals {\n  private customAction;\n  currentAction: Action;\n  skipAction = false;\n  skipTransactionMsg = false;\n  currentT = [];\n  activeTransactions = 0;\n  batchTransaction: Subject<boolean>;\n\n  setAction(_action: Action) {\n    if (this.customAction) {\n      this.currentAction = this.customAction;\n      this.customAction = null;\n      this.skipTransactionMsg = false;\n    } else {\n      if (this.activeTransactions === 0) {\n        this.currentAction = _action;\n      }\n    }\n\n    if (this.activeTransactions > 0) {\n      this.currentT.push(_action);\n    }\n  }\n\n  setCustomAction(action: Action, skipTransactionMsg = false) {\n    this.currentAction = this.customAction = action;\n    this.skipTransactionMsg = skipTransactionMsg;\n  }\n\n  setSkipAction(skip = true) {\n    this.skipAction = skip;\n  }\n}\n\nexport const __globalState = new AkitaGlobals();\n","import { __globalState } from './global-state';\nimport { Observable, Subject, of } from 'rxjs';\n\n/**\n * Start a new transaction batch\n */\nexport function startBatch() {\n  if (!isTransactionInProcess()) {\n    __globalState.batchTransaction = new Subject();\n  }\n  __globalState.activeTransactions++;\n}\n\n/**\n * End the transaction\n */\nexport function endBatch() {\n  if (--__globalState.activeTransactions === 0) {\n    __globalState.batchTransaction.next(true);\n    __globalState.batchTransaction.complete();\n  }\n}\n\n/**\n * Whether we're inside batch\n */\nexport function isTransactionInProcess() {\n  return __globalState.activeTransactions > 0;\n}\n\n/**\n */\nexport function commit(): Observable<boolean> {\n  return __globalState.batchTransaction ? __globalState.batchTransaction.asObservable() : of(true);\n}\n","export type StoreConfigOptions = {\n  name: string;\n  idKey?: string;\n};\n\nexport const configKey = 'akitaConfig';\n\nexport function StoreConfig(metadata: StoreConfigOptions) {\n  return function(constructor: Function) {\n    constructor[configKey] = { idKey: 'id' };\n\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      /* name is preserved read only key */\n      if (key === 'name') {\n        constructor[configKey]['storeName'] = metadata[key];\n      } else {\n        constructor[configKey][key] = metadata[key];\n      }\n    }\n  };\n}\n","import { HashMap, ID } from './types';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { AkitaImmutabilityError, assertDecorator } from '../internal/error';\nimport { commit, isTransactionInProcess } from '../internal/transaction.internal';\nimport { isFunction, isPlainObject } from '../internal/utils';\nimport { deepFreeze } from '../internal/deep-freeze';\nimport { configKey, StoreConfigOptions } from './store-config';\nimport { __globalState } from '../internal/global-state';\n\n/** Whether we are in dev mode */\nlet __DEV__ = true;\n\nexport const __stores__: { [storeName: string]: Store<any> } = {};\n\nexport const enum Actions {\n  NEW_STORE,\n  NEW_STATE\n}\n\nexport type Action = {\n  type: Actions;\n  payload: HashMap<any>;\n};\n\nexport const rootDispatcher = new ReplaySubject<Action>();\n\nfunction nextState(storeName, initialState = false) {\n  return {\n    type: Actions.NEW_STATE,\n    payload: {\n      name: storeName,\n      initialState\n    }\n  };\n}\n\n/**\n * Enable production mode to disable objectFreeze\n */\nexport function enableAkitaProdMode() {\n  __DEV__ = false;\n}\n\nexport function isDev() {\n  return __DEV__;\n}\n\n/**\n * The Root Store that every sub store needs to inherit and\n * invoke `super` with the initial state.\n */\nexport class Store<S> {\n  /** Manage the store with BehaviorSubject */\n  private store: BehaviorSubject<Readonly<S>>;\n\n  /** The current state value */\n  private storeValue: S;\n\n  /** Whether we are inside transaction **/\n  private inTransaction = false;\n\n  private _isPristine = true;\n\n  /**\n   *\n   * Initial the store with the state\n   */\n  constructor(initialState) {\n    __globalState.setAction({ type: '@@INIT' });\n    __stores__[this.storeName] = this;\n    this.setState(() => initialState);\n    rootDispatcher.next({\n      type: Actions.NEW_STORE,\n      payload: { store: this }\n    });\n    isDev() && assertDecorator(this.storeName, this.constructor.name);\n  }\n\n  setLoading(loading = false) {\n    if (loading !== (this._value() as S & { loading: boolean }).loading) {\n      isDev() && __globalState.setAction({ type: 'Set Loading' });\n      this.setState(s => ({ ...(s as object), loading } as any));\n    }\n  }\n\n  /**\n   * Update the store's error state.\n   */\n  setError<T>(error: T) {\n    if (error !== (this._value() as S & { error: any }).error) {\n      isDev() && __globalState.setAction({ type: 'Set Error' });\n      this.setState(s => ({ ...(s as object), error } as any));\n    }\n  }\n\n  /**\n   * Select a slice from the store\n   *\n   * @example\n   * this.store.select(state => state.entities)\n   *\n   */\n  _select<R>(project: (store: S) => R): Observable<R> {\n    return this.store$.pipe(\n      map(project),\n      distinctUntilChanged()\n    );\n  }\n\n  _value(): S {\n    return this.storeValue;\n  }\n\n  get config(): StoreConfigOptions {\n    return this.constructor[configKey];\n  }\n\n  /**\n   * Get the store name\n   */\n  get storeName() {\n    return this.config && this.config['storeName'];\n  }\n\n  get isPristine() {\n    return this._isPristine;\n  }\n\n  /**\n   * `setState()` is the only way to update a store; It receives a callback function,\n   * which gets the current state, and returns a new immutable state,\n   * which will be the new value of the store.\n   */\n  setState(newStateFn: (state: Readonly<S>) => S, _rootDispatcher = true) {\n    const prevState = this._value();\n    this.storeValue = __DEV__ ? deepFreeze(newStateFn(this._value())) : newStateFn(this._value());\n\n    if (prevState === this.storeValue) {\n      throw new AkitaImmutabilityError(this.storeName);\n    }\n\n    if (!this.store) {\n      this.store = new BehaviorSubject(this.storeValue);\n      rootDispatcher.next(nextState(this.storeName, true));\n      return;\n    }\n\n    if (isTransactionInProcess()) {\n      this.handleTransaction();\n      return;\n    }\n\n    this.dispatch(this.storeValue, _rootDispatcher);\n  }\n\n  /**\n   * This method is a shortcut for `setState()`.\n   * It can be useful when you want to pass the whole state object instead of merging a partial state.\n   *\n   * @example\n   * this.store.update(newState)\n   */\n  update(newState: Partial<S>);\n  update(newState: (state: Readonly<S>) => Partial<S>);\n  update(id: ID | ID[] | null, newState: Partial<S>);\n  update(newStateOrId: Partial<S> | ID | ID[] | null | ((state: Readonly<S>) => Partial<S>), newState?: Partial<S>) {\n    __globalState.setAction({ type: 'Update Store' });\n    this.setState(state => {\n      let value = isFunction(newStateOrId) ? newStateOrId(state) : newStateOrId;\n      let merged = Object.assign({}, state, value);\n      return isPlainObject(state) ? merged : new (state as any).constructor(merged);\n    });\n    this.setDirty();\n  }\n\n  /**\n   * Sets the store to a pristine state.\n   */\n  setPristine() {\n    this._isPristine = true;\n  }\n\n  /**\n   * Sets the store to a dirty state, indicating that it is not pristine.\n   */\n  setDirty() {\n    this._isPristine = false;\n  }\n\n  private dispatch(state: S, _rootDispatcher = true) {\n    this.store.next(state);\n    if (_rootDispatcher) {\n      rootDispatcher.next(nextState(this.storeName));\n      isDev() && __globalState.setAction({ type: 'Set State' });\n    }\n  }\n\n  private get store$() {\n    return this.store.asObservable();\n  }\n\n  /**\n   * When the transaction ends dispatch the final value once\n   */\n  private watchTransaction() {\n    commit().subscribe(() => {\n      this.inTransaction = false;\n      if (isDev() && !__globalState.skipTransactionMsg) {\n        __globalState.setAction({ type: '@Transaction' });\n      }\n      this.dispatch(this._value());\n      __globalState.currentT = [];\n      __globalState.skipTransactionMsg = false;\n    });\n  }\n\n  /**\n   * Listen to the transaction stream\n   */\n  private handleTransaction() {\n    if (!this.inTransaction) {\n      this.watchTransaction();\n      this.inTransaction = true;\n    }\n  }\n\n  private ngOnDestroy() {\n    if (this === __stores__[this.storeName]) {\n      delete __stores__[this.storeName];\n    }\n  }\n}\n","export function deepFreeze(o) {\n  Object.freeze(o);\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (o.hasOwnProperty(prop) && o[prop] !== null && (typeof o[prop] === 'object' || typeof o[prop] === 'function') && !Object.isFrozen(o[prop])) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n}\n","import { _crud } from '../internal/crud';\nimport { AkitaImmutabilityError, assertActive } from '../internal/error';\nimport { Action, __globalState } from '../internal/global-state';\nimport { coerceArray, entityExists, isFunction, toBoolean } from '../internal/utils';\nimport { isDev, Store } from './store';\nimport { ActiveState, Entities, EntityState, HashMap, ID, Newable } from './types';\n\n/**\n * The Root Store that every sub store needs to inherit and\n * invoke `super` with the initial state.\n */\nexport class EntityStore<S extends EntityState<E>, E> extends Store<S> {\n  /**\n   *\n   * Initiate the store with the state\n   */\n  constructor(initialState = {}, private options: { idKey?: string } = {}) {\n    super({ ...getInitialEntitiesState(), ...initialState });\n  }\n\n  get entities() {\n    return this._value().entities;\n  }\n\n  get idKey() {\n    /** backward compatibility */\n    const newIdKey = this.config && this.config.idKey;\n    if (!newIdKey) {\n      return this.options.idKey || 'id';\n    }\n    return newIdKey;\n  }\n\n  /**\n   *\n   * Replace current collection with provided collection\n   *\n   * @example\n   * this.store.set([Entity, Entity]);\n   * this.store.set({1: Entity, 2: Entity});\n   * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });\n   *\n   */\n  set(entities: E[] | HashMap<E> | Entities<E>, options: { entityClass?: Newable<E> } = {}) {\n    isDev() && __globalState.setAction({ type: 'Set Entities' });\n    this.setState(state => _crud._set(state, entities, options.entityClass, this.idKey));\n    this.setDirty();\n  }\n\n  /**\n   * Create or replace an entity in the store.\n   *\n   * @example\n   * this.store.createOrReplace(3, Entity);\n   *\n   */\n  createOrReplace(id: ID, entity: E) {\n    if (!entityExists(id, this._value().entities)) {\n      if (!entity[this.idKey]) {\n        entity[this.idKey] = id;\n      }\n      return this.add(entity);\n    }\n    isDev() && __globalState.setAction({ type: 'Upsert Entity', entityId: [id] });\n    this.setState(state => _crud._replaceEntity(state, id, entity));\n  }\n\n  /**\n   * Add an entity or entities to the store.\n   *\n   * @example\n   * this.store.add([Entity, Entity]);\n   * this.store.add(Entity);\n   */\n  add(entities: E[] | E) {\n    const toArray = coerceArray(entities);\n    if (toArray.length === 0) return;\n    isDev() && __globalState.setAction({ type: 'Add Entity' });\n    this.setState(state => _crud._add<S, E>(state, toArray, this.idKey));\n  }\n\n  /**\n   *\n   * Update an entity or entities in the store.\n   *\n   * @example\n   * this.store.update(3, {\n   *   name: 'New Name'\n   * });\n   *\n   *  this.store.update(3, entity => {\n   *    return {\n   *      config: {\n   *        ...entity.filter,\n   *        date\n   *      }\n   *    }\n   *  });\n   *\n   * this.store.update([1,2,3], {\n   *   name: 'New Name'\n   * });\n   *\n   * this.store.update(e => e.name === 'value', {\n   *   name: 'New Name'\n   * });\n   *\n   * this.store.update(null, {\n   *   name: 'New Name'\n   * });\n   *\n   */\n  update(id: ID | ID[] | null, newStateFn: ((entity: Readonly<E>) => Partial<E>));\n  update(id: ID | ID[] | null, newState: Partial<E>);\n  update(id: ID | ID[] | null, newState: Partial<S>);\n  update(newState: (state: Readonly<S>) => Partial<S>);\n  update(predicate: ((entity: Readonly<E>) => boolean), newStateFn: ((entity: Readonly<E>) => Partial<E>));\n  update(predicate: ((entity: Readonly<E>) => boolean), newState: Partial<E>);\n  update(predicate: ((entity: Readonly<E>) => boolean), newState: Partial<S>);\n  update(newState: Partial<S>);\n  update(\n    idsOrFn: ID | ID[] | null | Partial<S> | ((state: Readonly<S>) => Partial<S>) | ((entity: Readonly<E>) => boolean),\n    newStateOrFn?: ((entity: Readonly<E>) => Partial<E>) | Partial<E> | Partial<S>\n  ) {\n    let ids: ID[] = [];\n    const storeIds = this._value().ids;\n\n    if (isFunction(idsOrFn)) {\n      for (let i = 0, len = storeIds.length; i < len; i++) {\n        const id = storeIds[i];\n        const entity = this._value().entities[id];\n        if (entity && (idsOrFn as Function)(entity)) {\n          ids.push(id);\n        }\n      }\n    } else {\n      ids = toBoolean(idsOrFn) ? coerceArray(idsOrFn) : storeIds;\n    }\n\n    if (ids.length === 0) return;\n    isDev() && __globalState.setAction({ type: 'Update Entity', entityId: ids });\n\n    this.setState(state => {\n      return _crud._update(state, ids, newStateOrFn, this.idKey);\n    });\n  }\n\n  /**\n   * An alias to update all.\n   */\n  updateAll(state: Partial<E>) {\n    if (this._value().ids.length === 0) return;\n    this.update(null, state);\n  }\n\n  /**\n   * Update the root state (data which is external to the entities).\n   *\n   * @example\n   * this.store.updateRoot({\n   *   metadata: 'new metadata\n   * });\n   *\n   *  this.store.updateRoot(state => {\n   *    return {\n   *      metadata: {\n   *        ...state.metadata,\n   *        key: 'new value'\n   *      }\n   *    }\n   *  });\n   */\n  updateRoot(newStateFn: ((state: Readonly<S>) => Partial<S>) | Partial<S>, action?: Action) {\n    const newState = isFunction(newStateFn) ? newStateFn(this._value()) : newStateFn;\n\n    if (newState === this._value()) {\n      throw new AkitaImmutabilityError(this.storeName);\n    }\n\n    isDev() && __globalState.setAction(action || { type: 'Update Root' });\n\n    this.setState(state => {\n      return {\n        ...(state as any),\n        ...(newState as any)\n      };\n    });\n  }\n\n  /**\n   *\n   * Remove one or more entities from the store:\n   *\n   * @example\n   * this.store.remove(5);\n   * this.store.remove([1,2,3]);\n   * this.store.remove(entity => entity.id === 1);\n   * this.store.remove();\n   */\n  remove(id?: ID | ID[]);\n  remove(predicate: (entity: Readonly<E>) => boolean);\n  remove(idsOrFn?: ID | ID[] | ((entity: Readonly<E>) => boolean)) {\n    const storeIds = this._value().ids;\n\n    if (storeIds.length === 0) return;\n    const idPassed = toBoolean(idsOrFn);\n    if (!idPassed) this.setPristine();\n\n    let ids: ID[] = [];\n    if (isFunction(idsOrFn)) {\n      for (let i = 0, len = storeIds.length; i < len; i++) {\n        const id = storeIds[i];\n        const entity = this._value().entities[id];\n        if (entity && idsOrFn(entity)) {\n          ids.push(id);\n        }\n      }\n    } else {\n      ids = idPassed ? coerceArray(idsOrFn) : null;\n    }\n\n    if (ids && ids.length === 0) return;\n    isDev() && __globalState.setAction({ type: 'Remove Entity', entityId: ids });\n\n    this.setState(state => {\n      return _crud._remove(state, ids);\n    });\n  }\n\n  /**\n   *\n   * Update the active entity.\n   *\n   * @example\n   * this.store.updateActive(active => {\n   *   return {\n   *     config: {\n   *      ..active.config,\n   *      date\n   *     }\n   *   }\n   * })\n   */\n  updateActive(newStateFn: ((entity: Readonly<E>) => Partial<E>) | Partial<E>) {\n    assertActive(this._value());\n    isDev() && __globalState.setAction({ type: 'Update Active Entity', entityId: this._value().active });\n    this.setState(state => {\n      const activeId = state.active;\n      const newState = isFunction(newStateFn) ? newStateFn(state.entities[activeId]) : newStateFn;\n      if (newState === state) {\n        throw new AkitaImmutabilityError(this.storeName);\n      }\n      return _crud._update(state, [activeId], newState, this.idKey);\n    });\n  }\n\n  /**\n   * Set the given entity as active.\n   */\n  setActive(id: ID) {\n    if (id === this._value().active) return;\n    isDev() && __globalState.setAction({ type: 'Set Active Entity', entityId: id });\n    this.setState(state => {\n      return {\n        ...(state as any),\n        active: id\n      };\n    });\n  }\n}\n\nexport const getInitialEntitiesState = () =>\n  ({\n    entities: {},\n    ids: [],\n    loading: true,\n    error: null\n  } as EntityState);\n\nexport const getInitialActiveState = () =>\n  ({\n    active: null\n  } as ActiveState);\n","export enum Order {\n  ASC = 'asc',\n  DESC = 'desc'\n}\n\nexport function compareValues(key, order: Order = Order.ASC) {\n  return function(a, b) {\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n      return 0;\n    }\n\n    const varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n    const varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n\n    let comparison = 0;\n    if (varA > varB) {\n      comparison = 1;\n    } else if (varA < varB) {\n      comparison = -1;\n    }\n    return order == Order.DESC ? comparison * -1 : comparison;\n  };\n}\n","export function memoizeOne(fn: Function) {\n  let lastArgs;\n  let changed = false;\n  let firstInit = true;\n  let lastResult;\n\n  return function(...args) {\n    if (lastArgs) {\n      /** If entities nor ids doesn't change return the last value */\n      changed = lastArgs[1] !== args[1] || lastArgs[0] !== args[0];\n    }\n\n    if (firstInit || (changed && !firstInit)) {\n      lastResult = fn.apply(this, args);\n    }\n\n    firstInit = false;\n    lastArgs = args;\n    return lastResult;\n  };\n}\n","import { Order } from '../internal/sort';\n\nexport type SortBy<E, S = any> = ((a: E, b: E, state?: S) => number) | keyof E;\n\nexport interface SortByOptions<E> {\n  sortBy?: SortBy<E>;\n  sortByOrder?: Order;\n}\n\nexport interface QueryConfigOptions<E = any> extends SortByOptions<E> {}\n\nexport const queryConfigKey = 'akitaQueryConfig';\n\nexport function QueryConfig<E>(metadata: QueryConfigOptions<E>) {\n  return function(constructor: Function) {\n    constructor[queryConfigKey] = {};\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      constructor[queryConfigKey][key] = metadata[key];\n    }\n  };\n}\n","import { Store } from './store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { queryConfigKey, QueryConfigOptions } from './query-config';\n\nexport class Query<S> {\n  /** Use only for internal plugins like Pagination - don't use this property **/\n  __store__: Store<S>;\n\n  constructor(protected store: Store<S>) {\n    this.__store__ = store;\n  }\n\n  /**\n   * Select a slice from the store.\n   *\n   * @example\n   * this.query.select()\n   * this.query.select(state => state.entities)\n   */\n  select<R>(project?: (store: S) => R): Observable<R>;\n  select(): Observable<S>;\n  select<R>(project?: (store: S) => R): Observable<R | S> {\n    let state = project ? project : state => state;\n    return this.store._select(state);\n  }\n\n  /**\n   * Select once and complete.\n   */\n  selectOnce<R>(project: (store: S) => R): Observable<R> {\n    return this.select(project).pipe(take(1));\n  }\n\n  /**\n   * Select the store's loading state.\n   */\n  selectLoading() {\n    return this.select(state => (state as S & { loading: boolean }).loading);\n  }\n\n  /**\n   * Select the store's error state.\n   */\n  selectError() {\n    return this.select(state => (state as S & { error: any }).error);\n  }\n\n  /**\n   * Get the raw value of the store.\n   */\n  getSnapshot(): S {\n    return this.store._value();\n  }\n\n  /**\n   *  Returns whether the state of the store is pristine (the set() method hasn't been explicitly called\n   *  since the store creation, or the last time setPristine()was called).\n   */\n  get isPristine() {\n    return this.store.isPristine;\n  }\n\n  /**\n   * Returns whether the state of the store is dirty (the set() method\n   * or the setDirty() method has been explicitly called since the store creation,\n   * or the last time setPristine() was called).\n   */\n  get isDirty() {\n    return !this.store.isPristine;\n  }\n\n  get config(): QueryConfigOptions {\n    return this.constructor[queryConfigKey];\n  }\n}\n","import { combineLatest, Observable } from 'rxjs';\nimport { auditTime, map, switchMap, withLatestFrom } from 'rxjs/operators';\n\nimport { compareValues, Order } from '../internal/sort';\nimport { entityExists, isFunction, isUndefined, toBoolean } from '../internal/utils';\nimport { EntityStore } from './entity-store';\nimport { memoizeOne } from './memoize';\nimport { Query } from './query';\nimport { SortBy, SortByOptions } from './query-config';\nimport { ActiveState, EntityState, HashMap, ID } from './types';\n\nexport interface SelectOptions<E> extends SortByOptions<E> {\n  asObject?: boolean;\n  filterBy?: ((entity: E) => boolean) | undefined;\n  limitTo?: number;\n}\n\n/**\n *  An abstraction for querying the entities from the store\n */\nexport class QueryEntity<S extends EntityState, E> extends Query<S> {\n  protected store: EntityStore<S, E>;\n  private memoized;\n\n  /** Use only for internal plugins like Pagination - don't use this property **/\n  __store__;\n\n  constructor(store: EntityStore<S, E>) {\n    super(store);\n    this.__store__ = store;\n  }\n\n  /**\n   * Select the entire store's entity collection.\n   *\n   * @example\n   * this.store.selectAll();\n   */\n  selectAll(options: { asObject: true; filterBy?: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: undefined; sortByOrder?: undefined }): Observable<HashMap<E>>;\n  selectAll(options: { filterBy: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): Observable<E[]>;\n  selectAll(options: { asObject: true; limitTo?: number; sortBy?: undefined; sortByOrder?: undefined }): Observable<HashMap<E>>;\n  selectAll(options: { limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): Observable<E[]>;\n  selectAll(options: { asObject: false; filterBy?: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): Observable<E[]>;\n  selectAll(): Observable<E[]>;\n  selectAll(\n    options: SelectOptions<E> = {\n      asObject: false\n    }\n  ): Observable<E[] | HashMap<E>> {\n    const selectState$ = this.select(state => state);\n    const selectEntities$ = this.select(state => state.entities);\n\n    options.sortBy = options.sortBy || (this.config && (this.config.sortBy as SortBy<E>));\n    options.sortByOrder = options.sortByOrder || (this.config && this.config.sortByOrder);\n\n    return selectEntities$.pipe(\n      withLatestFrom(selectState$, (entities: HashMap<E>, state: S) => {\n        const { ids } = state;\n        if (options.asObject) {\n          return toMap(ids, entities, options);\n        } else {\n          if (!options.filterBy && !options.sortBy) {\n            if (!this.memoized) {\n              this.memoized = memoizeOne(toArray);\n            }\n            return this.memoized(state, options);\n          }\n\n          return toArray(state, options);\n        }\n      })\n    );\n  }\n\n  /**\n   * Get the entire store's entity collection.\n   *\n   * @example\n   * this.store.getAll();\n   */\n  getAll(options: { asObject: true; filterBy?: SelectOptions<E>['filterBy']; limitTo?: number }): HashMap<E>;\n  getAll(options: { filterBy: SelectOptions<E>['filterBy']; limitTo?: number }): E[];\n  getAll(options: { asObject: true; limitTo?: number }): HashMap<E>;\n  getAll(options: { limitTo?: number }): E[];\n  getAll(options: { asObject: false; filterBy?: SelectOptions<E>['filterBy']; limitTo?: number }): E[];\n  getAll(): E[];\n  getAll(options: SelectOptions<E> = { asObject: false, filterBy: undefined, limitTo: undefined }): E[] | HashMap<E> {\n    const state = this.getSnapshot();\n\n    if (options.asObject) {\n      return toMap(state.ids, state.entities, options, true);\n    }\n\n    return toArray(state, options);\n  }\n\n  /**\n   * Select multiple entities from the store.\n   *\n   * @example\n   * this.store.selectMany([1,2]);\n   */\n  selectMany(ids: ID[], options: { filterUndefined?: boolean } = {}): Observable<E[]> {\n    const filterUndefined = isUndefined(options.filterUndefined) ? true : options.filterUndefined;\n    const entities = ids.map(id => this.selectEntity(id));\n\n    return combineLatest(entities).pipe(\n      map(entities => {\n        return filterUndefined ? entities.filter(val => !isUndefined(val)) : entities;\n      }),\n      auditTime(0)\n    );\n  }\n\n  /**\n   * Select an entity or a slice of an entity.\n   *\n   * @example\n   * this.pagesStore.selectEntity(1)\n   * this.pagesStore.selectEntity(1, entity => entity.config.date)\n   *\n   */\n  selectEntity<R>(id: ID): Observable<E>;\n  selectEntity<R>(id: ID, project: (entity: E) => R): Observable<R>;\n  selectEntity<R>(id: ID, project?: (entity: E) => R): Observable<R | E> {\n    if (!project) {\n      return this._byId(id);\n    }\n\n    return this.select(state => {\n      if (this.hasEntity(id)) {\n        return project(this.getEntity(id));\n      }\n\n      return undefined;\n    });\n  }\n\n  /**\n   * Get an entity by id\n   *\n   * @example\n   * this.store.getEntity(1);\n   */\n  getEntity(id: ID): E {\n    return this.getSnapshot().entities[id];\n  }\n\n  /**\n   * Select the active entity's id.\n   */\n  selectActiveId(): Observable<ID> {\n    return this.select(state => (state as S & ActiveState).active);\n  }\n\n  /**\n   * Get the active id\n   */\n  getActiveId(): ID {\n    return (this.getSnapshot() as S & ActiveState).active;\n  }\n\n  /**\n   * Select the active entity.\n   */\n  selectActive<R>(): Observable<E>;\n  selectActive<R>(project: (entity: E) => R): Observable<R>;\n  selectActive<R>(project?: (entity: E) => R): Observable<R | E> {\n    return this.selectActiveId().pipe(switchMap(activeId => this.selectEntity(activeId, project)));\n  }\n\n  /**\n   * Get the active entity.\n   */\n  getActive(): E {\n    const activeId: ID = this.getActiveId();\n    return toBoolean(activeId) ? this.getEntity(activeId) : undefined;\n  }\n\n  /**\n   * Select the store's entity collection length.\n   */\n  selectCount(predicate?: (entity: E) => boolean): Observable<number> {\n    if (isFunction(predicate)) {\n      return this.selectAll({\n        filterBy: predicate\n      }).pipe(map(entities => entities.length));\n    }\n\n    return this.select(store => store.ids.length);\n  }\n\n  /**\n   * Get the store's entity collection length.\n   */\n  getCount(predicate?: (entity: E) => boolean): number {\n    if (isFunction(predicate)) {\n      return this.getAll().filter(predicate).length;\n    }\n    return this.getSnapshot().ids.length;\n  }\n\n  /**\n   * Returns whether entity exists.\n   */\n  hasEntity(id: ID): boolean;\n  hasEntity(project: (entity: E) => boolean): boolean;\n  hasEntity(projectOrId: any): boolean {\n    if (isFunction(projectOrId)) {\n      return this.getAll().some(projectOrId);\n    }\n    return projectOrId in this.store.entities;\n  }\n\n  isEmpty() {\n    return this.getSnapshot().ids.length === 0;\n  }\n\n  private _byId(id: ID): Observable<E> {\n    return this.select(state => this.getEntity(id));\n  }\n\n  ngOnDestroy() {\n    this.memoized = null;\n  }\n}\n\nfunction toArray<E, S extends EntityState>(state: S, options: SelectOptions<E>): E[] {\n  let arr = [];\n  const { ids, entities } = state;\n  const { filterBy, limitTo, sortBy, sortByOrder } = options;\n\n  for (let i = 0; i < ids.length; i++) {\n    const id = ids[i];\n\n    if (!entityExists(id, entities)) {\n      continue;\n    }\n\n    if (!filterBy) {\n      arr.push(entities[id]);\n      continue;\n    }\n\n    if (filterBy(entities[id])) {\n      arr.push(entities[id]);\n    }\n  }\n\n  if (sortBy) {\n    let _sortBy: any = isFunction(sortBy) ? sortBy : compareValues(sortBy, sortByOrder);\n    arr = arr.sort((a, b) => _sortBy(a, b, state));\n  }\n  const length = Math.min(limitTo || arr.length, arr.length);\n\n  return length === arr.length ? arr : arr.slice(0, length);\n}\n\nfunction toMap<E>(ids: ID[], entities: HashMap<E>, options: SelectOptions<E>, get = false): HashMap<E> {\n  const map = {};\n  const { filterBy, limitTo } = options;\n\n  if (get && !filterBy && !limitTo) {\n    return entities;\n  }\n\n  const length = Math.min(limitTo || ids.length, ids.length);\n\n  if (filterBy && isUndefined(limitTo) === false) {\n    let count = 0;\n    for (let i = 0, length = ids.length; i < length; i++) {\n      if (count === limitTo) break;\n      const id = ids[i];\n      if (!entityExists(id, entities)) {\n        continue;\n      }\n      if (filterBy(entities[id])) {\n        map[id] = entities[id];\n        count++;\n      }\n    }\n  } else {\n    for (let i = 0; i < length; i++) {\n      const id = ids[i];\n\n      if (!entityExists(id, entities)) {\n        continue;\n      }\n\n      if (!filterBy) {\n        map[id] = entities[id];\n        continue;\n      }\n\n      if (toBoolean(filterBy(entities[id]))) {\n        map[id] = entities[id];\n      }\n    }\n  }\n\n  return map;\n}\n","import { endBatch, startBatch } from '../internal/transaction.internal';\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *  The following code will update the store, BUT  emits only once\n *\n *  @example\n *  applyTransaction(() => {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  });\n *\n */\nexport function applyTransaction<T>(action: () => T, thisArg = undefined): T {\n  startBatch();\n  try {\n    return action.apply(thisArg);\n  } finally {\n    endBatch();\n  }\n}\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *\n *  The following code will update the store, BUT  emits only once.\n *\n *  @example\n *  @transaction\n *  addTodos() {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  }\n *\n *\n */\nexport function transaction() {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function(...args) {\n      return applyTransaction(() => {\n        return originalMethod.apply(this, args);\n      }, this);\n    };\n\n    return descriptor;\n  };\n}\n","import { isObject } from '../internal/utils';\n\n// https://github.com/georapbox/immutable-arrays\n\n/**\n * Adds one or more elements to the end of an array by returning\n * a new array instead of mutating the original one.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = push(originalArray, 'f', 'g');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nexport function push<T>(array: T[], ...elementN: T[]): T[] {\n  return [...array, ...elementN];\n}\n\n/**\n * Deletes an element from an array by its index in the array.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = remove(originalArray, 2);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'd', 'e']\n */\nexport function remove<T>(array: T[], index: number): T[] {\n  return index >= 0 ? [...array.slice(0, index), ...array.slice(index + 1)] : [...array];\n}\n\n/**\n * Removes the last element from an array by returning\n * a new array instead of mutating the original one.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = pop(originalArray);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd']\n */\nexport function pop<T>(array: T[]): T[] {\n  return array.slice(0, -1);\n}\n\n/**\n * Adds one or more elements to the beginning of an array.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = unshift(originalArray, 'f', 'g');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['f', 'g', 'a', 'b', 'c', 'd', 'e']\n */\nexport function unshift<T>(array: T[], ...elementN: T[]): T[] {\n  return [...elementN, ...array];\n}\n\n/**\n * Sorts the elements of an array (not in place) and returns a sorted array.\n *\n * @example\n * const numberArray = [20, 3, 4, 10, -3, 1, 0, 5];\n * const stringArray = ['Blue', 'Humpback', 'Beluga'];\n *\n * const resultArray = sort(numberArray, (a, b) => a - b);\n * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]\n * // -> resultArray [-3, 0, 1, 3, 4, 5, 10, 20]\n *\n * const resultArray = sort(numberArray, (a, b) => b - a);\n * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]\n * // -> resultArray [20, 10, 5, 4, 3, 1, 0, -3]\n *\n * const resultArray = sort(stringArray);\n * // -> stringArray ['Blue', 'Humpback', 'Beluga']\n * // -> resultArray ['Beluga', 'Blue', 'Humpback']\n *\n * const resultArray = sort(stringArray, (a, b) => a.toLowerCase() < b.toLowerCase());\n * // -> stringArray ['Blue', 'Humpback', 'Beluga']\n * // -> resultArray ['Humpback', 'Blue', 'Beluga']\n */\nexport function sort<T>(array: T[], compareFunction?: (a: T, b: T) => number): T[] {\n  return [...array].sort(compareFunction);\n}\n\n/**\n * Reverses an array (not in place).\n * The first array element becomes the last, and the last array element becomes the first.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = reverse(originalArray);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['e', 'd', 'c', 'b', 'a']\n */\nexport function reverse<T>(array: T[]): T[] {\n  return [...array].reverse();\n}\n\n/**\n * Swap items in the array\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = swap(originalArray, 1, 4);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'e', 'c', 'd', 'b']\n */\nexport function swap<T>(array: T[], firstIndex: number, secondIndex: number): T[] {\n  const results = array.slice();\n  const firstItem = array[firstIndex];\n  results[firstIndex] = array[secondIndex];\n  results[secondIndex] = firstItem;\n\n  return results;\n}\n\n/**\n * Update item in the array\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = update(originalArray, 1, 'newItem');\n * // -> resultArray ['a', 'newItem', 'c', 'd', 'b']\n *\n * const originalArray = [{title: 1}, {title: 2}];\n * const resultArray = update(originalArray, originalArray[0], {title: 3});\n * // -> resultArray  [{title: 3}, {title: 2}];\n */\nexport function update<T>(array: T[], indexOrItem: number | object, updated: T): T[] {\n  return array.map((current, idx) => {\n    if (typeof indexOrItem === 'number' && idx === indexOrItem) {\n      return updated;\n    }\n\n    if (isObject(indexOrItem) && (indexOrItem as any) === current) {\n      return {\n        ...(indexOrItem as object),\n        ...(updated as any)\n      };\n    }\n\n    return current;\n  });\n}\n\n/**\n * Removes existing elements and/or adds new elements to an array.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray []\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, 1);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['b', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, 3);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['d', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, originalArray.length);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray []\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, -3);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, 0, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['lorem', 'ipsum', 'a', 'b', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, originalArray.length, 0, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'lorem', 'ipsum']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, 2, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['lorem', 'ipsum', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, originalArray.length - 2, 2, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'lorem', 'ipsum']\n */\nexport function splice<T>(array: T[], start = array.length, deleteCount = array.length - start, ...elementN: T[]): T[] {\n  return [...array.slice(0, start), ...elementN, ...array.slice(start + (deleteCount < 0 ? 0 : deleteCount))];\n}\n\nexport function toggle<T>(arr: T[], item: T) {\n  return arr.indexOf(item) > -1 ? arr.filter(current => item !== current) : push(arr, item);\n}\n","/** Checks if value is null or undefined */\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nexport const filterNil = <T>(source: Observable<T>) => source.pipe(filter(value => value !== null && typeof value !== 'undefined'));\n","import { Action, __globalState } from './global-state';\n\nexport function applyAction<T>(func: () => T, action: Action, thisArg = undefined): T {\n  __globalState.setCustomAction(action, true);\n  return func.apply(thisArg);\n}\n\nexport function action(action: Action, skipTransactionMsg = true) {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function(...args) {\n      __globalState.setCustomAction(action, skipTransactionMsg);\n      return originalMethod.apply(this, args);\n    };\n\n    return descriptor;\n  };\n}\n","import { __stores__ } from './store';\nimport { isString } from '../internal/utils';\n\nexport class SnapshotManager {\n  /**\n   * Get a snapshot of the whole state or a specific stores\n   * Use it ONLY for things like saving the state in the server\n   */\n  getStoresSnapshot(stores: string[] = []) {\n    let acc = {};\n    const hasInclude = stores.length > 0;\n    const keys = hasInclude ? stores : Object.keys(__stores__);\n    for (let i = 0; i < keys.length; i++) {\n      let storeName = keys[i];\n      acc[storeName] = __stores__[storeName]._value();\n    }\n\n    return acc;\n  }\n\n  /**\n   * Set snapshot we get from the server\n   */\n  setStoresSnapshot(stores: { [storeName: string]: any } | string) {\n    let normalizedStores = stores;\n    if (isString(stores)) {\n      normalizedStores = JSON.parse(normalizedStores as string);\n    }\n\n    for (let i = 0, keys = Object.keys(normalizedStores); i < keys.length; i++) {\n      const storeName = keys[i];\n      if (__stores__[storeName]) {\n        __stores__[storeName].setState(() => normalizedStores[storeName]);\n      }\n    }\n  }\n}\n\nexport const snapshotManager = new SnapshotManager();\n","import { QueryEntity } from '../api/query-entity';\nimport { Query } from '../api/query';\nimport { Observable } from 'rxjs';\nimport { filterNil } from '../api/operators';\nimport { toBoolean } from '../internal/utils';\nimport { ID } from '../api/types';\n\nexport type Queries<E, S> = Query<S> | QueryEntity<S, E>;\n\nexport abstract class AkitaPlugin<E = any, S = any> {\n  protected constructor(protected query: Queries<E, S>) {}\n\n  /** This method is responsible for getting access to the query. */\n  protected getQuery(): Queries<E, S> {\n    return this.query;\n  }\n\n  /** This method is responsible for getting access to the store. */\n  protected getStore() {\n    return this.getQuery().__store__;\n  }\n\n  /** This method is responsible for cleaning. */\n  public abstract destroy();\n\n  /** This method is responsible tells whether the plugin is entityBased or not.  */\n  protected isEntityBased(entityId: ID) {\n    return toBoolean(entityId);\n  }\n\n  /** This method is responsible for selecting the source; it can be the whole store or one entity. */\n  protected selectSource(entityId: ID): Observable<S | E> {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<S, E>).selectEntity(entityId).pipe(filterNil);\n    }\n\n    return (this.getQuery() as Query<S>).select(state => state);\n  }\n\n  protected getSource(entityId: ID): S | E {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<S, E>).getEntity(entityId);\n    }\n\n    return this.getQuery().getSnapshot();\n  }\n\n  /** This method is responsible for updating the store or one entity; it can be the whole store or one entity. */\n  protected updateStore(newState, entityId?) {\n    if (this.isEntityBased(entityId)) {\n      this.getStore().update(entityId, newState);\n    } else {\n      this.getStore().setState((state) => ({...state, ...newState}));\n    }\n  }\n}\n","import { QueryEntity } from '../../api/query-entity';\nimport { delay, map, switchMap, take } from 'rxjs/operators';\nimport { BehaviorSubject, from, Observable, Subscription } from 'rxjs';\nimport { isObservable, isUndefined } from '../../internal/utils';\nimport { ID } from '../../api/types';\nimport { AkitaPlugin } from '../plugin';\nimport { applyTransaction } from '../../api/transaction';\nimport { action, applyAction } from '../../internal/action';\n\nexport interface PaginationResponse<E> {\n  currentPage: number;\n  perPage: number;\n  lastPage: number;\n  data: E[];\n  total?: number;\n  from?: number;\n  to?: number;\n  pageControls?: number[];\n}\n\nexport type PaginatorConfig = {\n  pagesControls?: boolean;\n  range?: boolean;\n  startWith?: number;\n  cacheTimeout?: Observable<number>;\n};\n\nconst paginatorDefaults: PaginatorConfig = {\n  pagesControls: false,\n  range: false,\n  startWith: 1,\n  cacheTimeout: undefined\n};\n\nexport class PaginatorPlugin<E> extends AkitaPlugin<E> {\n  /** Save current filters, sorting, etc. in cache */\n  metadata = new Map();\n\n  private page: BehaviorSubject<number>;\n  private pages = new Map<number, { ids: ID[] }>();\n  private readonly clearCacheSubscription: Subscription;\n\n  private pagination: PaginationResponse<E> = {\n    currentPage: 1,\n    perPage: 0,\n    total: 0,\n    lastPage: 0,\n    data: []\n  };\n\n  /**\n   * When the user navigates to a different page and return\n   * we don't want to call `clearCache` on first time.\n   */\n  private initial = false;\n\n  constructor(protected query: QueryEntity<any, E>, public config: PaginatorConfig = {}) {\n    super(query);\n    this.config = Object.assign(paginatorDefaults, config);\n    const { startWith, cacheTimeout } = this.config;\n    this.page = new BehaviorSubject(startWith);\n    if (isObservable(cacheTimeout)) {\n      this.clearCacheSubscription = cacheTimeout.subscribe(_ => this.clearCache());\n    }\n  }\n\n  /**\n   * Proxy to the query loading\n   */\n  isLoading$ = this.query.selectLoading().pipe(delay(0));\n\n  /**\n   * Listen to page changes\n   */\n  get pageChanges() {\n    return this.page.asObservable();\n  }\n\n  /**\n   * Get the current page number\n   */\n  get currentPage() {\n    return this.pagination.currentPage;\n  }\n\n  /**\n   * Check if current page is the first one\n   */\n  get isFirst() {\n    return this.currentPage === 1;\n  }\n\n  /**\n   * Check if current page is the last one\n   */\n  get isLast() {\n    return this.currentPage === this.pagination.lastPage;\n  }\n\n  /**\n   * Whether to generate an array of pages for *ngFor\n   * [1, 2, 3, 4]\n   */\n  withControls() {\n    this.config.pagesControls = true;\n    return this;\n  }\n\n  /**\n   * Whether to generate the `from` and `to` keys\n   * [1, 2, 3, 4]\n   */\n  withRange() {\n    this.config.range = true;\n    return this;\n  }\n\n  /**\n   * Set the loading state\n   */\n  setLoading(value = true) {\n    this.getStore().setLoading(value);\n  }\n\n  /**\n   * Update the pagination object and add the page\n   */\n  @action({ type: '@Pagination - New Page' }, true)\n  update(response: PaginationResponse<E>) {\n    this.pagination = response;\n    this.addPage(response.data);\n  }\n\n  /**\n   *\n   * Set the ids and add the page to store\n   */\n  addPage(data: E[]) {\n    this.pages.set(this.currentPage, { ids: data.map(entity => entity[this.getStore().idKey]) });\n    this.getStore().add(data);\n  }\n\n  /**\n   * Clear the cache.\n   */\n  clearCache() {\n    if (!this.initial) {\n      applyAction(\n        () => {\n          this.getStore().remove();\n        },\n        { type: '@Pagination - Clear Cache' }\n      );\n      this.pages = new Map();\n    }\n    this.initial = false;\n  }\n\n  clearPage(page: number) {\n    this.pages.delete(page);\n  }\n\n  /**\n   * Clear the cache timeout and optionally the pages\n   */\n  destroy({ clearCache, currentPage }: { clearCache?: boolean; currentPage?: number } = {}) {\n    if (this.clearCacheSubscription) {\n      this.clearCacheSubscription.unsubscribe();\n    }\n    if (clearCache) {\n      this.clearCache();\n    }\n    if (!isUndefined(currentPage)) {\n      this.setPage(currentPage);\n    }\n    this.initial = true;\n  }\n\n  /**\n   * Whether the provided page is active\n   */\n  isPageActive(page: number) {\n    return this.currentPage === page;\n  }\n\n  /**\n   * Set the current page\n   */\n  setPage(page: number) {\n    if (page !== this.currentPage || !this.hasPage(page)) {\n      this.page.next((this.pagination.currentPage = page));\n    }\n  }\n\n  /**\n   * Increment current page\n   */\n  nextPage() {\n    if (this.currentPage !== this.pagination.lastPage) {\n      this.setPage(this.pagination.currentPage + 1);\n    }\n  }\n\n  /**\n   * Decrement current page\n   */\n  prevPage() {\n    if (this.pagination.currentPage > 1) {\n      this.setPage(this.pagination.currentPage - 1);\n    }\n  }\n\n  /**\n   * Set current page to last\n   */\n  setLastPage() {\n    this.setPage(this.pagination.lastPage);\n  }\n\n  /**\n   * Set current page to first\n   */\n  setFirstPage() {\n    this.setPage(1);\n  }\n\n  /**\n   * Check if page exists in cache\n   */\n  hasPage(page: number) {\n    return this.pages.has(page);\n  }\n\n  /**\n   * Get the current page if it's in cache, otherwise invoke the request\n   */\n  getPage(req: () => Observable<PaginationResponse<E>>) {\n    const page = this.pagination.currentPage;\n    if (this.hasPage(page)) {\n      return this.selectPage(page);\n    } else {\n      this.setLoading(true);\n      return from(req()).pipe(\n        switchMap((config: PaginationResponse<E>) => {\n          applyTransaction(() => {\n            this.setLoading(false);\n            this.update(config);\n          });\n          return this.selectPage(page);\n        })\n      );\n    }\n  }\n\n  getQuery(): QueryEntity<any, E> {\n    return this.query;\n  }\n\n  private getFrom() {\n    if (this.isFirst) {\n      return 1;\n    }\n    return (this.currentPage - 1) * this.pagination.perPage + 1;\n  }\n\n  private getTo() {\n    return this.currentPage * this.pagination.perPage;\n  }\n\n  /**\n   * Select the page\n   */\n  private selectPage(page: number): Observable<PaginationResponse<E>> {\n    return this.query.selectAll({ asObject: true }).pipe(\n      take(1),\n      map(entities => {\n        let response: PaginationResponse<E> = {\n          ...this.pagination,\n          data: this.pages.get(page).ids.map(id => entities[id])\n        };\n\n        const { range, pagesControls } = this.config;\n\n        if (!this.pagination.total) {\n          response.total = response.perPage * response.lastPage;\n          this.pagination.total = response.total;\n        }\n\n        if (range) {\n          response.from = this.getFrom();\n          response.to = this.getTo();\n        }\n\n        if (pagesControls) {\n          response.pageControls = generatePages(this.pagination.total, this.pagination.perPage);\n        }\n\n        return response;\n      })\n    );\n  }\n}\n\n/**\n * Generate an array so we can ngFor them to navigate between pages\n */\nfunction generatePages(total: number, perPage: number) {\n  const len = Math.ceil(total / perPage);\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i + 1);\n  }\n  return arr;\n}\n\n/** backward compatibility */\nexport const Paginator = PaginatorPlugin;\n","import { AkitaPlugin } from '../plugin';\nimport { Query } from '../../api/query';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { __globalState } from '../../internal/global-state';\nimport { getValue, isString, setValue } from '../../internal/utils';\n\nexport type FormGroupLike = {\n  patchValue: Function;\n  setValue: Function;\n  valueChanges: Observable<any>;\n};\n\nexport type AkitaFormProp<T> = {\n  [key: string]: T;\n};\n\nexport type PersistFormParams = {\n  debounceTime?: number;\n  formKey?: string;\n  emitEvent?: boolean;\n};\n\nexport class PersistNgFormPlugin<T = any> extends AkitaPlugin {\n  formChanges: Subscription;\n  private form: FormGroupLike;\n  private isKeyBased: boolean;\n  private initialValue;\n\n  constructor(protected query: Query<any>, private factoryFnOrPath: Function | string, private params: PersistFormParams = {}) {\n    super(query);\n    this.params = { ...{ debounceTime: 300, formKey: 'akitaForm', emitEvent: false }, ...params };\n    this.isKeyBased = isString(factoryFnOrPath);\n  }\n\n  setForm(form: FormGroupLike) {\n    this.form = form;\n    this.activate();\n    return this;\n  }\n\n  reset(initialState?: T) {\n    let value;\n    if (initialState) {\n      value = initialState;\n    } else {\n      value = this.isKeyBased ? this.initialValue : (this as any).factoryFnOrPath();\n    }\n\n    this.form.patchValue(value);\n\n    const storeValue = this.isKeyBased ? setValue(this.getStore()._value(), `${this.getStore().storeName}.${this.factoryFnOrPath}`, value) : { [this.params.formKey]: value };\n    this.updateStore(storeValue);\n  }\n\n  private activate() {\n    let path;\n\n    if (this.isKeyBased) {\n      path = `${this.getStore().storeName}.${this.factoryFnOrPath}`;\n      this.initialValue = getValue(this.getStore()._value(), path);\n      this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });\n    } else {\n      if (!(this.getQuery().getSnapshot() as AkitaFormProp<T>)[this.params.formKey]) {\n        __globalState.setAction({ type: '@PersistNgFormPlugin activate' });\n        this.updateStore({ [this.params.formKey]: (this as any).factoryFnOrPath() });\n      }\n\n      this.query.selectOnce(state => (state as AkitaFormProp<T>)[this.params.formKey]).subscribe(formValue => this.form.patchValue(formValue));\n    }\n\n    this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe(value => {\n      __globalState.setAction({ type: '@PersistForm - Update' });\n      let newState;\n      if (this.isKeyBased) {\n        newState = state => setValue(state, path, value);\n      } else {\n        newState = () => ({ [this.params.formKey]: value });\n      }\n      this.updateStore(newState(this.getStore()._value()));\n    });\n  }\n\n  destroy() {\n    this.formChanges && this.formChanges.unsubscribe();\n  }\n}\n","import { AkitaError } from '../internal/error';\nimport { __stores__, Actions, rootDispatcher } from '../api/store';\nimport { skip } from 'rxjs/operators';\nimport { getValue, setValue } from '../internal/utils';\nimport { __globalState } from '../internal/global-state';\n\nconst notBs = typeof localStorage === 'undefined';\n\nexport interface PersistStateParams {\n  /** The storage key */\n  key: string;\n  /** Storage strategy to use. This defaults to LocalStorage but you can pass SessionStorage or anything that implements the StorageEngine API. */\n  storage: Storage;\n  /** Custom deserializer. Defaults to JSON.parse */\n  deserialize: Function;\n  /** Custom serializer, defaults to JSON.stringify */\n  serialize: Function;\n  /**\n   * By default the whole state is saved to storage, use this param to include only the stores you need.\n   * Pay attention that you can't use both include and exclude\n   */\n  include: string[];\n  /**\n   *  By default the whole state is saved to storage, use this param to exclude stores that you don't need.\n   *  Pay attention that you can't use both include and exclude\n   */\n  exclude: string[];\n}\n\nexport function persistState(params?: Partial<PersistStateParams>) {\n  if (notBs) return;\n\n  const defaults: PersistStateParams = {\n    key: 'AkitaStores',\n    storage: localStorage,\n    deserialize: JSON.parse,\n    serialize: JSON.stringify,\n    include: [],\n    exclude: []\n  };\n  const { storage, deserialize, serialize, include, exclude, key } = Object.assign({}, defaults, params);\n\n  const hasInclude = include.length > 0;\n  const hasExclude = exclude.length > 0;\n\n  if (hasInclude && hasExclude) {\n    throw new AkitaError(\"You can't use both include and exclude\");\n  }\n\n  const storageState = deserialize(storage.getItem(key) || '{}');\n\n  let stores = {};\n  let acc = {};\n\n  function save() {\n    storage.setItem(key, serialize(Object.assign({}, storageState, acc)));\n  }\n\n  function subscribe(storeName, path) {\n    stores[storeName] = __stores__[storeName]\n      ._select(state => getValue(state, path))\n      .pipe(skip(1))\n      .subscribe(data => {\n        acc[storeName] = data;\n        save();\n      });\n  }\n\n  function setInitial(storeName, store, path) {\n    if (storageState[storeName]) {\n      __globalState.setAction({ type: '@PersistState' });\n      store.setState(state => {\n        return setValue(state, path, storageState[storeName]);\n      });\n      if (store.setDirty) {\n        store.setDirty();\n      }\n    }\n  }\n\n  const subscription = rootDispatcher.subscribe(action => {\n    if (action.type === Actions.NEW_STORE) {\n      let currentStoreName = action.payload.store.storeName;\n\n      if (hasExclude && exclude.indexOf(currentStoreName) > -1 === true) {\n        return;\n      }\n\n      if (hasInclude) {\n        const path = include.find(name => name.indexOf(currentStoreName) > -1);\n        if (!path) {\n          return;\n        } else {\n          currentStoreName = path.split('.')[0];\n          setInitial(currentStoreName, action.payload.store, path);\n          subscribe(currentStoreName, path);\n        }\n      } else {\n        setInitial(currentStoreName, action.payload.store, currentStoreName);\n        subscribe(currentStoreName, currentStoreName);\n      }\n    }\n  });\n\n  return {\n    destroy() {\n      subscription.unsubscribe();\n      for (let i = 0, keys = Object.keys(stores); i < keys.length; i++) {\n        const storeName = keys[i];\n        stores[storeName].unsubscribe();\n      }\n      stores = {};\n    },\n    clear() {\n      storage.clear();\n    },\n    clearStore(storeName: string) {\n      const storageState = deserialize(storage.getItem(key) || '{}');\n\n      if (storageState[storeName]) {\n        delete storageState[storeName];\n        storage.setItem(key, serialize(storageState));\n      }\n    }\n  };\n}\n","import {coerceArray, isFunction, isUndefined, toBoolean} from '../internal/utils';\nimport {QueryEntity} from '../api/query-entity';\nimport {ID, IDS} from '../api/types';\nimport {Observable} from 'rxjs';\n\n/**\n * Each plugin that wants to add support for entities should extend this interface.\n */\nexport type EntityParam = ID;\n\nexport type EntityCollectionParams = ID | ID[];\n\nexport type RebaseActions<P = any> = { beforeRemove?: Function; beforeAdd?: Function; afterAdd?: (plugin: P) => any; };\n\nconst defaultActions: RebaseActions = {beforeRemove: plugin => plugin.destroy()};\n\nexport abstract class EntityCollectionPlugin<E, P> {\n  protected entities = new Map<ID, P>();\n\n  protected constructor(protected query: QueryEntity<any, E>, private entityIds: EntityCollectionParams) {}\n\n  /**\n   * Get the entity plugin instance.\n   */\n  protected getEntity(id: ID): P {\n    return this.entities.get(id);\n  }\n\n  /**\n   * Whether the entity plugin exist.\n   */\n  protected hasEntity(id: ID): boolean {\n    return this.entities.has(id);\n  }\n\n  /**\n   * Remove the entity plugin instance.\n   */\n  protected removeEntity(id: ID) {\n    return this.entities.delete(id);\n  }\n\n  /**\n   * Set the entity plugin instance.\n   */\n  protected createEntity(id: ID, plugin: P) {\n    return this.entities.set(id, plugin);\n  }\n\n  /**\n   * If the user passes `entityIds` we take them; otherwise, we take all.\n   */\n  protected getIds(): ID[] {\n    return isUndefined(this.entityIds) ? this.query.getSnapshot().ids : coerceArray(this.entityIds);\n  }\n\n  /**\n   * When you call one of the plugin methods, you can pass id/ids or undefined which means all.\n   */\n  protected resolvedIds(ids?): ID[] {\n    return isUndefined(ids) ? this.getIds() : coerceArray(ids);\n  }\n\n  /**\n   * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.\n   *\n   * For example in your plugin you may do the following:\n   *\n   * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));\n   */\n  protected rebase(ids: ID[], actions: RebaseActions<P> = defaultActions) {\n    /**\n     *\n     * If the user passes `entityIds` & we have new ids check if we need to add/remove instances.\n     *\n     * This phase will be called only upon update.\n     */\n    if (toBoolean(ids)) {\n      /**\n       * Which means all\n       */\n      if (isUndefined(this.entityIds)) {\n        for (let i = 0, len = ids.length; i < len; i++) {\n          const entityId = ids[i];\n          if (this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          }\n        }\n\n        this.entities.forEach((plugin, entityId) => {\n          if (ids.indexOf(entityId) === -1) {\n            isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n            this.removeEntity(entityId);\n          }\n        });\n      } else {\n        /**\n         * Which means the user passes specific ids\n         */\n        const _ids = coerceArray(this.entityIds);\n        for (let i = 0, len = _ids.length; i < len; i++) {\n          const entityId = _ids[i];\n          /** The Entity in current ids and doesn't exist, add it. */\n          if (ids.indexOf(entityId) > -1 && this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          } else {\n            this.entities.forEach((plugin, entityId) => {\n              /** The Entity not in current ids and exists, remove it. */\n              if (ids.indexOf(entityId) === -1 && this.hasEntity(entityId) === true) {\n                isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n                this.removeEntity(entityId);\n              }\n            });\n          }\n        }\n      }\n    } else {\n      /**\n       * Otherwise, start with the provided ids or all.\n       */\n      this.getIds().forEach(id => {\n        if (!this.hasEntity(id)) this.createEntity(id, this.instantiatePlugin(id))\n      });\n    }\n  }\n\n  /**\n   * Listen for add/remove entities.\n   */\n  protected selectIds(): Observable<ID[]> {\n    return this.query.select(state => state.ids);\n  }\n\n  /**\n   * Base method for activation, you can override it if you need to.\n   */\n  protected activate(ids?: ID[]) {\n    this.rebase(ids);\n  }\n\n  /**\n   * This method is responsible for plugin instantiation.\n   *\n   * For example:\n   * return new StateHistory(this.query, this.params, id) as P;\n   */\n  protected abstract instantiatePlugin(id: ID): P;\n\n  /**\n   * This method is responsible for cleaning.\n   */\n  public abstract destroy(id?: ID);\n\n  /**\n   * Loop over each id and invoke the plugin method.\n   */\n  protected forEachId(ids: IDS, cb: (entity: P) => any) {\n    const _ids = this.resolvedIds(ids);\n\n    for (let i = 0, len = _ids.length; i < len; i++) {\n      const id = _ids[i];\n      if (this.hasEntity(id)) {\n        cb(this.getEntity(id));\n      }\n    }\n  }\n}\n","import { filter, pairwise } from 'rxjs/operators';\nimport { __globalState } from '../../internal/global-state';\nimport { toBoolean } from '../../internal/utils';\nimport { AkitaPlugin, Queries } from '../plugin';\nimport { EntityParam } from '../entity-collection-plugin';\n\nexport interface StateHistoryParams {\n  maxAge?: number;\n}\n\nexport class StateHistoryPlugin<E = any, S = any> extends AkitaPlugin<E, S> {\n  /** Allow skipping an update from outside */\n  private skip = false;\n\n  private history = {\n    past: [],\n    present: null,\n    future: []\n  };\n\n  /** Skip the update when redo/undo */\n  private skipUpdate = false;\n  private subscription;\n\n  constructor(protected query: Queries<E, S>, private params: StateHistoryParams = {}, private _entityId?: EntityParam) {\n    super(query);\n    params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;\n    this.activate();\n  }\n\n  get hasPast() {\n    return this.history.past.length > 0;\n  }\n\n  get hasFuture() {\n    return this.history.future.length > 0;\n  }\n\n  activate() {\n    this.history.present = this.getSource(this._entityId);\n    this.subscription = this.selectSource(this._entityId)\n      .pipe(pairwise())\n      .subscribe(([past, present]) => {\n        if (this.skip) {\n          this.skip = false;\n          return;\n        }\n        if (!this.skipUpdate) {\n          if (this.history.past.length === this.params.maxAge) {\n            this.history.past = this.history.past.slice(1);\n          }\n          this.history.past = [...this.history.past, past];\n          this.history.present = present;\n        }\n      });\n  }\n\n  undo() {\n    if (this.history.past.length > 0) {\n      const { past, present, future } = this.history;\n      const previous = past[past.length - 1];\n      const newPast = past.slice(0, past.length - 1);\n\n      this.history.past = newPast;\n      this.history.present = previous;\n      this.history.future = [present, ...this.history.future];\n      this.update();\n    }\n  }\n\n  redo() {\n    if (this.history.future.length > 0) {\n      const { past, present, future } = this.history;\n      const next = this.history.future[0];\n      const newFuture = this.history.future.slice(1);\n      this.history.past = [...past, present];\n      this.history.present = next;\n      this.history.future = newFuture;\n      this.update('Redo');\n    }\n  }\n\n  jumpToPast(index: number) {\n    if (index < 0 || index >= this.history.past.length) return;\n\n    const { past, future } = this.history;\n    /**\n     *\n     * const past = [1, 2, 3, 4, 5];\n     *\n     * newPast = past.slice(0, 2) = [1, 2];\n     * present = past[index] = 3;\n     * [...past.slice(2 + 1), ...future] = [4, 5];\n     *\n     */\n    const newPast = past.slice(0, index);\n    const newFuture = [...past.slice(index + 1), ...future];\n    const newPresent = past[index];\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update();\n  }\n\n  jumpToFuture(index: number) {\n    if (index < 0 || index >= this.history.future.length) return;\n\n    const { past, future } = this.history;\n\n    const newPast = [...past, ...future.slice(0, index)];\n    const newPresent = future[index];\n    const newFuture = future.slice(index + 1);\n\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update('Redo');\n  }\n\n  clear() {\n    this.history = {\n      past: [],\n      present: null,\n      future: []\n    };\n  }\n\n  destroy(clearHistory = false) {\n    if (clearHistory) {\n      this.clear();\n    }\n    this.subscription.unsubscribe();\n  }\n\n  ignoreNext() {\n    this.skip = true;\n  }\n\n  private update(action = 'Undo') {\n    this.skipUpdate = true;\n    __globalState.setCustomAction({ type: `@StateHistory - ${action}` });\n    this.updateStore(this.history.present, this._entityId);\n    this.skipUpdate = false;\n  }\n}\n","import { ID, IDS } from '../../api/types';\nimport { QueryEntity } from '../../api/query-entity';\nimport { StateHistoryPlugin, StateHistoryParams } from './state-history-plugin';\nimport { toBoolean } from '../../internal/utils';\nimport { skip } from 'rxjs/operators';\nimport { EntityCollectionPlugin, EntityCollectionParams } from '../entity-collection-plugin';\n\nexport interface StateHistoryEntityParams extends StateHistoryParams {\n  entityIds?: EntityCollectionParams;\n}\n\nexport class EntityStateHistoryPlugin<E, P extends StateHistoryPlugin<E, any> = StateHistoryPlugin<E, any>> extends EntityCollectionPlugin<E, P> {\n  constructor(protected query: QueryEntity<any, E>, protected readonly params: StateHistoryEntityParams = {}) {\n    super(query, params.entityIds);\n    params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;\n    this.activate();\n    this.selectIds()\n      .pipe(skip(1))\n      .subscribe(ids => this.activate(ids));\n  }\n\n  redo(ids?: IDS) {\n    this.forEachId(ids, e => e.redo());\n  }\n\n  undo(ids?: IDS) {\n    this.forEachId(ids, e => e.undo());\n  }\n\n  hasPast(id: ID) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasPast;\n    }\n  }\n\n  hasFuture(id: ID) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasFuture;\n    }\n  }\n\n  jumpToFuture(ids: IDS, index: number) {\n    this.forEachId(ids, e => e.jumpToFuture(index));\n  }\n\n  jumpToPast(ids: IDS, index: number) {\n    this.forEachId(ids, e => e.jumpToPast(index));\n  }\n\n  clear(ids?: IDS) {\n    this.forEachId(ids, e => e.clear());\n  }\n\n  destroy(ids?: IDS, clearHistory = false) {\n    this.forEachId(ids, e => e.destroy(clearHistory));\n  }\n\n  protected instantiatePlugin(id: ID) {\n    return new StateHistoryPlugin<E, any>(this.query, this.params, id) as P;\n  }\n}\n","import { AkitaPlugin, Queries } from '../plugin';\nimport { QueryEntity } from '../../api/query-entity';\nimport { Observable, BehaviorSubject, Subscription, merge } from 'rxjs';\nimport { distinctUntilChanged, map, skip } from 'rxjs/operators';\nimport { coerceArray, isFunction, isUndefined, toBoolean } from '../../internal/utils';\nimport { EntityParam } from '../entity-collection-plugin';\nimport { __globalState } from '../../internal/global-state';\nimport { Query } from '../../api/query';\n\nexport type DirtyCheckComparator<Entity> = (head: Entity, current: Entity) => boolean;\n\nexport type DirtyCheckParams<StoreState = any> = {\n  comparator?: DirtyCheckComparator<StoreState>;\n  watchProperty?: keyof StoreState | (keyof StoreState)[];\n};\n\nexport const dirtyCheckDefaultParams = {\n  comparator: (head, current) => JSON.stringify(head) !== JSON.stringify(current)\n};\n\nexport type DirtyCheckResetParams<StoreState = any> = {\n  updateFn?: StoreState | ((head: StoreState, current: StoreState) => any);\n};\n\nexport class DirtyCheckPlugin<Entity = any, StoreState = any> extends AkitaPlugin<Entity, StoreState> {\n  private head: StoreState | Partial<StoreState> | Entity;\n  private dirty = new BehaviorSubject(false);\n  private subscription: Subscription;\n  private active = false;\n\n  isDirty$: Observable<boolean> = this.dirty.asObservable().pipe(distinctUntilChanged());\n\n  constructor(protected query: Queries<Entity, StoreState>, private params?: DirtyCheckParams, private _entityId?: EntityParam) {\n    super(query);\n    this.params = { ...dirtyCheckDefaultParams, ...params };\n    if (this.params.watchProperty) {\n      let watchProp = this.params.watchProperty;\n      watchProp = coerceArray(watchProp);\n      if (watchProp.includes('entities') && !watchProp.includes('ids') && query instanceof QueryEntity) {\n        watchProp.push('ids');\n      }\n      this.params.watchProperty = watchProp;\n    }\n  }\n\n  protected getHead() {\n    return this.head;\n  }\n\n  private activate() {\n    this.head = this._getHead();\n    /** if we are tracking specific properties select only the relevant ones */\n    const source = this.params.watchProperty\n      ? (this.params.watchProperty as (keyof StoreState)[]).map(prop => this.query.select(state => state[prop]).pipe(map(val => ({ val, __akitaKey: prop }))))\n      : [this.selectSource(this._entityId)];\n    this.subscription = merge(...source)\n      .pipe(skip(1))\n      .subscribe((currentState: any) => {\n        if (isUndefined(this.head)) return;\n        /** __akitaKey is used to determine if we are tracking a specific property or a store change */\n        const head = currentState.__akitaKey ? this.head[currentState.__akitaKey as any] : this.head;\n        const compareTo = currentState.__akitaKey ? currentState.val : currentState;\n        const isChange = this.params.comparator(head, compareTo);\n\n        this.updateDirtiness(isChange);\n      });\n  }\n\n  reset(params: DirtyCheckResetParams = {}) {\n    let currentValue = this.head;\n    if (isFunction(params.updateFn)) {\n      if (this.isEntityBased(this._entityId)) {\n        currentValue = params.updateFn(this.head, (this.getQuery() as QueryEntity<StoreState, Entity>).getEntity(this._entityId));\n      } else {\n        currentValue = params.updateFn(this.head, (this.getQuery() as Query<StoreState>).getSnapshot());\n      }\n    }\n    /** If we are watching specific props compare them, if not compare the entire store */\n    const update = this.params.watchProperty ? this.compareProp(currentValue) : this._getHead() !== currentValue;\n    if (update) {\n      __globalState.setCustomAction({ type: `@DirtyCheck - Revert` });\n      this.updateStore(currentValue, this._entityId);\n    }\n  }\n\n  setHead() {\n    if (!this.active) {\n      this.activate();\n      this.active = true;\n    } else {\n      this.head = this._getHead();\n    }\n    this.updateDirtiness(false);\n    return this;\n  }\n\n  isDirty(): boolean {\n    return toBoolean(this.dirty.value);\n  }\n\n  hasHead() {\n    return toBoolean(this.getHead());\n  }\n\n  destroy() {\n    this.head = null;\n    this.subscription && this.subscription.unsubscribe();\n  }\n\n  private updateDirtiness(isDirty: boolean) {\n    this.dirty.next(isDirty);\n  }\n\n  private _getHead(): Partial<StoreState> | StoreState {\n    let head: StoreState | Partial<StoreState> = this.getSource(this._entityId) as StoreState;\n    if (this.params.watchProperty) {\n      head = (this.params.watchProperty as (keyof StoreState)[]).reduce(\n        (_head, prop) => {\n          _head[prop] = (head as Partial<StoreState>)[prop];\n          return _head;\n        },\n        {} as Partial<StoreState>\n      );\n    }\n    return head;\n  }\n\n  private compareProp(currentState: Partial<StoreState>): boolean {\n    const propKeys = Object.keys(currentState);\n    const head = this._getHead();\n\n    return propKeys.some(propKey => currentState[propKey] !== head[propKey]);\n  }\n}\n","import {HashMap, ID, IDS} from '../../api/types';\nimport {DirtyCheckComparator, dirtyCheckDefaultParams, DirtyCheckPlugin, DirtyCheckResetParams} from './dirty-check-plugin';\nimport {QueryEntity} from '../../api/query-entity';\nimport {EntityCollectionPlugin} from '../entity-collection-plugin';\nimport {map, skip} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\n\nexport type DirtyCheckCollectionParams<E> = {\n  comparator?: DirtyCheckComparator<E>;\n  entityIds?: ID | ID[];\n};\n\nexport class EntityDirtyCheckPlugin<E, P extends DirtyCheckPlugin<E, any> = DirtyCheckPlugin<E, any>> extends EntityCollectionPlugin<E, P> {\n\n  isSomeDirty$: Observable<boolean> = this.query.select(state => state.entities)\n    .pipe(map((entities: any) => this.checkSomeDirty(entities)));\n\n  constructor(protected query: QueryEntity<any, E>, private readonly params: DirtyCheckCollectionParams<E> = {}) {\n    super(query, params.entityIds);\n    this.params = {...dirtyCheckDefaultParams, ...params};\n    this.activate();\n    this.selectIds().pipe(skip(1)).subscribe(ids => {\n      this.rebase(ids, {afterAdd: plugin => plugin.setHead()});\n    });\n  }\n\n  setHead(ids?: IDS) {\n    this.forEachId(ids, e => e.setHead());\n    return this;\n  }\n\n  hasHead(id: ID): boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return entity.hasHead();\n    }\n\n    return false;\n  }\n\n  reset(ids?: IDS, params: DirtyCheckResetParams = {}) {\n    this.forEachId(ids, e => e.reset(params));\n  }\n\n  isDirty(id: ID): Observable<boolean>;\n  isDirty(id: ID, asObservable: true): Observable<boolean>;\n  isDirty(id: ID, asObservable: false): boolean;\n  isDirty(id: ID, asObservable = true): Observable<boolean> | boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return asObservable ? entity.isDirty$ : entity.isDirty();\n    }\n\n    return false;\n  }\n\n  isSomeDirty(): boolean {\n    const entities = this.query.getAll({asObject: true});\n    return this.checkSomeDirty(entities);\n  }\n\n  destroy(ids?: IDS) {\n    this.forEachId(ids, e => e.destroy());\n  }\n\n  protected instantiatePlugin(id: ID): P {\n    return new DirtyCheckPlugin(this.query, this.params, id) as P;\n  }\n\n  private checkSomeDirty(entities: HashMap<E>): boolean {\n    const entitiesIds = this.resolvedIds();\n    for (const id of entitiesIds) {\n      const dirty = this.params.comparator((this.getEntity(id) as any).getHead(), entities[id]);\n      if (dirty) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import { Observable } from 'rxjs';\n\nfunction serialize(object) {\n  return JSON.stringify(object, function(key, value) {\n    if (typeof value === 'function') {\n      return value.toString();\n    }\n    return value;\n  });\n}\n\nfunction createWorker() {\n  const blob = new Blob(\n    [\n      `self.onmessage = function(e) {\n\n      function deserialize(str) {\n        return JSON.parse(str || '', function(key, value) {\n          if (value &&\n            typeof value === \"string\" &&\n            value.substr(0, 8) == \"function\") {\n            var startBody = value.indexOf('{') + 1;\n            var endBody = value.lastIndexOf('}');\n            var startArgs = value.indexOf('(') + 1;\n            var endArgs = value.indexOf(')');\n            return new Function(value.substring(startArgs, endArgs), value.substring(startBody, endBody));\n          }\n          return value;\n        });\n      }\n\n      var deserialized = deserialize(e.data);\n      var mapped = deserialized.data.map(function(d) {\n        return deserialized.factory(d);\n      });\n\n      self.postMessage(mapped);\n    }`\n    ],\n    {\n      type: 'text/javascript'\n    }\n  );\n\n  const url = URL.createObjectURL(blob);\n  return new Worker(url);\n}\n\n/**\n *  @example\n *   const mockTodos = Array.from({length: 10000}, (_, x) => ({id: x}));\n *\n *   of(mockTodos).pipe(mapInWorker<Todo>(createTodo))\n *   .subscribe(res => console.log(res));\n */\nexport function mapInWorker<T>(factoryFn: Function) {\n  return function(source): Observable<T[]> {\n    return new Observable(observer => {\n      const worker = createWorker();\n\n      worker.onmessage = function(e) {\n        observer.next(e.data);\n        observer.complete();\n        worker.terminate();\n      };\n\n      worker.onerror = function(err) {\n        observer.error(err);\n        observer.complete();\n        worker.terminate();\n      };\n\n      return source.subscribe(value => {\n        const input = {\n          factory: factoryFn,\n          data: value\n        };\n        const serialized = serialize(input);\n\n        worker.postMessage(serialized);\n      });\n    });\n  };\n}\n","import { __stores__, Actions, rootDispatcher } from '../api/store';\nimport { __globalState } from '../internal/global-state';\nimport { isDefined } from '../internal/utils';\n\nexport type DevtoolsOptions = {\n  /**  maximum allowed actions to be stored in the history tree */\n  maxAge: number;\n  latency: number;\n  actionsBlacklist: string[];\n  actionsWhitelist: string[];\n  shouldCatchErrors: boolean;\n  logTrace: boolean;\n  predicate: (state: any, action: any) => boolean;\n};\n\nexport type NgZoneLike = { run: any };\n\nexport function akitaDevtools(ngZone: NgZoneLike, options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(ngZoneOrOptions?: NgZoneLike | Partial<DevtoolsOptions>, options: Partial<DevtoolsOptions> = {}) {\n  if (!(window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n    return;\n  }\n\n  const isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];\n\n  if (!isAngular) {\n    ngZoneOrOptions = ngZoneOrOptions || {};\n    (ngZoneOrOptions as any).run = cb => cb();\n    options = ngZoneOrOptions as Partial<DevtoolsOptions>;\n  }\n\n  const defaultOptions: Partial<DevtoolsOptions> & { name: string } = { name: 'Akita' };\n  const merged = Object.assign({}, defaultOptions, options);\n\n  const devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__.connect(merged);\n  let appState = {};\n\n  rootDispatcher.subscribe(action => {\n    if (action.type === Actions.NEW_STATE) {\n      if (__globalState.skipAction) {\n        __globalState.setSkipAction(false);\n        return;\n      }\n\n      appState = {\n        ...appState,\n        [action.payload.name]: __stores__[action.payload.name]._value()\n      };\n\n      const { type, entityId } = __globalState.currentAction;\n      const storeName = capitalize(action.payload.name);\n      let msg = isDefined(entityId) ? `[${storeName}] - ${type} (ids: ${entityId})` : `[${storeName}] - ${type}`;\n\n      if (options.logTrace) {\n        console.group(msg);\n        console.trace();\n        console.groupEnd();\n      }\n\n      devTools.send({ type: msg, transaction: __globalState.currentT.map(t => t.type) }, appState);\n    }\n  });\n\n  devTools.subscribe(message => {\n    if (message.type === 'ACTION') {\n      const [storeName] = message.payload.split('.');\n\n      if (__stores__[storeName]) {\n        (ngZoneOrOptions as NgZoneLike).run(() => {\n          const funcCall = message.payload.replace(storeName, `this['${storeName}']`);\n          try {\n            new Function(`${funcCall}`).call(__stores__);\n          } catch (e) {\n            console.warn('Unknown Method â¹ï¸');\n          }\n        });\n      }\n    }\n\n    if (message.type === 'DISPATCH') {\n      const payloadType = message.payload.type;\n\n      if (payloadType === 'COMMIT') {\n        devTools.init(appState);\n        return;\n      }\n\n      if (message.state) {\n        const rootState = JSON.parse(message.state);\n        for (let i = 0, keys = Object.keys(rootState); i < keys.length; i++) {\n          const storeName = keys[i];\n          if (__stores__[storeName]) {\n            (ngZoneOrOptions as NgZoneLike).run(() => {\n              __stores__[storeName].setState(() => rootState[storeName], false);\n            });\n          }\n        }\n      }\n    }\n  });\n}\n\nfunction capitalize(string) {\n  return string && string.charAt(0).toUpperCase() + string.slice(1);\n}\n","import { isNumber } from '../internal/utils';\n\n/**\n * @example\n *\n * this.peopleStore.update(id, person => ({\n *   guests: increment(person.guests)\n * }));\n */\nexport function increment(value: number, params: { maxValue: number | undefined } = { maxValue: undefined }) {\n  if (isNumber(value) === false) return;\n  if (params.maxValue && value === params.maxValue) return value;\n  return value + 1;\n}\n\n/**\n * @example\n *\n * this.peopleStore.update(id, person => ({\n *   guests: decrement(person.guests)\n * }));\n */\nexport function decrement(value, params: { allowNegative: boolean } = { allowNegative: false }) {\n  if (isNumber(value) === false) return;\n  if (params.allowNegative === false && value === 0) {\n    return value;\n  }\n  return value - 1;\n}\n\n/**\n * Generate random guid\n */\nexport function guid() {\n  return 'xxxxxx4xyx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n"]}