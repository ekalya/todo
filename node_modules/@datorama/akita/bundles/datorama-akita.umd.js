(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@datorama/akita', ['exports', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global.datorama = global.datorama || {}, global.datorama.akita = {}),global.rxjs,global.rxjs.operators));
}(this, (function (exports,rxjs,operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)
                if (e.indexOf(p[i]) < 0)
                    t[p[i]] = s[p[i]];
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Wraps the provided value in an array, unless the provided _value is an array.
     * @template T
     * @param {?} value
     * @return {?}
     */
    function coerceArray(value) {
        return Array.isArray(value) ? value : [value];
    }
    /**
     * Check if a value is an object
     * @param {?} value
     * @return {?}
     */
    function isObject(value) {
        return Object.prototype.toString.call(value) === '[object Object]';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isPlainObject(value) {
        return toBoolean(value) && value.constructor.name === 'Object';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isFunction(value) {
        return typeof value === 'function';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function toBoolean(value) {
        return value != null && "" + value !== 'false';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isUndefined(value) {
        return typeof value === 'undefined';
    }
    /**
     * Check if entity exists
     * @template E
     * @param {?} id
     * @param {?} entities
     * @return {?}
     */
    function entityExists(id, entities) {
        return entities.hasOwnProperty(id);
    }
    /**
     * Observable that emits empty value and complete
     * @template T
     * @return {?}
     */
    function noop() {
        return new rxjs.Observable(function (observer) {
            observer.next();
            observer.complete();
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isObservable(value) {
        return toBoolean(value) && isFunction(value.subscribe);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    function isString(val) {
        return typeof val === 'string';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isNumber(value) {
        return typeof value === 'number';
    }
    /**
     * @param {?} val
     * @return {?}
     */
    function isDefined(val) {
        return val !== null && typeof val !== 'undefined';
    }
    /**
     * Check if the active entity exist
     * @template E
     * @param {?} state
     * @return {?}
     */
    function resetActive(state) {
        return isActiveState(state) && entityExists(( /** @type {?} */(state)).active, state.entities) === false;
    }
    /**
     * Check if the store supports active entity
     * @template E
     * @param {?} state
     * @return {?}
     */
    function isActiveState(state) {
        return ( /** @type {?} */(state)).hasOwnProperty('active');
    }
    /** *
     * setValue(state, 'todos.ui', { filter: {}})
      @type {?} */
    var setValue = function (obj, prop, val) {
        /** @type {?} */
        var split = prop.split('.');
        if (split.length === 1)
            return val;
        obj = __assign({}, obj);
        /** @type {?} */
        var lastIndex = split.length - 2;
        /** @type {?} */
        var removeStoreName = prop.split('.').slice(1);
        removeStoreName.reduce(function (acc, part, index) {
            if (index === lastIndex) {
                acc[part] = val;
            }
            else {
                acc[part] = __assign({}, acc[part]);
            }
            return acc && acc[part];
        }, obj);
        return obj;
    };
    /** *
     * getValue(state, 'todos.ui')
      @type {?} */
    var getValue = function (obj, prop) {
        /** return the whole state  */
        if (prop.split('.').length === 1) {
            return obj;
        }
        /** @type {?} */
        var removeStoreName = prop
            .split('.')
            .slice(1)
            .join('.');
        return removeStoreName.split('.').reduce(function (acc, part) { return acc && acc[part]; }, obj);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AkitaError = /** @class */ (function (_super) {
        __extends(AkitaError, _super);
        function AkitaError(message) {
            return _super.call(this, message) || this;
        }
        return AkitaError;
    }(Error));
    var AkitaImmutabilityError = /** @class */ (function (_super) {
        __extends(AkitaImmutabilityError, _super);
        function AkitaImmutabilityError(storeName) {
            return _super.call(this, "The new state should be immutable. Make sure to return a new immutable state. \n store: \n " + storeName) || this;
        }
        return AkitaImmutabilityError;
    }(AkitaError));
    var AkitaEntityNotExistsError = /** @class */ (function (_super) {
        __extends(AkitaEntityNotExistsError, _super);
        function AkitaEntityNotExistsError(id) {
            return _super.call(this, "Entity " + id + " does not exists") || this;
        }
        return AkitaEntityNotExistsError;
    }(AkitaError));
    var AkitaNoActiveError = /** @class */ (function (_super) {
        __extends(AkitaNoActiveError, _super);
        function AkitaNoActiveError() {
            return _super.call(this, "Active is null/undefined") || this;
        }
        return AkitaNoActiveError;
    }(AkitaError));
    var AkitaInvalidEntityState = /** @class */ (function (_super) {
        __extends(AkitaInvalidEntityState, _super);
        function AkitaInvalidEntityState() {
            return _super.call(this, "Entity state is invalid") || this;
        }
        return AkitaInvalidEntityState;
    }(AkitaError));
    var AkitaUpdateIdKeyError = /** @class */ (function (_super) {
        __extends(AkitaUpdateIdKeyError, _super);
        function AkitaUpdateIdKeyError() {
            return _super.call(this, "Updating entity id is not permitted when updating many entities") || this;
        }
        return AkitaUpdateIdKeyError;
    }(AkitaError));
    /**
     * @param {?} id
     * @param {?} entities
     * @return {?}
     */
    function assertEntityExists(id, entities) {
        if (!entityExists(id, entities)) {
            throw new AkitaEntityNotExistsError(id);
        }
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function assertActive(store) {
        if (!toBoolean(store.active)) {
            throw new AkitaNoActiveError();
        }
    }
    /**
     * @param {?} state
     * @return {?}
     */
    function assertEntityState(state) {
        /** @type {?} */
        var assertEntities = isObject(state);
        if (!assertEntities) {
            throw new AkitaInvalidEntityState();
        }
    }
    /**
     * @param {?} name
     * @param {?} className
     * @return {?}
     */
    function assertDecorator(name, className) {
        if (!name) {
            console.error("@StoreConfig({ name }) is missing in " + className);
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CRUD = /** @class */ (function () {
        function CRUD() {
        }
        /**
         * @template S, E
         * @param {?} state
         * @param {?} entities
         * @param {?} entityClass
         * @param {?} idKey
         * @return {?}
         */
        CRUD.prototype._set = /**
         * @template S, E
         * @param {?} state
         * @param {?} entities
         * @param {?} entityClass
         * @param {?} idKey
         * @return {?}
         */
            function (state, entities, entityClass, idKey) {
                /** @type {?} */
                var ids;
                /** @type {?} */
                var normalized;
                if (( /** @type {?} */(entities)).ids && ( /** @type {?} */(entities)).entities) {
                    ids = ( /** @type {?} */(entities)).ids;
                    normalized = ( /** @type {?} */(entities)).entities;
                }
                else {
                    /** @type {?} */
                    var isArray = Array.isArray(entities);
                    normalized = entities;
                    if (isArray) {
                        normalized = /** @type {?} */ (this.keyBy(/** @type {?} */ (entities), entityClass, idKey));
                    }
                    else {
                        assertEntityState(entities);
                    }
                    ids = isArray ? ( /** @type {?} */(entities)).map(function (entity) { return entity[idKey]; }) : Object.keys(/** @type {?} */ (normalized)).map(function (id) { return entities[id][idKey]; });
                }
                /** @type {?} */
                var newState = __assign({}, ( /** @type {?} */(state)), { entities: normalized, ids: ids, loading: false });
                if (resetActive(newState)) {
                    newState.active = null;
                }
                return newState;
            };
        /**
         * @template T
         * @param {?} state
         * @param {?} id
         * @param {?} entity
         * @return {?}
         */
        CRUD.prototype._replaceEntity = /**
         * @template T
         * @param {?} state
         * @param {?} id
         * @param {?} entity
         * @return {?}
         */
            function (state, id, entity) {
                var _a;
                return __assign({}, ( /** @type {?} */(state)), { entities: __assign({}, state.entities, (_a = {}, _a[id] = entity, _a)) });
            };
        /**
         * @template S, E
         * @param {?} state
         * @param {?} entities
         * @param {?} idKey
         * @return {?}
         */
        CRUD.prototype._add = /**
         * @template S, E
         * @param {?} state
         * @param {?} entities
         * @param {?} idKey
         * @return {?}
         */
            function (state, entities, idKey) {
                /** @type {?} */
                var addedEntities = {};
                /** @type {?} */
                var addedIds = [];
                for (var i = 0; i < entities.length; i++) {
                    /** @type {?} */
                    var entity = entities[i];
                    /** @type {?} */
                    var entityId = entity[idKey];
                    if (!entityExists(entityId, state.entities)) {
                        addedEntities[entityId] = entity;
                        addedIds.push(entityId);
                    }
                }
                return __assign({}, ( /** @type {?} */(state)), { entities: __assign({}, state.entities, addedEntities), ids: __spread(state.ids, addedIds) });
            };
        /**
         * @template T
         * @param {?} state
         * @param {?} ids
         * @param {?} newStateOrFn
         * @param {?} idKey
         * @return {?}
         */
        CRUD.prototype._update = /**
         * @template T
         * @param {?} state
         * @param {?} ids
         * @param {?} newStateOrFn
         * @param {?} idKey
         * @return {?}
         */
            function (state, ids, newStateOrFn, idKey) {
                /** @type {?} */
                var updatedEntities = {};
                /** @type {?} */
                var isUpdatingIdKey = false;
                /** @type {?} */
                var idToUpdate;
                for (var i = 0; i < ids.length; i++) {
                    /** @type {?} */
                    var id = ids[i];
                    idToUpdate = id;
                    assertEntityExists(id, state.entities);
                    /** @type {?} */
                    var oldEntity = state.entities[id];
                    /** @type {?} */
                    var newState = isFunction(newStateOrFn) ? newStateOrFn(oldEntity) : newStateOrFn;
                    if (newState.hasOwnProperty(idKey) && newState[idKey] !== oldEntity[idKey]) {
                        if (ids.length > 1) {
                            throw new AkitaUpdateIdKeyError();
                        }
                        isUpdatingIdKey = true;
                        idToUpdate = newState[idKey];
                    }
                    /** @type {?} */
                    var newEntity = void 0;
                    /** @type {?} */
                    var merged = __assign({}, oldEntity, newState);
                    if (isPlainObject(oldEntity)) {
                        newEntity = merged;
                    }
                    else {
                        newEntity = new oldEntity.constructor(merged);
                    }
                    updatedEntities[idToUpdate] = newEntity;
                }
                /** @type {?} */
                var updatedIds = state.ids;
                /** @type {?} */
                var stateEntities = state.entities;
                if (isUpdatingIdKey) {
                    var _a = __read(ids, 1), id_1 = _a[0];
                    var _b = state.entities, _c = id_1, deletedEntity = _b[_c], rest = __rest(_b, [typeof _c === "symbol" ? _c : _c + ""]);
                    stateEntities = rest;
                    updatedIds = state.ids.map(function (current) { return (current === id_1 ? idToUpdate : current); });
                }
                return __assign({}, ( /** @type {?} */(state)), { entities: __assign({}, stateEntities, updatedEntities), ids: updatedIds });
            };
        /**
         * @template T
         * @param {?} state
         * @param {?} ids
         * @return {?}
         */
        CRUD.prototype._remove = /**
         * @template T
         * @param {?} state
         * @param {?} ids
         * @return {?}
         */
            function (state, ids) {
                if (!ids)
                    return this._removeAll(state);
                /** @type {?} */
                var removed = ids.reduce(function (acc, id) {
                    var _a = id, entity = acc[_a], rest = __rest(acc, [typeof _a === "symbol" ? _a : _a + ""]);
                    return rest;
                }, state.entities);
                /** @type {?} */
                var newState = __assign({}, ( /** @type {?} */(state)), { entities: removed, ids: state.ids.filter(function (current) { return ids.indexOf(current) === -1; }) });
                if (resetActive(newState)) {
                    newState.active = null;
                }
                return newState;
            };
        /**
         * @template T
         * @param {?} state
         * @return {?}
         */
        CRUD.prototype._removeAll = /**
         * @template T
         * @param {?} state
         * @return {?}
         */
            function (state) {
                /** @type {?} */
                var newState = __assign({}, ( /** @type {?} */(state)), { entities: {}, ids: [], active: null });
                return newState;
            };
        /**
         * @param {?} entities
         * @param {?=} entityClass
         * @param {?=} id
         * @return {?}
         */
        CRUD.prototype.keyBy = /**
         * @param {?} entities
         * @param {?=} entityClass
         * @param {?=} id
         * @return {?}
         */
            function (entities, entityClass, id) {
                if (id === void 0) {
                    id = 'id';
                }
                /** @type {?} */
                var acc = {};
                for (var i = 0, len = entities.length; i < len; i++) {
                    /** @type {?} */
                    var entity = entities[i];
                    acc[entity[id]] = entityClass ? new entityClass(entity) : entity;
                }
                return acc;
            };
        return CRUD;
    }());
    /** @type {?} */
    var _crud = new CRUD();

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AkitaGlobals = /** @class */ (function () {
        function AkitaGlobals() {
            this.skipAction = false;
            this.skipTransactionMsg = false;
            this.currentT = [];
            this.activeTransactions = 0;
        }
        /**
         * @param {?} _action
         * @return {?}
         */
        AkitaGlobals.prototype.setAction = /**
         * @param {?} _action
         * @return {?}
         */
            function (_action) {
                if (this.customAction) {
                    this.currentAction = this.customAction;
                    this.customAction = null;
                    this.skipTransactionMsg = false;
                }
                else {
                    if (this.activeTransactions === 0) {
                        this.currentAction = _action;
                    }
                }
                if (this.activeTransactions > 0) {
                    this.currentT.push(_action);
                }
            };
        /**
         * @param {?} action
         * @param {?=} skipTransactionMsg
         * @return {?}
         */
        AkitaGlobals.prototype.setCustomAction = /**
         * @param {?} action
         * @param {?=} skipTransactionMsg
         * @return {?}
         */
            function (action, skipTransactionMsg) {
                if (skipTransactionMsg === void 0) {
                    skipTransactionMsg = false;
                }
                this.currentAction = this.customAction = action;
                this.skipTransactionMsg = skipTransactionMsg;
            };
        /**
         * @param {?=} skip
         * @return {?}
         */
        AkitaGlobals.prototype.setSkipAction = /**
         * @param {?=} skip
         * @return {?}
         */
            function (skip) {
                if (skip === void 0) {
                    skip = true;
                }
                this.skipAction = skip;
            };
        return AkitaGlobals;
    }());
    /** @type {?} */
    var __globalState = new AkitaGlobals();

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Start a new transaction batch
     * @return {?}
     */
    function startBatch() {
        if (!isTransactionInProcess()) {
            __globalState.batchTransaction = new rxjs.Subject();
        }
        __globalState.activeTransactions++;
    }
    /**
     * End the transaction
     * @return {?}
     */
    function endBatch() {
        if (--__globalState.activeTransactions === 0) {
            __globalState.batchTransaction.next(true);
            __globalState.batchTransaction.complete();
        }
    }
    /**
     * Whether we're inside batch
     * @return {?}
     */
    function isTransactionInProcess() {
        return __globalState.activeTransactions > 0;
    }
    /**
     *
     * @return {?}
     */
    function commit() {
        return __globalState.batchTransaction ? __globalState.batchTransaction.asObservable() : rxjs.of(true);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} o
     * @return {?}
     */
    function deepFreeze(o) {
        Object.freeze(o);
        Object.getOwnPropertyNames(o).forEach(function (prop) {
            if (o.hasOwnProperty(prop) && o[prop] !== null && (typeof o[prop] === 'object' || typeof o[prop] === 'function') && !Object.isFrozen(o[prop])) {
                deepFreeze(o[prop]);
            }
        });
        return o;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var configKey = 'akitaConfig';
    /**
     * @param {?} metadata
     * @return {?}
     */
    function StoreConfig(metadata) {
        return function (constructor) {
            constructor[configKey] = { idKey: 'id' };
            for (var i = 0, keys = Object.keys(metadata); i < keys.length; i++) {
                /** @type {?} */
                var key = keys[i];
                /* name is preserved read only key */
                if (key === 'name') {
                    constructor[configKey]['storeName'] = metadata[key];
                }
                else {
                    constructor[configKey][key] = metadata[key];
                }
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** *
     * Whether we are in dev mode
      @type {?} */
    var __DEV__ = true;
    /** @type {?} */
    var __stores__ = {};
    /** @type {?} */
    var rootDispatcher = new rxjs.ReplaySubject();
    /**
     * @param {?} storeName
     * @param {?=} initialState
     * @return {?}
     */
    function nextState(storeName, initialState) {
        if (initialState === void 0) {
            initialState = false;
        }
        return {
            type: 1 /* NEW_STATE */,
            payload: {
                name: storeName,
                initialState: initialState
            }
        };
    }
    /**
     * Enable production mode to disable objectFreeze
     * @return {?}
     */
    function enableAkitaProdMode() {
        __DEV__ = false;
    }
    /**
     * @return {?}
     */
    function isDev() {
        return __DEV__;
    }
    /**
     * The Root Store that every sub store needs to inherit and
     * invoke `super` with the initial state.
     * @template S
     */
    var /**
     * The Root Store that every sub store needs to inherit and
     * invoke `super` with the initial state.
     * @template S
     */ Store = /** @class */ (function () {
        /**
         *
         * Initial the store with the state
         */
        function Store(initialState) {
            /**
             * Whether we are inside transaction *
             */
            this.inTransaction = false;
            this._isPristine = true;
            __globalState.setAction({ type: '@@INIT' });
            __stores__[this.storeName] = this;
            this.setState(function () { return initialState; });
            rootDispatcher.next({
                type: 0 /* NEW_STORE */,
                payload: { store: this }
            });
            isDev() && assertDecorator(this.storeName, this.constructor.name);
        }
        /**
         * @param {?=} loading
         * @return {?}
         */
        Store.prototype.setLoading = /**
         * @param {?=} loading
         * @return {?}
         */
            function (loading) {
                if (loading === void 0) {
                    loading = false;
                }
                if (loading !== ( /** @type {?} */(this._value())).loading) {
                    isDev() && __globalState.setAction({ type: 'Set Loading' });
                    this.setState(function (s) { return ( /** @type {?} */(__assign({}, ( /** @type {?} */(s)), { loading: loading }))); });
                }
            };
        /**
         * Update the store's error state.
         */
        /**
         * Update the store's error state.
         * @template T
         * @param {?} error
         * @return {?}
         */
        Store.prototype.setError = /**
         * Update the store's error state.
         * @template T
         * @param {?} error
         * @return {?}
         */
            function (error) {
                if (error !== ( /** @type {?} */(this._value())).error) {
                    isDev() && __globalState.setAction({ type: 'Set Error' });
                    this.setState(function (s) { return ( /** @type {?} */(__assign({}, ( /** @type {?} */(s)), { error: error }))); });
                }
            };
        /**
         * Select a slice from the store
         *
         * @example
         * this.store.select(state => state.entities)
         *
         */
        /**
         * Select a slice from the store
         *
         * \@example
         * this.store.select(state => state.entities)
         *
         * @template R
         * @param {?} project
         * @return {?}
         */
        Store.prototype._select = /**
         * Select a slice from the store
         *
         * \@example
         * this.store.select(state => state.entities)
         *
         * @template R
         * @param {?} project
         * @return {?}
         */
            function (project) {
                return this.store$.pipe(operators.map(project), operators.distinctUntilChanged());
            };
        /**
         * @return {?}
         */
        Store.prototype._value = /**
         * @return {?}
         */
            function () {
                return this.storeValue;
            };
        Object.defineProperty(Store.prototype, "config", {
            get: /**
             * @return {?}
             */ function () {
                return this.constructor[configKey];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Store.prototype, "storeName", {
            /**
             * Get the store name
             */
            get: /**
             * Get the store name
             * @return {?}
             */ function () {
                return this.config && this.config['storeName'];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Store.prototype, "isPristine", {
            get: /**
             * @return {?}
             */ function () {
                return this._isPristine;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * `setState()` is the only way to update a store; It receives a callback function,
         * which gets the current state, and returns a new immutable state,
         * which will be the new value of the store.
         */
        /**
         * `setState()` is the only way to update a store; It receives a callback function,
         * which gets the current state, and returns a new immutable state,
         * which will be the new value of the store.
         * @param {?} newStateFn
         * @param {?=} _rootDispatcher
         * @return {?}
         */
        Store.prototype.setState = /**
         * `setState()` is the only way to update a store; It receives a callback function,
         * which gets the current state, and returns a new immutable state,
         * which will be the new value of the store.
         * @param {?} newStateFn
         * @param {?=} _rootDispatcher
         * @return {?}
         */
            function (newStateFn, _rootDispatcher) {
                if (_rootDispatcher === void 0) {
                    _rootDispatcher = true;
                }
                /** @type {?} */
                var prevState = this._value();
                this.storeValue = __DEV__ ? deepFreeze(newStateFn(this._value())) : newStateFn(this._value());
                if (prevState === this.storeValue) {
                    throw new AkitaImmutabilityError(this.storeName);
                }
                if (!this.store) {
                    this.store = new rxjs.BehaviorSubject(this.storeValue);
                    rootDispatcher.next(nextState(this.storeName, true));
                    return;
                }
                if (isTransactionInProcess()) {
                    this.handleTransaction();
                    return;
                }
                this.dispatch(this.storeValue, _rootDispatcher);
            };
        /**
         * @param {?} newStateOrId
         * @param {?=} newState
         * @return {?}
         */
        Store.prototype.update = /**
         * @param {?} newStateOrId
         * @param {?=} newState
         * @return {?}
         */
            function (newStateOrId, newState) {
                __globalState.setAction({ type: 'Update Store' });
                this.setState(function (state) {
                    /** @type {?} */
                    var value = isFunction(newStateOrId) ? newStateOrId(state) : newStateOrId;
                    /** @type {?} */
                    var merged = Object.assign({}, state, value);
                    return isPlainObject(state) ? merged : new ( /** @type {?} */(state)).constructor(merged);
                });
                this.setDirty();
            };
        /**
         * Sets the store to a pristine state.
         */
        /**
         * Sets the store to a pristine state.
         * @return {?}
         */
        Store.prototype.setPristine = /**
         * Sets the store to a pristine state.
         * @return {?}
         */
            function () {
                this._isPristine = true;
            };
        /**
         * Sets the store to a dirty state, indicating that it is not pristine.
         */
        /**
         * Sets the store to a dirty state, indicating that it is not pristine.
         * @return {?}
         */
        Store.prototype.setDirty = /**
         * Sets the store to a dirty state, indicating that it is not pristine.
         * @return {?}
         */
            function () {
                this._isPristine = false;
            };
        /**
         * @param {?} state
         * @param {?=} _rootDispatcher
         * @return {?}
         */
        Store.prototype.dispatch = /**
         * @param {?} state
         * @param {?=} _rootDispatcher
         * @return {?}
         */
            function (state, _rootDispatcher) {
                if (_rootDispatcher === void 0) {
                    _rootDispatcher = true;
                }
                this.store.next(state);
                if (_rootDispatcher) {
                    rootDispatcher.next(nextState(this.storeName));
                    isDev() && __globalState.setAction({ type: 'Set State' });
                }
            };
        Object.defineProperty(Store.prototype, "store$", {
            get: /**
             * @return {?}
             */ function () {
                return this.store.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * When the transaction ends dispatch the final value once
         * @return {?}
         */
        Store.prototype.watchTransaction = /**
         * When the transaction ends dispatch the final value once
         * @return {?}
         */
            function () {
                var _this = this;
                commit().subscribe(function () {
                    _this.inTransaction = false;
                    if (isDev() && !__globalState.skipTransactionMsg) {
                        __globalState.setAction({ type: '@Transaction' });
                    }
                    _this.dispatch(_this._value());
                    __globalState.currentT = [];
                    __globalState.skipTransactionMsg = false;
                });
            };
        /**
         * Listen to the transaction stream
         * @return {?}
         */
        Store.prototype.handleTransaction = /**
         * Listen to the transaction stream
         * @return {?}
         */
            function () {
                if (!this.inTransaction) {
                    this.watchTransaction();
                    this.inTransaction = true;
                }
            };
        /**
         * @return {?}
         */
        Store.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this === __stores__[this.storeName]) {
                    delete __stores__[this.storeName];
                }
            };
        return Store;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // unsupported: template constraints.
    /**
     * The Root Store that every sub store needs to inherit and
     * invoke `super` with the initial state.
     * @template S, E
     */
    var  
    // unsupported: template constraints.
    /**
     * The Root Store that every sub store needs to inherit and
     * invoke `super` with the initial state.
     * @template S, E
     */
    EntityStore = /** @class */ (function (_super) {
        __extends(EntityStore, _super);
        /**
         *
         * Initiate the store with the state
         */
        function EntityStore(initialState, options) {
            if (initialState === void 0) {
                initialState = {};
            }
            if (options === void 0) {
                options = {};
            }
            var _this = _super.call(this, __assign({}, getInitialEntitiesState(), initialState)) || this;
            _this.options = options;
            return _this;
        }
        Object.defineProperty(EntityStore.prototype, "entities", {
            get: /**
             * @return {?}
             */ function () {
                return this._value().entities;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EntityStore.prototype, "idKey", {
            get: /**
             * @return {?}
             */ function () {
                /** *
                 * backward compatibility
                  @type {?} */
                var newIdKey = this.config && this.config.idKey;
                if (!newIdKey) {
                    return this.options.idKey || 'id';
                }
                return newIdKey;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         * Replace current collection with provided collection
         *
         * @example
         * this.store.set([Entity, Entity]);
         * this.store.set({1: Entity, 2: Entity});
         * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });
         *
         */
        /**
         *
         * Replace current collection with provided collection
         *
         * \@example
         * this.store.set([Entity, Entity]);
         * this.store.set({1: Entity, 2: Entity});
         * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });
         *
         * @param {?} entities
         * @param {?=} options
         * @return {?}
         */
        EntityStore.prototype.set = /**
         *
         * Replace current collection with provided collection
         *
         * \@example
         * this.store.set([Entity, Entity]);
         * this.store.set({1: Entity, 2: Entity});
         * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });
         *
         * @param {?} entities
         * @param {?=} options
         * @return {?}
         */
            function (entities, options) {
                var _this = this;
                if (options === void 0) {
                    options = {};
                }
                isDev() && __globalState.setAction({ type: 'Set Entities' });
                this.setState(function (state) { return _crud._set(state, entities, options.entityClass, _this.idKey); });
                this.setDirty();
            };
        /**
         * Create or replace an entity in the store.
         *
         * @example
         * this.store.createOrReplace(3, Entity);
         *
         */
        /**
         * Create or replace an entity in the store.
         *
         * \@example
         * this.store.createOrReplace(3, Entity);
         *
         * @param {?} id
         * @param {?} entity
         * @return {?}
         */
        EntityStore.prototype.createOrReplace = /**
         * Create or replace an entity in the store.
         *
         * \@example
         * this.store.createOrReplace(3, Entity);
         *
         * @param {?} id
         * @param {?} entity
         * @return {?}
         */
            function (id, entity) {
                if (!entityExists(id, this._value().entities)) {
                    if (!entity[this.idKey]) {
                        entity[this.idKey] = id;
                    }
                    return this.add(entity);
                }
                isDev() && __globalState.setAction({ type: 'Upsert Entity', entityId: [id] });
                this.setState(function (state) { return _crud._replaceEntity(state, id, entity); });
            };
        /**
         * Add an entity or entities to the store.
         *
         * @example
         * this.store.add([Entity, Entity]);
         * this.store.add(Entity);
         */
        /**
         * Add an entity or entities to the store.
         *
         * \@example
         * this.store.add([Entity, Entity]);
         * this.store.add(Entity);
         * @param {?} entities
         * @return {?}
         */
        EntityStore.prototype.add = /**
         * Add an entity or entities to the store.
         *
         * \@example
         * this.store.add([Entity, Entity]);
         * this.store.add(Entity);
         * @param {?} entities
         * @return {?}
         */
            function (entities) {
                var _this = this;
                /** @type {?} */
                var toArray = coerceArray(entities);
                if (toArray.length === 0)
                    return;
                isDev() && __globalState.setAction({ type: 'Add Entity' });
                this.setState(function (state) { return _crud._add(state, toArray, _this.idKey); });
            };
        /**
         * @param {?} idsOrFn
         * @param {?=} newStateOrFn
         * @return {?}
         */
        EntityStore.prototype.update = /**
         * @param {?} idsOrFn
         * @param {?=} newStateOrFn
         * @return {?}
         */
            function (idsOrFn, newStateOrFn) {
                var _this = this;
                /** @type {?} */
                var ids = [];
                /** @type {?} */
                var storeIds = this._value().ids;
                if (isFunction(idsOrFn)) {
                    for (var i = 0, len = storeIds.length; i < len; i++) {
                        /** @type {?} */
                        var id = storeIds[i];
                        /** @type {?} */
                        var entity = this._value().entities[id];
                        if (entity && ( /** @type {?} */(idsOrFn))(entity)) {
                            ids.push(id);
                        }
                    }
                }
                else {
                    ids = toBoolean(idsOrFn) ? coerceArray(idsOrFn) : storeIds;
                }
                if (ids.length === 0)
                    return;
                isDev() && __globalState.setAction({ type: 'Update Entity', entityId: ids });
                this.setState(function (state) {
                    return _crud._update(state, ids, newStateOrFn, _this.idKey);
                });
            };
        /**
         * An alias to update all.
         */
        /**
         * An alias to update all.
         * @param {?} state
         * @return {?}
         */
        EntityStore.prototype.updateAll = /**
         * An alias to update all.
         * @param {?} state
         * @return {?}
         */
            function (state) {
                if (this._value().ids.length === 0)
                    return;
                this.update(null, state);
            };
        /**
         * Update the root state (data which is external to the entities).
         *
         * @example
         * this.store.updateRoot({
         *   metadata: 'new metadata
         * });
         *
         *  this.store.updateRoot(state => {
         *    return {
         *      metadata: {
         *        ...state.metadata,
         *        key: 'new value'
         *      }
         *    }
         *  });
         */
        /**
         * Update the root state (data which is external to the entities).
         *
         * \@example
         * this.store.updateRoot({
         *   metadata: 'new metadata
         * });
         *
         *  this.store.updateRoot(state => {
         *    return {
         *      metadata: {
         *        ...state.metadata,
         *        key: 'new value'
         *      }
         *    }
         *  });
         * @param {?} newStateFn
         * @param {?=} action
         * @return {?}
         */
        EntityStore.prototype.updateRoot = /**
         * Update the root state (data which is external to the entities).
         *
         * \@example
         * this.store.updateRoot({
         *   metadata: 'new metadata
         * });
         *
         *  this.store.updateRoot(state => {
         *    return {
         *      metadata: {
         *        ...state.metadata,
         *        key: 'new value'
         *      }
         *    }
         *  });
         * @param {?} newStateFn
         * @param {?=} action
         * @return {?}
         */
            function (newStateFn, action) {
                /** @type {?} */
                var newState = isFunction(newStateFn) ? newStateFn(this._value()) : newStateFn;
                if (newState === this._value()) {
                    throw new AkitaImmutabilityError(this.storeName);
                }
                isDev() && __globalState.setAction(action || { type: 'Update Root' });
                this.setState(function (state) {
                    return __assign({}, ( /** @type {?} */(state)), ( /** @type {?} */(newState)));
                });
            };
        /**
         * @param {?=} idsOrFn
         * @return {?}
         */
        EntityStore.prototype.remove = /**
         * @param {?=} idsOrFn
         * @return {?}
         */
            function (idsOrFn) {
                /** @type {?} */
                var storeIds = this._value().ids;
                if (storeIds.length === 0)
                    return;
                /** @type {?} */
                var idPassed = toBoolean(idsOrFn);
                if (!idPassed)
                    this.setPristine();
                /** @type {?} */
                var ids = [];
                if (isFunction(idsOrFn)) {
                    for (var i = 0, len = storeIds.length; i < len; i++) {
                        /** @type {?} */
                        var id = storeIds[i];
                        /** @type {?} */
                        var entity = this._value().entities[id];
                        if (entity && idsOrFn(entity)) {
                            ids.push(id);
                        }
                    }
                }
                else {
                    ids = idPassed ? coerceArray(idsOrFn) : null;
                }
                if (ids && ids.length === 0)
                    return;
                isDev() && __globalState.setAction({ type: 'Remove Entity', entityId: ids });
                this.setState(function (state) {
                    return _crud._remove(state, ids);
                });
            };
        /**
         *
         * Update the active entity.
         *
         * @example
         * this.store.updateActive(active => {
         *   return {
         *     config: {
         *      ..active.config,
         *      date
         *     }
         *   }
         * })
         */
        /**
         *
         * Update the active entity.
         *
         * \@example
         * this.store.updateActive(active => {
         *   return {
         *     config: {
         *      ..active.config,
         *      date
         *     }
         *   }
         * })
         * @param {?} newStateFn
         * @return {?}
         */
        EntityStore.prototype.updateActive = /**
         *
         * Update the active entity.
         *
         * \@example
         * this.store.updateActive(active => {
         *   return {
         *     config: {
         *      ..active.config,
         *      date
         *     }
         *   }
         * })
         * @param {?} newStateFn
         * @return {?}
         */
            function (newStateFn) {
                var _this = this;
                assertActive(this._value());
                isDev() && __globalState.setAction({ type: 'Update Active Entity', entityId: this._value()["active"] });
                this.setState(function (state) {
                    /** @type {?} */
                    var activeId = state["active"];
                    /** @type {?} */
                    var newState = isFunction(newStateFn) ? newStateFn(state.entities[activeId]) : newStateFn;
                    if (newState === state) {
                        throw new AkitaImmutabilityError(_this.storeName);
                    }
                    return _crud._update(state, [activeId], newState, _this.idKey);
                });
            };
        /**
         * Set the given entity as active.
         */
        /**
         * Set the given entity as active.
         * @param {?} id
         * @return {?}
         */
        EntityStore.prototype.setActive = /**
         * Set the given entity as active.
         * @param {?} id
         * @return {?}
         */
            function (id) {
                if (id === this._value()["active"])
                    return;
                isDev() && __globalState.setAction({ type: 'Set Active Entity', entityId: id });
                this.setState(function (state) {
                    return __assign({}, ( /** @type {?} */(state)), { active: id });
                });
            };
        return EntityStore;
    }(Store));
    /** @type {?} */
    var getInitialEntitiesState = function () {
        return ( /** @type {?} */({
            entities: {},
            ids: [],
            loading: true,
            error: null
        }));
    };
    /** @type {?} */
    var getInitialActiveState = function () {
        return ( /** @type {?} */({
            active: null
        }));
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {string} */
    var Order = {
        ASC: 'asc',
        DESC: 'desc',
    };
    /**
     * @param {?} key
     * @param {?=} order
     * @return {?}
     */
    function compareValues(key, order) {
        if (order === void 0) {
            order = Order.ASC;
        }
        return function (a, b) {
            if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {
                return 0;
            }
            /** @type {?} */
            var varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];
            /** @type {?} */
            var varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];
            /** @type {?} */
            var comparison = 0;
            if (varA > varB) {
                comparison = 1;
            }
            else if (varA < varB) {
                comparison = -1;
            }
            return order == Order.DESC ? comparison * -1 : comparison;
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} fn
     * @return {?}
     */
    function memoizeOne(fn) {
        /** @type {?} */
        var lastArgs;
        /** @type {?} */
        var changed = false;
        /** @type {?} */
        var firstInit = true;
        /** @type {?} */
        var lastResult;
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (lastArgs) {
                /** If entities nor ids doesn't change return the last value */
                changed = lastArgs[1] !== args[1] || lastArgs[0] !== args[0];
            }
            if (firstInit || (changed && !firstInit)) {
                lastResult = fn.apply(this, args);
            }
            firstInit = false;
            lastArgs = args;
            return lastResult;
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var queryConfigKey = 'akitaQueryConfig';
    /**
     * @template E
     * @param {?} metadata
     * @return {?}
     */
    function QueryConfig(metadata) {
        return function (constructor) {
            constructor[queryConfigKey] = {};
            for (var i = 0, keys = Object.keys(metadata); i < keys.length; i++) {
                /** @type {?} */
                var key = keys[i];
                constructor[queryConfigKey][key] = metadata[key];
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template S
     */
    var /**
     * @template S
     */ Query = /** @class */ (function () {
        function Query(store) {
            this.store = store;
            this.__store__ = store;
        }
        /**
         * @template R
         * @param {?=} project
         * @return {?}
         */
        Query.prototype.select = /**
         * @template R
         * @param {?=} project
         * @return {?}
         */
            function (project) {
                /** @type {?} */
                var state = project ? project : function (state) { return state; };
                return this.store._select(state);
            };
        /**
         * Select once and complete.
         */
        /**
         * Select once and complete.
         * @template R
         * @param {?} project
         * @return {?}
         */
        Query.prototype.selectOnce = /**
         * Select once and complete.
         * @template R
         * @param {?} project
         * @return {?}
         */
            function (project) {
                return this.select(project).pipe(operators.take(1));
            };
        /**
         * Select the store's loading state.
         */
        /**
         * Select the store's loading state.
         * @return {?}
         */
        Query.prototype.selectLoading = /**
         * Select the store's loading state.
         * @return {?}
         */
            function () {
                return this.select(function (state) { return ( /** @type {?} */(state)).loading; });
            };
        /**
         * Select the store's error state.
         */
        /**
         * Select the store's error state.
         * @return {?}
         */
        Query.prototype.selectError = /**
         * Select the store's error state.
         * @return {?}
         */
            function () {
                return this.select(function (state) { return ( /** @type {?} */(state)).error; });
            };
        /**
         * Get the raw value of the store.
         */
        /**
         * Get the raw value of the store.
         * @return {?}
         */
        Query.prototype.getSnapshot = /**
         * Get the raw value of the store.
         * @return {?}
         */
            function () {
                return this.store._value();
            };
        Object.defineProperty(Query.prototype, "isPristine", {
            /**
             *  Returns whether the state of the store is pristine (the set() method hasn't been explicitly called
             *  since the store creation, or the last time setPristine()was called).
             */
            get: /**
             *  Returns whether the state of the store is pristine (the set() method hasn't been explicitly called
             *  since the store creation, or the last time setPristine()was called).
             * @return {?}
             */ function () {
                return this.store.isPristine;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Query.prototype, "isDirty", {
            /**
             * Returns whether the state of the store is dirty (the set() method
             * or the setDirty() method has been explicitly called since the store creation,
             * or the last time setPristine() was called).
             */
            get: /**
             * Returns whether the state of the store is dirty (the set() method
             * or the setDirty() method has been explicitly called since the store creation,
             * or the last time setPristine() was called).
             * @return {?}
             */ function () {
                return !this.store.isPristine;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Query.prototype, "config", {
            get: /**
             * @return {?}
             */ function () {
                return this.constructor[queryConfigKey];
            },
            enumerable: true,
            configurable: true
        });
        return Query;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // unsupported: template constraints.
    /**
     *  An abstraction for querying the entities from the store
     * @template S, E
     */
    var  
    // unsupported: template constraints.
    /**
     *  An abstraction for querying the entities from the store
     * @template S, E
     */
    QueryEntity = /** @class */ (function (_super) {
        __extends(QueryEntity, _super);
        function QueryEntity(store) {
            var _this = _super.call(this, store) || this;
            _this.__store__ = store;
            return _this;
        }
        /**
         * @param {?=} options
         * @return {?}
         */
        QueryEntity.prototype.selectAll = /**
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                if (options === void 0) {
                    options = {
                        asObject: false
                    };
                }
                /** @type {?} */
                var selectState$ = this.select(function (state) { return state; });
                /** @type {?} */
                var selectEntities$ = this.select(function (state) { return state.entities; });
                options.sortBy = options.sortBy || (this.config && ( /** @type {?} */(this.config.sortBy)));
                options.sortByOrder = options.sortByOrder || (this.config && this.config.sortByOrder);
                return selectEntities$.pipe(operators.withLatestFrom(selectState$, function (entities, state) {
                    var ids = state.ids;
                    if (options.asObject) {
                        return toMap(ids, entities, options);
                    }
                    else {
                        if (!options.filterBy && !options.sortBy) {
                            if (!_this.memoized) {
                                _this.memoized = memoizeOne(toArray);
                            }
                            return _this.memoized(state, options);
                        }
                        return toArray(state, options);
                    }
                }));
            };
        /**
         * @param {?=} options
         * @return {?}
         */
        QueryEntity.prototype.getAll = /**
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                if (options === void 0) {
                    options = { asObject: false, filterBy: undefined, limitTo: undefined };
                }
                /** @type {?} */
                var state = this.getSnapshot();
                if (options.asObject) {
                    return toMap(state.ids, state.entities, options, true);
                }
                return toArray(state, options);
            };
        /**
         * Select multiple entities from the store.
         *
         * @example
         * this.store.selectMany([1,2]);
         */
        /**
         * Select multiple entities from the store.
         *
         * \@example
         * this.store.selectMany([1,2]);
         * @param {?} ids
         * @param {?=} options
         * @return {?}
         */
        QueryEntity.prototype.selectMany = /**
         * Select multiple entities from the store.
         *
         * \@example
         * this.store.selectMany([1,2]);
         * @param {?} ids
         * @param {?=} options
         * @return {?}
         */
            function (ids, options) {
                var _this = this;
                if (options === void 0) {
                    options = {};
                }
                /** @type {?} */
                var filterUndefined = isUndefined(options.filterUndefined) ? true : options.filterUndefined;
                /** @type {?} */
                var entities = ids.map(function (id) { return _this.selectEntity(id); });
                return rxjs.combineLatest(entities).pipe(operators.map(function (entities) {
                    return filterUndefined ? entities.filter(function (val) { return !isUndefined(val); }) : entities;
                }), operators.auditTime(0));
            };
        /**
         * @template R
         * @param {?} id
         * @param {?=} project
         * @return {?}
         */
        QueryEntity.prototype.selectEntity = /**
         * @template R
         * @param {?} id
         * @param {?=} project
         * @return {?}
         */
            function (id, project) {
                var _this = this;
                if (!project) {
                    return this._byId(id);
                }
                return this.select(function (state) {
                    if (_this.hasEntity(id)) {
                        return project(_this.getEntity(id));
                    }
                    return undefined;
                });
            };
        /**
         * Get an entity by id
         *
         * @example
         * this.store.getEntity(1);
         */
        /**
         * Get an entity by id
         *
         * \@example
         * this.store.getEntity(1);
         * @param {?} id
         * @return {?}
         */
        QueryEntity.prototype.getEntity = /**
         * Get an entity by id
         *
         * \@example
         * this.store.getEntity(1);
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.getSnapshot().entities[id];
            };
        /**
         * Select the active entity's id.
         */
        /**
         * Select the active entity's id.
         * @return {?}
         */
        QueryEntity.prototype.selectActiveId = /**
         * Select the active entity's id.
         * @return {?}
         */
            function () {
                return this.select(function (state) { return ( /** @type {?} */(state)).active; });
            };
        /**
         * Get the active id
         */
        /**
         * Get the active id
         * @return {?}
         */
        QueryEntity.prototype.getActiveId = /**
         * Get the active id
         * @return {?}
         */
            function () {
                return ( /** @type {?} */(this.getSnapshot())).active;
            };
        /**
         * @template R
         * @param {?=} project
         * @return {?}
         */
        QueryEntity.prototype.selectActive = /**
         * @template R
         * @param {?=} project
         * @return {?}
         */
            function (project) {
                var _this = this;
                return this.selectActiveId().pipe(operators.switchMap(function (activeId) { return _this.selectEntity(activeId, project); }));
            };
        /**
         * Get the active entity.
         */
        /**
         * Get the active entity.
         * @return {?}
         */
        QueryEntity.prototype.getActive = /**
         * Get the active entity.
         * @return {?}
         */
            function () {
                /** @type {?} */
                var activeId = this.getActiveId();
                return toBoolean(activeId) ? this.getEntity(activeId) : undefined;
            };
        /**
         * Select the store's entity collection length.
         */
        /**
         * Select the store's entity collection length.
         * @param {?=} predicate
         * @return {?}
         */
        QueryEntity.prototype.selectCount = /**
         * Select the store's entity collection length.
         * @param {?=} predicate
         * @return {?}
         */
            function (predicate) {
                if (isFunction(predicate)) {
                    return this.selectAll({
                        filterBy: predicate
                    }).pipe(operators.map(function (entities) { return entities.length; }));
                }
                return this.select(function (store) { return store.ids.length; });
            };
        /**
         * Get the store's entity collection length.
         */
        /**
         * Get the store's entity collection length.
         * @param {?=} predicate
         * @return {?}
         */
        QueryEntity.prototype.getCount = /**
         * Get the store's entity collection length.
         * @param {?=} predicate
         * @return {?}
         */
            function (predicate) {
                if (isFunction(predicate)) {
                    return this.getAll().filter(predicate).length;
                }
                return this.getSnapshot().ids.length;
            };
        /**
         * @param {?} projectOrId
         * @return {?}
         */
        QueryEntity.prototype.hasEntity = /**
         * @param {?} projectOrId
         * @return {?}
         */
            function (projectOrId) {
                if (isFunction(projectOrId)) {
                    return this.getAll().some(projectOrId);
                }
                return projectOrId in this.store.entities;
            };
        /**
         * @return {?}
         */
        QueryEntity.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return this.getSnapshot().ids.length === 0;
            };
        /**
         * @param {?} id
         * @return {?}
         */
        QueryEntity.prototype._byId = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                var _this = this;
                return this.select(function (state) { return _this.getEntity(id); });
            };
        /**
         * @return {?}
         */
        QueryEntity.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.memoized = null;
            };
        return QueryEntity;
    }(Query));
    /**
     * @template E, S
     * @param {?} state
     * @param {?} options
     * @return {?}
     */
    function toArray(state, options) {
        /** @type {?} */
        var arr = [];
        var ids = state.ids, entities = state.entities;
        var filterBy = options.filterBy, limitTo = options.limitTo, sortBy = options.sortBy, sortByOrder = options.sortByOrder;
        for (var i = 0; i < ids.length; i++) {
            /** @type {?} */
            var id = ids[i];
            if (!entityExists(id, entities)) {
                continue;
            }
            if (!filterBy) {
                arr.push(entities[id]);
                continue;
            }
            if (filterBy(entities[id])) {
                arr.push(entities[id]);
            }
        }
        if (sortBy) {
            /** @type {?} */
            var _sortBy_1 = isFunction(sortBy) ? sortBy : compareValues(sortBy, sortByOrder);
            arr = arr.sort(function (a, b) { return _sortBy_1(a, b, state); });
        }
        /** @type {?} */
        var length = Math.min(limitTo || arr.length, arr.length);
        return length === arr.length ? arr : arr.slice(0, length);
    }
    /**
     * @template E
     * @param {?} ids
     * @param {?} entities
     * @param {?} options
     * @param {?=} get
     * @return {?}
     */
    function toMap(ids, entities, options, get) {
        if (get === void 0) {
            get = false;
        }
        /** @type {?} */
        var map = {};
        var filterBy = options.filterBy, limitTo = options.limitTo;
        if (get && !filterBy && !limitTo) {
            return entities;
        }
        /** @type {?} */
        var length = Math.min(limitTo || ids.length, ids.length);
        if (filterBy && isUndefined(limitTo) === false) {
            /** @type {?} */
            var count = 0;
            for (var i = 0, length_1 = ids.length; i < length_1; i++) {
                if (count === limitTo)
                    break;
                /** @type {?} */
                var id = ids[i];
                if (!entityExists(id, entities)) {
                    continue;
                }
                if (filterBy(entities[id])) {
                    map[id] = entities[id];
                    count++;
                }
            }
        }
        else {
            for (var i = 0; i < length; i++) {
                /** @type {?} */
                var id = ids[i];
                if (!entityExists(id, entities)) {
                    continue;
                }
                if (!filterBy) {
                    map[id] = entities[id];
                    continue;
                }
                if (toBoolean(filterBy(entities[id]))) {
                    map[id] = entities[id];
                }
            }
        }
        return map;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     *  A logical transaction.
     *  Use this transaction to optimize the dispatch of all the stores.
     *  The following code will update the store, BUT  emits only once
     *
     * \@example
     *  applyTransaction(() => {
     *    this.todosStore.add(new Todo(1, title));
     *    this.todosStore.add(new Todo(2, title));
     *  });
     *
     * @template T
     * @param {?} action
     * @param {?=} thisArg
     * @return {?}
     */
    function applyTransaction(action, thisArg) {
        if (thisArg === void 0) {
            thisArg = undefined;
        }
        startBatch();
        try {
            return action.apply(thisArg);
        }
        finally {
            endBatch();
        }
    }
    /**
     *  A logical transaction.
     *  Use this transaction to optimize the dispatch of all the stores.
     *
     *  The following code will update the store, BUT  emits only once.
     *
     * \@example
     * \@transaction
     *  addTodos() {
     *    this.todosStore.add(new Todo(1, title));
     *    this.todosStore.add(new Todo(2, title));
     *  }
     *
     *
     * @return {?}
     */
    function transaction() {
        return function (target, propertyKey, descriptor) {
            /** @type {?} */
            var originalMethod = descriptor.value;
            descriptor.value = function () {
                var _this = this;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return applyTransaction(function () {
                    return originalMethod.apply(_this, args);
                }, this);
            };
            return descriptor;
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Adds one or more elements to the end of an array by returning
     * a new array instead of mutating the original one.
     *
     * \@example
     * const originalArray = ['a', 'b', 'c', 'd', 'e'];
     * const resultArray = push(originalArray, 'f', 'g');
     * // -> originalArray ['a', 'b', 'c', 'd', 'e']
     * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'f', 'g']
     * @template T
     * @param {?} array
     * @param {...?} elementN
     * @return {?}
     */
    function push(array) {
        var elementN = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            elementN[_i - 1] = arguments[_i];
        }
        return __spread(array, elementN);
    }
    /**
     * Deletes an element from an array by its index in the array.
     *
     * \@example
     * const originalArray = ['a', 'b', 'c', 'd', 'e'];
     * const resultArray = remove(originalArray, 2);
     * // -> originalArray ['a', 'b', 'c', 'd', 'e']
     * // -> resultArray ['a', 'b', 'd', 'e']
     * @template T
     * @param {?} array
     * @param {?} index
     * @return {?}
     */
    function remove(array, index) {
        return index >= 0 ? __spread(array.slice(0, index), array.slice(index + 1)) : __spread(array);
    }
    /**
     * Removes the last element from an array by returning
     * a new array instead of mutating the original one.
     *
     * \@example
     * const originalArray = ['a', 'b', 'c', 'd', 'e'];
     * const resultArray = pop(originalArray);
     * // -> originalArray ['a', 'b', 'c', 'd', 'e']
     * // -> resultArray ['a', 'b', 'c', 'd']
     * @template T
     * @param {?} array
     * @return {?}
     */
    function pop(array) {
        return array.slice(0, -1);
    }
    /**
     * Adds one or more elements to the beginning of an array.
     *
     * \@example
     * const originalArray = ['a', 'b', 'c', 'd', 'e'];
     * const resultArray = unshift(originalArray, 'f', 'g');
     * // -> originalArray ['a', 'b', 'c', 'd', 'e']
     * // -> resultArray ['f', 'g', 'a', 'b', 'c', 'd', 'e']
     * @template T
     * @param {?} array
     * @param {...?} elementN
     * @return {?}
     */
    function unshift(array) {
        var elementN = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            elementN[_i - 1] = arguments[_i];
        }
        return __spread(elementN, array);
    }
    /**
     * Sorts the elements of an array (not in place) and returns a sorted array.
     *
     * \@example
     * const numberArray = [20, 3, 4, 10, -3, 1, 0, 5];
     * const stringArray = ['Blue', 'Humpback', 'Beluga'];
     *
     * const resultArray = sort(numberArray, (a, b) => a - b);
     * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]
     * // -> resultArray [-3, 0, 1, 3, 4, 5, 10, 20]
     *
     * const resultArray = sort(numberArray, (a, b) => b - a);
     * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]
     * // -> resultArray [20, 10, 5, 4, 3, 1, 0, -3]
     *
     * const resultArray = sort(stringArray);
     * // -> stringArray ['Blue', 'Humpback', 'Beluga']
     * // -> resultArray ['Beluga', 'Blue', 'Humpback']
     *
     * const resultArray = sort(stringArray, (a, b) => a.toLowerCase() < b.toLowerCase());
     * // -> stringArray ['Blue', 'Humpback', 'Beluga']
     * // -> resultArray ['Humpback', 'Blue', 'Beluga']
     * @template T
     * @param {?} array
     * @param {?=} compareFunction
     * @return {?}
     */
    function sort(array, compareFunction) {
        return __spread(array).sort(compareFunction);
    }
    /**
     * Reverses an array (not in place).
     * The first array element becomes the last, and the last array element becomes the first.
     *
     * \@example
     * const originalArray = ['a', 'b', 'c', 'd', 'e'];
     * const resultArray = reverse(originalArray);
     * // -> originalArray ['a', 'b', 'c', 'd', 'e']
     * // -> resultArray ['e', 'd', 'c', 'b', 'a']
     * @template T
     * @param {?} array
     * @return {?}
     */
    function reverse(array) {
        return __spread(array).reverse();
    }
    /**
     * Swap items in the array
     *
     * \@example
     * const originalArray = ['a', 'b', 'c', 'd', 'e'];
     * const resultArray = swap(originalArray, 1, 4);
     * // -> originalArray ['a', 'b', 'c', 'd', 'e']
     * // -> resultArray ['a', 'e', 'c', 'd', 'b']
     * @template T
     * @param {?} array
     * @param {?} firstIndex
     * @param {?} secondIndex
     * @return {?}
     */
    function swap(array, firstIndex, secondIndex) {
        /** @type {?} */
        var results = array.slice();
        /** @type {?} */
        var firstItem = array[firstIndex];
        results[firstIndex] = array[secondIndex];
        results[secondIndex] = firstItem;
        return results;
    }
    /**
     * Update item in the array
     *
     * \@example
     * const originalArray = ['a', 'b', 'c', 'd', 'e'];
     * const resultArray = update(originalArray, 1, 'newItem');
     * // -> resultArray ['a', 'newItem', 'c', 'd', 'b']
     *
     * const originalArray = [{title: 1}, {title: 2}];
     * const resultArray = update(originalArray, originalArray[0], {title: 3});
     * // -> resultArray  [{title: 3}, {title: 2}];
     * @template T
     * @param {?} array
     * @param {?} indexOrItem
     * @param {?} updated
     * @return {?}
     */
    function update(array, indexOrItem, updated) {
        return array.map(function (current, idx) {
            if (typeof indexOrItem === 'number' && idx === indexOrItem) {
                return updated;
            }
            if (isObject(indexOrItem) && ( /** @type {?} */(indexOrItem)) === current) {
                return __assign({}, ( /** @type {?} */(indexOrItem)), ( /** @type {?} */(updated)));
            }
            return current;
        });
    }
    /**
     * Removes existing elements and/or adds new elements to an array.
     *
     * \@example
     * const originalArray = ['a', 'b', 'c', 'd', 'e'];
     * const resultArray = splice(originalArray, 0);
     * // -> originalArray ['a', 'b', 'c', 'd', 'e']
     * // -> resultArray []
     *
     * const originalArray = ['a', 'b', 'c', 'd', 'e'];
     * const resultArray = splice(originalArray, 0, 1);
     * // -> originalArray ['a', 'b', 'c', 'd', 'e']
     * // -> resultArray ['b', 'c', 'd', 'e']
     *
     * const originalArray = ['a', 'b', 'c', 'd', 'e'];
     * const resultArray = splice(originalArray, 0, 3);
     * // -> originalArray ['a', 'b', 'c', 'd', 'e']
     * // -> resultArray ['d', 'e']
     *
     * const originalArray = ['a', 'b', 'c', 'd', 'e'];
     * const resultArray = splice(originalArray, 0, originalArray.length);
     * // -> originalArray ['a', 'b', 'c', 'd', 'e']
     * // -> resultArray []
     *
     * const originalArray = ['a', 'b', 'c', 'd', 'e'];
     * const resultArray = splice(originalArray, 0, -3);
     * // -> originalArray ['a', 'b', 'c', 'd', 'e']
     * // -> resultArray ['a', 'b', 'c', 'd', 'e']
     *
     * const originalArray = ['a', 'b', 'c', 'd', 'e'];
     * const resultArray = splice(originalArray, 0, 0, 'lorem', 'ipsum');
     * // -> originalArray ['a', 'b', 'c', 'd', 'e']
     * // -> resultArray ['lorem', 'ipsum', 'a', 'b', 'c', 'd', 'e']
     *
     * const originalArray = ['a', 'b', 'c', 'd', 'e'];
     * const resultArray = splice(originalArray, originalArray.length, 0, 'lorem', 'ipsum');
     * // -> originalArray ['a', 'b', 'c', 'd', 'e']
     * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'lorem', 'ipsum']
     *
     * const originalArray = ['a', 'b', 'c', 'd', 'e'];
     * const resultArray = splice(originalArray, 0, 2, 'lorem', 'ipsum');
     * // -> originalArray ['a', 'b', 'c', 'd', 'e']
     * // -> resultArray ['lorem', 'ipsum', 'c', 'd', 'e']
     *
     * const originalArray = ['a', 'b', 'c', 'd', 'e'];
     * const resultArray = splice(originalArray, originalArray.length - 2, 2, 'lorem', 'ipsum');
     * // -> originalArray ['a', 'b', 'c', 'd', 'e']
     * // -> resultArray ['a', 'b', 'c', 'lorem', 'ipsum']
     * @template T
     * @param {?} array
     * @param {?=} start
     * @param {?=} deleteCount
     * @param {...?} elementN
     * @return {?}
     */
    function splice(array, start, deleteCount) {
        if (start === void 0) {
            start = array.length;
        }
        if (deleteCount === void 0) {
            deleteCount = array.length - start;
        }
        var elementN = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            elementN[_i - 3] = arguments[_i];
        }
        return __spread(array.slice(0, start), elementN, array.slice(start + (deleteCount < 0 ? 0 : deleteCount)));
    }
    /**
     * @template T
     * @param {?} arr
     * @param {?} item
     * @return {?}
     */
    function toggle(arr, item) {
        return arr.indexOf(item) > -1 ? arr.filter(function (current) { return item !== current; }) : push(arr, item);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var filterNil = function (source) { return source.pipe(operators.filter(function (value) { return value !== null && typeof value !== 'undefined'; })); };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     * @param {?} func
     * @param {?} action
     * @param {?=} thisArg
     * @return {?}
     */
    function applyAction(func, action, thisArg) {
        if (thisArg === void 0) {
            thisArg = undefined;
        }
        __globalState.setCustomAction(action, true);
        return func.apply(thisArg);
    }
    /**
     * @param {?} action
     * @param {?=} skipTransactionMsg
     * @return {?}
     */
    function action(action, skipTransactionMsg) {
        if (skipTransactionMsg === void 0) {
            skipTransactionMsg = true;
        }
        return function (target, propertyKey, descriptor) {
            /** @type {?} */
            var originalMethod = descriptor.value;
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                __globalState.setCustomAction(action, skipTransactionMsg);
                return originalMethod.apply(this, args);
            };
            return descriptor;
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} object
     * @return {?}
     */
    function serialize(object) {
        return JSON.stringify(object, function (key, value) {
            if (typeof value === 'function') {
                return value.toString();
            }
            return value;
        });
    }
    /**
     * @return {?}
     */
    function createWorker() {
        /** @type {?} */
        var blob = new Blob([
            "self.onmessage = function(e) {\n\n      function deserialize(str) {\n        return JSON.parse(str || '', function(key, value) {\n          if (value &&\n            typeof value === \"string\" &&\n            value.substr(0, 8) == \"function\") {\n            var startBody = value.indexOf('{') + 1;\n            var endBody = value.lastIndexOf('}');\n            var startArgs = value.indexOf('(') + 1;\n            var endArgs = value.indexOf(')');\n            return new Function(value.substring(startArgs, endArgs), value.substring(startBody, endBody));\n          }\n          return value;\n        });\n      }\n\n      var deserialized = deserialize(e.data);\n      var mapped = deserialized.data.map(function(d) {\n        return deserialized.factory(d);\n      });\n\n      self.postMessage(mapped);\n    }"
        ], {
            type: 'text/javascript'
        });
        /** @type {?} */
        var url = URL.createObjectURL(blob);
        return new Worker(url);
    }
    /**
     * \@example
     *   const mockTodos = Array.from({length: 10000}, (_, x) => ({id: x}));
     *
     *   of(mockTodos).pipe(mapInWorker<Todo>(createTodo))
     *   .subscribe(res => console.log(res));
     * @template T
     * @param {?} factoryFn
     * @return {?}
     */
    function mapInWorker(factoryFn) {
        return function (source) {
            return new rxjs.Observable(function (observer) {
                /** @type {?} */
                var worker = createWorker();
                worker.onmessage = function (e) {
                    observer.next(e.data);
                    observer.complete();
                    worker.terminate();
                };
                worker.onerror = function (err) {
                    observer.error(err);
                    observer.complete();
                    worker.terminate();
                };
                return source.subscribe(function (value) {
                    /** @type {?} */
                    var input = {
                        factory: factoryFn,
                        data: value
                    };
                    /** @type {?} */
                    var serialized = serialize(input);
                    worker.postMessage(serialized);
                });
            });
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SnapshotManager = /** @class */ (function () {
        function SnapshotManager() {
        }
        /**
         * Get a snapshot of the whole state or a specific stores
         * Use it ONLY for things like saving the state in the server
         */
        /**
         * Get a snapshot of the whole state or a specific stores
         * Use it ONLY for things like saving the state in the server
         * @param {?=} stores
         * @return {?}
         */
        SnapshotManager.prototype.getStoresSnapshot = /**
         * Get a snapshot of the whole state or a specific stores
         * Use it ONLY for things like saving the state in the server
         * @param {?=} stores
         * @return {?}
         */
            function (stores) {
                if (stores === void 0) {
                    stores = [];
                }
                /** @type {?} */
                var acc = {};
                /** @type {?} */
                var hasInclude = stores.length > 0;
                /** @type {?} */
                var keys = hasInclude ? stores : Object.keys(__stores__);
                for (var i = 0; i < keys.length; i++) {
                    /** @type {?} */
                    var storeName = keys[i];
                    acc[storeName] = __stores__[storeName]._value();
                }
                return acc;
            };
        /**
         * Set snapshot we get from the server
         */
        /**
         * Set snapshot we get from the server
         * @param {?} stores
         * @return {?}
         */
        SnapshotManager.prototype.setStoresSnapshot = /**
         * Set snapshot we get from the server
         * @param {?} stores
         * @return {?}
         */
            function (stores) {
                /** @type {?} */
                var normalizedStores = stores;
                if (isString(stores)) {
                    normalizedStores = JSON.parse(/** @type {?} */ (normalizedStores));
                }
                var _loop_1 = function (i, keys) {
                    /** @type {?} */
                    var storeName = keys[i];
                    if (__stores__[storeName]) {
                        __stores__[storeName].setState(function () { return normalizedStores[storeName]; });
                    }
                };
                for (var i = 0, keys = Object.keys(normalizedStores); i < keys.length; i++) {
                    _loop_1(i, keys);
                }
            };
        return SnapshotManager;
    }());
    /** @type {?} */
    var snapshotManager = new SnapshotManager();

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     * @template E, S
     */
    var /**
     * @abstract
     * @template E, S
     */ AkitaPlugin = /** @class */ (function () {
        function AkitaPlugin(query) {
            this.query = query;
        }
        /** This method is responsible for getting access to the query. */
        /**
         * This method is responsible for getting access to the query.
         * @return {?}
         */
        AkitaPlugin.prototype.getQuery = /**
         * This method is responsible for getting access to the query.
         * @return {?}
         */
            function () {
                return this.query;
            };
        /** This method is responsible for getting access to the store. */
        /**
         * This method is responsible for getting access to the store.
         * @return {?}
         */
        AkitaPlugin.prototype.getStore = /**
         * This method is responsible for getting access to the store.
         * @return {?}
         */
            function () {
                return this.getQuery().__store__;
            };
        /** This method is responsible tells whether the plugin is entityBased or not.  */
        /**
         * This method is responsible tells whether the plugin is entityBased or not.
         * @param {?} entityId
         * @return {?}
         */
        AkitaPlugin.prototype.isEntityBased = /**
         * This method is responsible tells whether the plugin is entityBased or not.
         * @param {?} entityId
         * @return {?}
         */
            function (entityId) {
                return toBoolean(entityId);
            };
        /** This method is responsible for selecting the source; it can be the whole store or one entity. */
        /**
         * This method is responsible for selecting the source; it can be the whole store or one entity.
         * @param {?} entityId
         * @return {?}
         */
        AkitaPlugin.prototype.selectSource = /**
         * This method is responsible for selecting the source; it can be the whole store or one entity.
         * @param {?} entityId
         * @return {?}
         */
            function (entityId) {
                if (this.isEntityBased(entityId)) {
                    return ( /** @type {?} */(this.getQuery())).selectEntity(entityId).pipe(filterNil);
                }
                return ( /** @type {?} */(this.getQuery())).select(function (state) { return state; });
            };
        /**
         * @param {?} entityId
         * @return {?}
         */
        AkitaPlugin.prototype.getSource = /**
         * @param {?} entityId
         * @return {?}
         */
            function (entityId) {
                if (this.isEntityBased(entityId)) {
                    return ( /** @type {?} */(this.getQuery())).getEntity(entityId);
                }
                return this.getQuery().getSnapshot();
            };
        /** This method is responsible for updating the store or one entity; it can be the whole store or one entity. */
        /**
         * This method is responsible for updating the store or one entity; it can be the whole store or one entity.
         * @param {?} newState
         * @param {?=} entityId
         * @return {?}
         */
        AkitaPlugin.prototype.updateStore = /**
         * This method is responsible for updating the store or one entity; it can be the whole store or one entity.
         * @param {?} newState
         * @param {?=} entityId
         * @return {?}
         */
            function (newState, entityId) {
                if (this.isEntityBased(entityId)) {
                    this.getStore().update(entityId, newState);
                }
                else {
                    this.getStore().setState(function (state) { return (__assign({}, state, newState)); });
                }
            };
        return AkitaPlugin;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var paginatorDefaults = {
        pagesControls: false,
        range: false,
        startWith: 1,
        cacheTimeout: undefined
    };
    /**
     * @template E
     */
    var PaginatorPlugin = /** @class */ (function (_super) {
        __extends(PaginatorPlugin, _super);
        function PaginatorPlugin(query, config) {
            if (config === void 0) {
                config = {};
            }
            var _this = _super.call(this, query) || this;
            _this.query = query;
            _this.config = config;
            /**
             * Save current filters, sorting, etc. in cache
             */
            _this.metadata = new Map();
            _this.pages = new Map();
            _this.pagination = {
                currentPage: 1,
                perPage: 0,
                total: 0,
                lastPage: 0,
                data: []
            };
            /**
             * When the user navigates to a different page and return
             * we don't want to call `clearCache` on first time.
             */
            _this.initial = false;
            /**
             * Proxy to the query loading
             */
            _this.isLoading$ = _this.query.selectLoading().pipe(operators.delay(0));
            _this.config = Object.assign(paginatorDefaults, config);
            var _a = _this.config, startWith = _a.startWith, cacheTimeout = _a.cacheTimeout;
            _this.page = new rxjs.BehaviorSubject(startWith);
            if (isObservable(cacheTimeout)) {
                _this.clearCacheSubscription = cacheTimeout.subscribe(function (_) { return _this.clearCache(); });
            }
            return _this;
        }
        Object.defineProperty(PaginatorPlugin.prototype, "pageChanges", {
            /**
             * Listen to page changes
             */
            get: /**
             * Listen to page changes
             * @return {?}
             */ function () {
                return this.page.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginatorPlugin.prototype, "currentPage", {
            /**
             * Get the current page number
             */
            get: /**
             * Get the current page number
             * @return {?}
             */ function () {
                return this.pagination.currentPage;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginatorPlugin.prototype, "isFirst", {
            /**
             * Check if current page is the first one
             */
            get: /**
             * Check if current page is the first one
             * @return {?}
             */ function () {
                return this.currentPage === 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginatorPlugin.prototype, "isLast", {
            /**
             * Check if current page is the last one
             */
            get: /**
             * Check if current page is the last one
             * @return {?}
             */ function () {
                return this.currentPage === this.pagination.lastPage;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Whether to generate an array of pages for *ngFor
         * [1, 2, 3, 4]
         */
        /**
         * Whether to generate an array of pages for *ngFor
         * [1, 2, 3, 4]
         * @return {?}
         */
        PaginatorPlugin.prototype.withControls = /**
         * Whether to generate an array of pages for *ngFor
         * [1, 2, 3, 4]
         * @return {?}
         */
            function () {
                this.config.pagesControls = true;
                return this;
            };
        /**
         * Whether to generate the `from` and `to` keys
         * [1, 2, 3, 4]
         */
        /**
         * Whether to generate the `from` and `to` keys
         * [1, 2, 3, 4]
         * @return {?}
         */
        PaginatorPlugin.prototype.withRange = /**
         * Whether to generate the `from` and `to` keys
         * [1, 2, 3, 4]
         * @return {?}
         */
            function () {
                this.config.range = true;
                return this;
            };
        /**
         * Set the loading state
         */
        /**
         * Set the loading state
         * @param {?=} value
         * @return {?}
         */
        PaginatorPlugin.prototype.setLoading = /**
         * Set the loading state
         * @param {?=} value
         * @return {?}
         */
            function (value) {
                if (value === void 0) {
                    value = true;
                }
                this.getStore().setLoading(value);
            };
        /**
         * Update the pagination object and add the page
         */
        /**
         * Update the pagination object and add the page
         * @param {?} response
         * @return {?}
         */
        PaginatorPlugin.prototype.update = /**
         * Update the pagination object and add the page
         * @param {?} response
         * @return {?}
         */
            function (response) {
                this.pagination = response;
                this.addPage(response.data);
            };
        /**
         *
         * Set the ids and add the page to store
         */
        /**
         *
         * Set the ids and add the page to store
         * @param {?} data
         * @return {?}
         */
        PaginatorPlugin.prototype.addPage = /**
         *
         * Set the ids and add the page to store
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                this.pages.set(this.currentPage, { ids: data.map(function (entity) { return entity[_this.getStore().idKey]; }) });
                this.getStore().add(data);
            };
        /**
         * Clear the cache.
         */
        /**
         * Clear the cache.
         * @return {?}
         */
        PaginatorPlugin.prototype.clearCache = /**
         * Clear the cache.
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.initial) {
                    applyAction(function () {
                        _this.getStore().remove();
                    }, { type: '@Pagination - Clear Cache' });
                    this.pages = new Map();
                }
                this.initial = false;
            };
        /**
         * @param {?} page
         * @return {?}
         */
        PaginatorPlugin.prototype.clearPage = /**
         * @param {?} page
         * @return {?}
         */
            function (page) {
                this.pages.delete(page);
            };
        /**
         * Clear the cache timeout and optionally the pages
         */
        /**
         * Clear the cache timeout and optionally the pages
         * @param {?=} __0
         * @return {?}
         */
        PaginatorPlugin.prototype.destroy = /**
         * Clear the cache timeout and optionally the pages
         * @param {?=} __0
         * @return {?}
         */
            function (_a) {
                var _b = _a === void 0 ? {} : _a, clearCache = _b.clearCache, currentPage = _b.currentPage;
                if (this.clearCacheSubscription) {
                    this.clearCacheSubscription.unsubscribe();
                }
                if (clearCache) {
                    this.clearCache();
                }
                if (!isUndefined(currentPage)) {
                    this.setPage(currentPage);
                }
                this.initial = true;
            };
        /**
         * Whether the provided page is active
         */
        /**
         * Whether the provided page is active
         * @param {?} page
         * @return {?}
         */
        PaginatorPlugin.prototype.isPageActive = /**
         * Whether the provided page is active
         * @param {?} page
         * @return {?}
         */
            function (page) {
                return this.currentPage === page;
            };
        /**
         * Set the current page
         */
        /**
         * Set the current page
         * @param {?} page
         * @return {?}
         */
        PaginatorPlugin.prototype.setPage = /**
         * Set the current page
         * @param {?} page
         * @return {?}
         */
            function (page) {
                if (page !== this.currentPage || !this.hasPage(page)) {
                    this.page.next((this.pagination.currentPage = page));
                }
            };
        /**
         * Increment current page
         */
        /**
         * Increment current page
         * @return {?}
         */
        PaginatorPlugin.prototype.nextPage = /**
         * Increment current page
         * @return {?}
         */
            function () {
                if (this.currentPage !== this.pagination.lastPage) {
                    this.setPage(this.pagination.currentPage + 1);
                }
            };
        /**
         * Decrement current page
         */
        /**
         * Decrement current page
         * @return {?}
         */
        PaginatorPlugin.prototype.prevPage = /**
         * Decrement current page
         * @return {?}
         */
            function () {
                if (this.pagination.currentPage > 1) {
                    this.setPage(this.pagination.currentPage - 1);
                }
            };
        /**
         * Set current page to last
         */
        /**
         * Set current page to last
         * @return {?}
         */
        PaginatorPlugin.prototype.setLastPage = /**
         * Set current page to last
         * @return {?}
         */
            function () {
                this.setPage(this.pagination.lastPage);
            };
        /**
         * Set current page to first
         */
        /**
         * Set current page to first
         * @return {?}
         */
        PaginatorPlugin.prototype.setFirstPage = /**
         * Set current page to first
         * @return {?}
         */
            function () {
                this.setPage(1);
            };
        /**
         * Check if page exists in cache
         */
        /**
         * Check if page exists in cache
         * @param {?} page
         * @return {?}
         */
        PaginatorPlugin.prototype.hasPage = /**
         * Check if page exists in cache
         * @param {?} page
         * @return {?}
         */
            function (page) {
                return this.pages.has(page);
            };
        /**
         * Get the current page if it's in cache, otherwise invoke the request
         */
        /**
         * Get the current page if it's in cache, otherwise invoke the request
         * @param {?} req
         * @return {?}
         */
        PaginatorPlugin.prototype.getPage = /**
         * Get the current page if it's in cache, otherwise invoke the request
         * @param {?} req
         * @return {?}
         */
            function (req) {
                var _this = this;
                /** @type {?} */
                var page = this.pagination.currentPage;
                if (this.hasPage(page)) {
                    return this.selectPage(page);
                }
                else {
                    this.setLoading(true);
                    return rxjs.from(req()).pipe(operators.switchMap(function (config) {
                        applyTransaction(function () {
                            _this.setLoading(false);
                            _this.update(config);
                        });
                        return _this.selectPage(page);
                    }));
                }
            };
        /**
         * @return {?}
         */
        PaginatorPlugin.prototype.getQuery = /**
         * @return {?}
         */
            function () {
                return this.query;
            };
        /**
         * @return {?}
         */
        PaginatorPlugin.prototype.getFrom = /**
         * @return {?}
         */
            function () {
                if (this.isFirst) {
                    return 1;
                }
                return (this.currentPage - 1) * this.pagination.perPage + 1;
            };
        /**
         * @return {?}
         */
        PaginatorPlugin.prototype.getTo = /**
         * @return {?}
         */
            function () {
                return this.currentPage * this.pagination.perPage;
            };
        /**
         * Select the page
         * @param {?} page
         * @return {?}
         */
        PaginatorPlugin.prototype.selectPage = /**
         * Select the page
         * @param {?} page
         * @return {?}
         */
            function (page) {
                var _this = this;
                return this.query.selectAll({ asObject: true }).pipe(operators.take(1), operators.map(function (entities) {
                    /** @type {?} */
                    var response = __assign({}, _this.pagination, { data: _this.pages.get(page).ids.map(function (id) { return entities[id]; }) });
                    var _a = _this.config, range = _a.range, pagesControls = _a.pagesControls;
                    if (!_this.pagination.total) {
                        response.total = response.perPage * response.lastPage;
                        _this.pagination.total = response.total;
                    }
                    if (range) {
                        response.from = _this.getFrom();
                        response.to = _this.getTo();
                    }
                    if (pagesControls) {
                        response.pageControls = generatePages(_this.pagination.total, _this.pagination.perPage);
                    }
                    return response;
                }));
            };
        __decorate([
            action({ type: '@Pagination - New Page' }, true),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], PaginatorPlugin.prototype, "update", null);
        return PaginatorPlugin;
    }(AkitaPlugin));
    /**
     * Generate an array so we can ngFor them to navigate between pages
     * @param {?} total
     * @param {?} perPage
     * @return {?}
     */
    function generatePages(total, perPage) {
        /** @type {?} */
        var len = Math.ceil(total / perPage);
        /** @type {?} */
        var arr = [];
        for (var i = 0; i < len; i++) {
            arr.push(i + 1);
        }
        return arr;
    }
    /** *
     * backward compatibility
      @type {?} */
    var Paginator = PaginatorPlugin;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     */
    var /**
     * @template T
     */ PersistNgFormPlugin = /** @class */ (function (_super) {
        __extends(PersistNgFormPlugin, _super);
        function PersistNgFormPlugin(query, factoryFnOrPath, params) {
            if (params === void 0) {
                params = {};
            }
            var _this = _super.call(this, query) || this;
            _this.query = query;
            _this.factoryFnOrPath = factoryFnOrPath;
            _this.params = params;
            _this.params = __assign({ debounceTime: 300, formKey: 'akitaForm', emitEvent: false }, params);
            _this.isKeyBased = isString(factoryFnOrPath);
            return _this;
        }
        /**
         * @param {?} form
         * @return {?}
         */
        PersistNgFormPlugin.prototype.setForm = /**
         * @param {?} form
         * @return {?}
         */
            function (form) {
                this.form = form;
                this.activate();
                return this;
            };
        /**
         * @param {?=} initialState
         * @return {?}
         */
        PersistNgFormPlugin.prototype.reset = /**
         * @param {?=} initialState
         * @return {?}
         */
            function (initialState) {
                var _a;
                /** @type {?} */
                var value;
                if (initialState) {
                    value = initialState;
                }
                else {
                    value = this.isKeyBased ? this.initialValue : ( /** @type {?} */(this)).factoryFnOrPath();
                }
                this.form.patchValue(value);
                /** @type {?} */
                var storeValue = this.isKeyBased ? setValue(this.getStore()._value(), this.getStore().storeName + "." + this.factoryFnOrPath, value) : (_a = {}, _a[this.params.formKey] = value, _a);
                this.updateStore(storeValue);
            };
        /**
         * @return {?}
         */
        PersistNgFormPlugin.prototype.activate = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var _a;
                /** @type {?} */
                var path;
                if (this.isKeyBased) {
                    path = this.getStore().storeName + "." + this.factoryFnOrPath;
                    this.initialValue = getValue(this.getStore()._value(), path);
                    this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });
                }
                else {
                    if (!( /** @type {?} */(this.getQuery().getSnapshot()))[this.params.formKey]) {
                        __globalState.setAction({ type: '@PersistNgFormPlugin activate' });
                        this.updateStore((_a = {}, _a[this.params.formKey] = ( /** @type {?} */(this)).factoryFnOrPath(), _a));
                    }
                    this.query.selectOnce(function (state) { return ( /** @type {?} */(state))[_this.params.formKey]; }).subscribe(function (formValue) { return _this.form.patchValue(formValue); });
                }
                this.formChanges = this.form.valueChanges.pipe(operators.debounceTime(this.params.debounceTime)).subscribe(function (value) {
                    __globalState.setAction({ type: '@PersistForm - Update' });
                    /** @type {?} */
                    var newState;
                    if (_this.isKeyBased) {
                        newState = function (state) { return setValue(state, path, value); };
                    }
                    else {
                        newState = function () {
                            var _a;
                            return (_a = {}, _a[_this.params.formKey] = value, _a);
                        };
                    }
                    _this.updateStore(newState(_this.getStore()._value()));
                });
            };
        /**
         * @return {?}
         */
        PersistNgFormPlugin.prototype.destroy = /**
         * @return {?}
         */
            function () {
                this.formChanges && this.formChanges.unsubscribe();
            };
        return PersistNgFormPlugin;
    }(AkitaPlugin));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var notBs = typeof localStorage === 'undefined';
    /**
     * @param {?=} params
     * @return {?}
     */
    function persistState(params) {
        if (notBs)
            return;
        /** @type {?} */
        var defaults = {
            key: 'AkitaStores',
            storage: localStorage,
            deserialize: JSON.parse,
            serialize: JSON.stringify,
            include: [],
            exclude: []
        };
        var _a = Object.assign({}, defaults, params), storage = _a.storage, deserialize = _a.deserialize, serialize = _a.serialize, include = _a.include, exclude = _a.exclude, key = _a.key;
        /** @type {?} */
        var hasInclude = include.length > 0;
        /** @type {?} */
        var hasExclude = exclude.length > 0;
        if (hasInclude && hasExclude) {
            throw new AkitaError("You can't use both include and exclude");
        }
        /** @type {?} */
        var storageState = deserialize(storage.getItem(key) || '{}');
        /** @type {?} */
        var stores = {};
        /** @type {?} */
        var acc = {};
        /**
         * @return {?}
         */
        function save() {
            storage.setItem(key, serialize(Object.assign({}, storageState, acc)));
        }
        /**
         * @param {?} storeName
         * @param {?} path
         * @return {?}
         */
        function subscribe(storeName, path) {
            stores[storeName] = __stores__[storeName]
                ._select(function (state) { return getValue(state, path); })
                .pipe(operators.skip(1))
                .subscribe(function (data) {
                acc[storeName] = data;
                save();
            });
        }
        /**
         * @param {?} storeName
         * @param {?} store
         * @param {?} path
         * @return {?}
         */
        function setInitial(storeName, store, path) {
            if (storageState[storeName]) {
                __globalState.setAction({ type: '@PersistState' });
                store.setState(function (state) {
                    return setValue(state, path, storageState[storeName]);
                });
                if (store.setDirty) {
                    store.setDirty();
                }
            }
        }
        /** @type {?} */
        var subscription = rootDispatcher.subscribe(function (action) {
            if (action.type === 0 /* NEW_STORE */) {
                /** @type {?} */
                var currentStoreName_1 = action.payload["store"].storeName;
                if (hasExclude && exclude.indexOf(currentStoreName_1) > -1 === true) {
                    return;
                }
                if (hasInclude) {
                    /** @type {?} */
                    var path = include.find(function (name) { return name.indexOf(currentStoreName_1) > -1; });
                    if (!path) {
                        return;
                    }
                    else {
                        currentStoreName_1 = path.split('.')[0];
                        setInitial(currentStoreName_1, action.payload["store"], path);
                        subscribe(currentStoreName_1, path);
                    }
                }
                else {
                    setInitial(currentStoreName_1, action.payload["store"], currentStoreName_1);
                    subscribe(currentStoreName_1, currentStoreName_1);
                }
            }
        });
        return {
            destroy: /**
             * @return {?}
             */ function () {
                subscription.unsubscribe();
                for (var i = 0, keys = Object.keys(stores); i < keys.length; i++) {
                    /** @type {?} */
                    var storeName = keys[i];
                    stores[storeName].unsubscribe();
                }
                stores = {};
            },
            clear: /**
             * @return {?}
             */ function () {
                storage.clear();
            },
            clearStore: /**
             * @param {?} storeName
             * @return {?}
             */ function (storeName) {
                /** @type {?} */
                var storageState = deserialize(storage.getItem(key) || '{}');
                if (storageState[storeName]) {
                    delete storageState[storeName];
                    storage.setItem(key, serialize(storageState));
                }
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} ngZoneOrOptions
     * @param {?=} options
     * @return {?}
     */
    function akitaDevtools(ngZoneOrOptions, options) {
        if (options === void 0) {
            options = {};
        }
        if (!( /** @type {?} */(window)).__REDUX_DEVTOOLS_EXTENSION__) {
            return;
        }
        /** @type {?} */
        var isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];
        if (!isAngular) {
            ngZoneOrOptions = ngZoneOrOptions || {};
            ( /** @type {?} */(ngZoneOrOptions)).run = function (cb) { return cb(); };
            options = /** @type {?} */ (ngZoneOrOptions);
        }
        /** @type {?} */
        var defaultOptions = { name: 'Akita' };
        /** @type {?} */
        var merged = Object.assign({}, defaultOptions, options);
        /** @type {?} */
        var devTools = ( /** @type {?} */(window)).__REDUX_DEVTOOLS_EXTENSION__.connect(merged);
        /** @type {?} */
        var appState = {};
        rootDispatcher.subscribe(function (action) {
            var _a;
            if (action.type === 1 /* NEW_STATE */) {
                if (__globalState.skipAction) {
                    __globalState.setSkipAction(false);
                    return;
                }
                appState = __assign({}, appState, (_a = {}, _a[action.payload["name"]] = __stores__[action.payload["name"]]._value(), _a));
                var _b = __globalState.currentAction, type = _b.type, entityId = _b.entityId;
                /** @type {?} */
                var storeName = capitalize(action.payload["name"]);
                /** @type {?} */
                var msg = isDefined(entityId) ? "[" + storeName + "] - " + type + " (ids: " + entityId + ")" : "[" + storeName + "] - " + type;
                if (options.logTrace) {
                    console.group(msg);
                    console.trace();
                    console.groupEnd();
                }
                devTools.send({ type: msg, transaction: __globalState.currentT.map(function (t) { return t.type; }) }, appState);
            }
        });
        devTools.subscribe(function (message) {
            if (message.type === 'ACTION') {
                var _a = __read(message.payload.split('.'), 1), storeName_1 = _a[0];
                if (__stores__[storeName_1]) {
                    ( /** @type {?} */(ngZoneOrOptions)).run(function () {
                        /** @type {?} */
                        var funcCall = message.payload.replace(storeName_1, "this['" + storeName_1 + "']");
                        try {
                            new Function("" + funcCall).call(__stores__);
                        }
                        catch (e) {
                            console.warn('Unknown Method ☹️');
                        }
                    });
                }
            }
            if (message.type === 'DISPATCH') {
                /** @type {?} */
                var payloadType = message.payload.type;
                if (payloadType === 'COMMIT') {
                    devTools.init(appState);
                    return;
                }
                if (message.state) {
                    /** @type {?} */
                    var rootState_1 = JSON.parse(message.state);
                    var _loop_1 = function (i, keys) {
                        /** @type {?} */
                        var storeName = keys[i];
                        if (__stores__[storeName]) {
                            ( /** @type {?} */(ngZoneOrOptions)).run(function () {
                                __stores__[storeName].setState(function () { return rootState_1[storeName]; }, false);
                            });
                        }
                    };
                    for (var i = 0, keys = Object.keys(rootState_1); i < keys.length; i++) {
                        _loop_1(i, keys);
                    }
                }
            }
        });
    }
    /**
     * @param {?} string
     * @return {?}
     */
    function capitalize(string) {
        return string && string.charAt(0).toUpperCase() + string.slice(1);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ɵ0 = function (plugin) { return plugin.destroy(); };
    /** @type {?} */
    var defaultActions = { beforeRemove: ɵ0 };
    /**
     * @abstract
     * @template E, P
     */
    var /**
     * @abstract
     * @template E, P
     */ EntityCollectionPlugin = /** @class */ (function () {
        function EntityCollectionPlugin(query, entityIds) {
            this.query = query;
            this.entityIds = entityIds;
            this.entities = new Map();
        }
        /**
         * Get the entity plugin instance.
         */
        /**
         * Get the entity plugin instance.
         * @param {?} id
         * @return {?}
         */
        EntityCollectionPlugin.prototype.getEntity = /**
         * Get the entity plugin instance.
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.entities.get(id);
            };
        /**
         * Whether the entity plugin exist.
         */
        /**
         * Whether the entity plugin exist.
         * @param {?} id
         * @return {?}
         */
        EntityCollectionPlugin.prototype.hasEntity = /**
         * Whether the entity plugin exist.
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.entities.has(id);
            };
        /**
         * Remove the entity plugin instance.
         */
        /**
         * Remove the entity plugin instance.
         * @param {?} id
         * @return {?}
         */
        EntityCollectionPlugin.prototype.removeEntity = /**
         * Remove the entity plugin instance.
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.entities.delete(id);
            };
        /**
         * Set the entity plugin instance.
         */
        /**
         * Set the entity plugin instance.
         * @param {?} id
         * @param {?} plugin
         * @return {?}
         */
        EntityCollectionPlugin.prototype.createEntity = /**
         * Set the entity plugin instance.
         * @param {?} id
         * @param {?} plugin
         * @return {?}
         */
            function (id, plugin) {
                return this.entities.set(id, plugin);
            };
        /**
         * If the user passes `entityIds` we take them; otherwise, we take all.
         */
        /**
         * If the user passes `entityIds` we take them; otherwise, we take all.
         * @return {?}
         */
        EntityCollectionPlugin.prototype.getIds = /**
         * If the user passes `entityIds` we take them; otherwise, we take all.
         * @return {?}
         */
            function () {
                return isUndefined(this.entityIds) ? this.query.getSnapshot().ids : coerceArray(this.entityIds);
            };
        /**
         * When you call one of the plugin methods, you can pass id/ids or undefined which means all.
         */
        /**
         * When you call one of the plugin methods, you can pass id/ids or undefined which means all.
         * @param {?=} ids
         * @return {?}
         */
        EntityCollectionPlugin.prototype.resolvedIds = /**
         * When you call one of the plugin methods, you can pass id/ids or undefined which means all.
         * @param {?=} ids
         * @return {?}
         */
            function (ids) {
                return isUndefined(ids) ? this.getIds() : coerceArray(ids);
            };
        /**
         * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.
         *
         * For example in your plugin you may do the following:
         *
         * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));
         */
        /**
         * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.
         *
         * For example in your plugin you may do the following:
         *
         * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));
         * @param {?} ids
         * @param {?=} actions
         * @return {?}
         */
        EntityCollectionPlugin.prototype.rebase = /**
         * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.
         *
         * For example in your plugin you may do the following:
         *
         * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));
         * @param {?} ids
         * @param {?=} actions
         * @return {?}
         */
            function (ids, actions) {
                var _this = this;
                if (actions === void 0) {
                    actions = defaultActions;
                }
                /**
                     *
                     * If the user passes `entityIds` & we have new ids check if we need to add/remove instances.
                     *
                     * This phase will be called only upon update.
                     */
                if (toBoolean(ids)) {
                    /**
                           * Which means all
                           */
                    if (isUndefined(this.entityIds)) {
                        for (var i = 0, len = ids.length; i < len; i++) {
                            /** @type {?} */
                            var entityId = ids[i];
                            if (this.hasEntity(entityId) === false) {
                                isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);
                                /** @type {?} */
                                var plugin = this.instantiatePlugin(entityId);
                                this.entities.set(entityId, plugin);
                                isFunction(actions.afterAdd) && actions.afterAdd(plugin);
                            }
                        }
                        this.entities.forEach(function (plugin, entityId) {
                            if (ids.indexOf(entityId) === -1) {
                                isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);
                                _this.removeEntity(entityId);
                            }
                        });
                    }
                    else {
                        /** *
                         * Which means the user passes specific ids
                          @type {?} */
                        var _ids = coerceArray(this.entityIds);
                        for (var i = 0, len = _ids.length; i < len; i++) {
                            /** @type {?} */
                            var entityId = _ids[i];
                            /** The Entity in current ids and doesn't exist, add it. */
                            if (ids.indexOf(entityId) > -1 && this.hasEntity(entityId) === false) {
                                isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);
                                /** @type {?} */
                                var plugin = this.instantiatePlugin(entityId);
                                this.entities.set(entityId, plugin);
                                isFunction(actions.afterAdd) && actions.afterAdd(plugin);
                            }
                            else {
                                this.entities.forEach(function (plugin, entityId) {
                                    /** The Entity not in current ids and exists, remove it. */
                                    if (ids.indexOf(entityId) === -1 && _this.hasEntity(entityId) === true) {
                                        isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);
                                        _this.removeEntity(entityId);
                                    }
                                });
                            }
                        }
                    }
                }
                else {
                    /**
                           * Otherwise, start with the provided ids or all.
                           */
                    this.getIds().forEach(function (id) {
                        if (!_this.hasEntity(id))
                            _this.createEntity(id, _this.instantiatePlugin(id));
                    });
                }
            };
        /**
         * Listen for add/remove entities.
         */
        /**
         * Listen for add/remove entities.
         * @return {?}
         */
        EntityCollectionPlugin.prototype.selectIds = /**
         * Listen for add/remove entities.
         * @return {?}
         */
            function () {
                return this.query.select(function (state) { return state.ids; });
            };
        /**
         * Base method for activation, you can override it if you need to.
         */
        /**
         * Base method for activation, you can override it if you need to.
         * @param {?=} ids
         * @return {?}
         */
        EntityCollectionPlugin.prototype.activate = /**
         * Base method for activation, you can override it if you need to.
         * @param {?=} ids
         * @return {?}
         */
            function (ids) {
                this.rebase(ids);
            };
        /**
         * Loop over each id and invoke the plugin method.
         */
        /**
         * Loop over each id and invoke the plugin method.
         * @param {?} ids
         * @param {?} cb
         * @return {?}
         */
        EntityCollectionPlugin.prototype.forEachId = /**
         * Loop over each id and invoke the plugin method.
         * @param {?} ids
         * @param {?} cb
         * @return {?}
         */
            function (ids, cb) {
                /** @type {?} */
                var _ids = this.resolvedIds(ids);
                for (var i = 0, len = _ids.length; i < len; i++) {
                    /** @type {?} */
                    var id = _ids[i];
                    if (this.hasEntity(id)) {
                        cb(this.getEntity(id));
                    }
                }
            };
        return EntityCollectionPlugin;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template E, S
     */
    var /**
     * @template E, S
     */ StateHistoryPlugin = /** @class */ (function (_super) {
        __extends(StateHistoryPlugin, _super);
        function StateHistoryPlugin(query, params, _entityId) {
            if (params === void 0) {
                params = {};
            }
            var _this = _super.call(this, query) || this;
            _this.query = query;
            _this.params = params;
            _this._entityId = _entityId;
            /**
             * Allow skipping an update from outside
             */
            _this.skip = false;
            _this.history = {
                past: [],
                present: null,
                future: []
            };
            /**
             * Skip the update when redo/undo
             */
            _this.skipUpdate = false;
            params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;
            _this.activate();
            return _this;
        }
        Object.defineProperty(StateHistoryPlugin.prototype, "hasPast", {
            get: /**
             * @return {?}
             */ function () {
                return this.history.past.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StateHistoryPlugin.prototype, "hasFuture", {
            get: /**
             * @return {?}
             */ function () {
                return this.history.future.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        StateHistoryPlugin.prototype.activate = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.history.present = this.getSource(this._entityId);
                this.subscription = this.selectSource(this._entityId)
                    .pipe(operators.pairwise())
                    .subscribe(function (_a) {
                    var _b = __read(_a, 2), past = _b[0], present = _b[1];
                    if (_this.skip) {
                        _this.skip = false;
                        return;
                    }
                    if (!_this.skipUpdate) {
                        if (_this.history.past.length === _this.params.maxAge) {
                            _this.history.past = _this.history.past.slice(1);
                        }
                        _this.history.past = __spread(_this.history.past, [past]);
                        _this.history.present = present;
                    }
                });
            };
        /**
         * @return {?}
         */
        StateHistoryPlugin.prototype.undo = /**
         * @return {?}
         */
            function () {
                if (this.history.past.length > 0) {
                    var _a = this.history, past = _a.past, present = _a.present, future = _a.future;
                    /** @type {?} */
                    var previous = past[past.length - 1];
                    /** @type {?} */
                    var newPast = past.slice(0, past.length - 1);
                    this.history.past = newPast;
                    this.history.present = previous;
                    this.history.future = __spread([present], this.history.future);
                    this.update();
                }
            };
        /**
         * @return {?}
         */
        StateHistoryPlugin.prototype.redo = /**
         * @return {?}
         */
            function () {
                if (this.history.future.length > 0) {
                    var _a = this.history, past = _a.past, present = _a.present, future = _a.future;
                    /** @type {?} */
                    var next = this.history.future[0];
                    /** @type {?} */
                    var newFuture = this.history.future.slice(1);
                    this.history.past = __spread(past, [present]);
                    this.history.present = next;
                    this.history.future = newFuture;
                    this.update('Redo');
                }
            };
        /**
         * @param {?} index
         * @return {?}
         */
        StateHistoryPlugin.prototype.jumpToPast = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                if (index < 0 || index >= this.history.past.length)
                    return;
                var _a = this.history, past = _a.past, future = _a.future;
                /** *
                 *
                 * const past = [1, 2, 3, 4, 5];
                 *
                 * newPast = past.slice(0, 2) = [1, 2];
                 * present = past[index] = 3;
                 * [...past.slice(2 + 1), ...future] = [4, 5];
                 *
                  @type {?} */
                var newPast = past.slice(0, index);
                /** @type {?} */
                var newFuture = __spread(past.slice(index + 1), future);
                /** @type {?} */
                var newPresent = past[index];
                this.history.past = newPast;
                this.history.present = newPresent;
                this.history.future = newFuture;
                this.update();
            };
        /**
         * @param {?} index
         * @return {?}
         */
        StateHistoryPlugin.prototype.jumpToFuture = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                if (index < 0 || index >= this.history.future.length)
                    return;
                var _a = this.history, past = _a.past, future = _a.future;
                /** @type {?} */
                var newPast = __spread(past, future.slice(0, index));
                /** @type {?} */
                var newPresent = future[index];
                /** @type {?} */
                var newFuture = future.slice(index + 1);
                this.history.past = newPast;
                this.history.present = newPresent;
                this.history.future = newFuture;
                this.update('Redo');
            };
        /**
         * @return {?}
         */
        StateHistoryPlugin.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.history = {
                    past: [],
                    present: null,
                    future: []
                };
            };
        /**
         * @param {?=} clearHistory
         * @return {?}
         */
        StateHistoryPlugin.prototype.destroy = /**
         * @param {?=} clearHistory
         * @return {?}
         */
            function (clearHistory) {
                if (clearHistory === void 0) {
                    clearHistory = false;
                }
                if (clearHistory) {
                    this.clear();
                }
                this.subscription.unsubscribe();
            };
        /**
         * @return {?}
         */
        StateHistoryPlugin.prototype.ignoreNext = /**
         * @return {?}
         */
            function () {
                this.skip = true;
            };
        /**
         * @param {?=} action
         * @return {?}
         */
        StateHistoryPlugin.prototype.update = /**
         * @param {?=} action
         * @return {?}
         */
            function (action) {
                if (action === void 0) {
                    action = 'Undo';
                }
                this.skipUpdate = true;
                __globalState.setCustomAction({ type: "@StateHistory - " + action });
                this.updateStore(this.history.present, this._entityId);
                this.skipUpdate = false;
            };
        return StateHistoryPlugin;
    }(AkitaPlugin));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // unsupported: template constraints.
    /**
     * @template E, P
     */
    var  
    // unsupported: template constraints.
    /**
     * @template E, P
     */
    EntityStateHistoryPlugin = /** @class */ (function (_super) {
        __extends(EntityStateHistoryPlugin, _super);
        function EntityStateHistoryPlugin(query, params) {
            if (params === void 0) {
                params = {};
            }
            var _this = _super.call(this, query, params.entityIds) || this;
            _this.query = query;
            _this.params = params;
            params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;
            _this.activate();
            _this.selectIds()
                .pipe(operators.skip(1))
                .subscribe(function (ids) { return _this.activate(ids); });
            return _this;
        }
        /**
         * @param {?=} ids
         * @return {?}
         */
        EntityStateHistoryPlugin.prototype.redo = /**
         * @param {?=} ids
         * @return {?}
         */
            function (ids) {
                this.forEachId(ids, function (e) { return e.redo(); });
            };
        /**
         * @param {?=} ids
         * @return {?}
         */
        EntityStateHistoryPlugin.prototype.undo = /**
         * @param {?=} ids
         * @return {?}
         */
            function (ids) {
                this.forEachId(ids, function (e) { return e.undo(); });
            };
        /**
         * @param {?} id
         * @return {?}
         */
        EntityStateHistoryPlugin.prototype.hasPast = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                if (this.hasEntity(id)) {
                    return this.getEntity(id).hasPast;
                }
            };
        /**
         * @param {?} id
         * @return {?}
         */
        EntityStateHistoryPlugin.prototype.hasFuture = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                if (this.hasEntity(id)) {
                    return this.getEntity(id).hasFuture;
                }
            };
        /**
         * @param {?} ids
         * @param {?} index
         * @return {?}
         */
        EntityStateHistoryPlugin.prototype.jumpToFuture = /**
         * @param {?} ids
         * @param {?} index
         * @return {?}
         */
            function (ids, index) {
                this.forEachId(ids, function (e) { return e.jumpToFuture(index); });
            };
        /**
         * @param {?} ids
         * @param {?} index
         * @return {?}
         */
        EntityStateHistoryPlugin.prototype.jumpToPast = /**
         * @param {?} ids
         * @param {?} index
         * @return {?}
         */
            function (ids, index) {
                this.forEachId(ids, function (e) { return e.jumpToPast(index); });
            };
        /**
         * @param {?=} ids
         * @return {?}
         */
        EntityStateHistoryPlugin.prototype.clear = /**
         * @param {?=} ids
         * @return {?}
         */
            function (ids) {
                this.forEachId(ids, function (e) { return e.clear(); });
            };
        /**
         * @param {?=} ids
         * @param {?=} clearHistory
         * @return {?}
         */
        EntityStateHistoryPlugin.prototype.destroy = /**
         * @param {?=} ids
         * @param {?=} clearHistory
         * @return {?}
         */
            function (ids, clearHistory) {
                if (clearHistory === void 0) {
                    clearHistory = false;
                }
                this.forEachId(ids, function (e) { return e.destroy(clearHistory); });
            };
        /**
         * @param {?} id
         * @return {?}
         */
        EntityStateHistoryPlugin.prototype.instantiatePlugin = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return /** @type {?} */ (new StateHistoryPlugin(this.query, this.params, id));
            };
        return EntityStateHistoryPlugin;
    }(EntityCollectionPlugin));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var dirtyCheckDefaultParams = {
        comparator: function (head, current) { return JSON.stringify(head) !== JSON.stringify(current); }
    };
    /**
     * @template Entity, StoreState
     */
    var /**
     * @template Entity, StoreState
     */ DirtyCheckPlugin = /** @class */ (function (_super) {
        __extends(DirtyCheckPlugin, _super);
        function DirtyCheckPlugin(query, params, _entityId) {
            var _this = _super.call(this, query) || this;
            _this.query = query;
            _this.params = params;
            _this._entityId = _entityId;
            _this.dirty = new rxjs.BehaviorSubject(false);
            _this.active = false;
            _this.isDirty$ = _this.dirty.asObservable().pipe(operators.distinctUntilChanged());
            _this.params = __assign({}, dirtyCheckDefaultParams, params);
            if (_this.params.watchProperty) {
                /** @type {?} */
                var watchProp = _this.params.watchProperty;
                watchProp = coerceArray(watchProp);
                if (watchProp.includes('entities') && !watchProp.includes('ids') && query instanceof QueryEntity) {
                    watchProp.push('ids');
                }
                _this.params.watchProperty = watchProp;
            }
            return _this;
        }
        /**
         * @return {?}
         */
        DirtyCheckPlugin.prototype.getHead = /**
         * @return {?}
         */
            function () {
                return this.head;
            };
        /**
         * @return {?}
         */
        DirtyCheckPlugin.prototype.activate = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.head = this._getHead();
                /** *
                 * if we are tracking specific properties select only the relevant ones
                  @type {?} */
                var source = this.params.watchProperty
                    ? ( /** @type {?} */(this.params.watchProperty)).map(function (prop) { return _this.query.select(function (state) { return state[prop]; }).pipe(operators.map(function (val) { return ({ val: val, __akitaKey: prop }); })); })
                    : [this.selectSource(this._entityId)];
                this.subscription = rxjs.merge.apply(void 0, __spread(source)).pipe(operators.skip(1))
                    .subscribe(function (currentState) {
                    if (isUndefined(_this.head))
                        return;
                    /** *
                     * __akitaKey is used to determine if we are tracking a specific property or a store change
                      @type {?} */
                    var head = currentState.__akitaKey ? _this.head[ /** @type {?} */(currentState.__akitaKey)] : _this.head;
                    /** @type {?} */
                    var compareTo = currentState.__akitaKey ? currentState.val : currentState;
                    /** @type {?} */
                    var isChange = _this.params.comparator(head, compareTo);
                    _this.updateDirtiness(isChange);
                });
            };
        /**
         * @param {?=} params
         * @return {?}
         */
        DirtyCheckPlugin.prototype.reset = /**
         * @param {?=} params
         * @return {?}
         */
            function (params) {
                if (params === void 0) {
                    params = {};
                }
                /** @type {?} */
                var currentValue = this.head;
                if (isFunction(params.updateFn)) {
                    if (this.isEntityBased(this._entityId)) {
                        currentValue = params.updateFn(this.head, ( /** @type {?} */(this.getQuery())).getEntity(this._entityId));
                    }
                    else {
                        currentValue = params.updateFn(this.head, ( /** @type {?} */(this.getQuery())).getSnapshot());
                    }
                }
                /** *
                 * If we are watching specific props compare them, if not compare the entire store
                  @type {?} */
                var update = this.params.watchProperty ? this.compareProp(currentValue) : this._getHead() !== currentValue;
                if (update) {
                    __globalState.setCustomAction({ type: "@DirtyCheck - Revert" });
                    this.updateStore(currentValue, this._entityId);
                }
            };
        /**
         * @return {?}
         */
        DirtyCheckPlugin.prototype.setHead = /**
         * @return {?}
         */
            function () {
                if (!this.active) {
                    this.activate();
                    this.active = true;
                }
                else {
                    this.head = this._getHead();
                }
                this.updateDirtiness(false);
                return this;
            };
        /**
         * @return {?}
         */
        DirtyCheckPlugin.prototype.isDirty = /**
         * @return {?}
         */
            function () {
                return toBoolean(this.dirty.value);
            };
        /**
         * @return {?}
         */
        DirtyCheckPlugin.prototype.hasHead = /**
         * @return {?}
         */
            function () {
                return toBoolean(this.getHead());
            };
        /**
         * @return {?}
         */
        DirtyCheckPlugin.prototype.destroy = /**
         * @return {?}
         */
            function () {
                this.head = null;
                this.subscription && this.subscription.unsubscribe();
            };
        /**
         * @param {?} isDirty
         * @return {?}
         */
        DirtyCheckPlugin.prototype.updateDirtiness = /**
         * @param {?} isDirty
         * @return {?}
         */
            function (isDirty) {
                this.dirty.next(isDirty);
            };
        /**
         * @return {?}
         */
        DirtyCheckPlugin.prototype._getHead = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var head = /** @type {?} */ (this.getSource(this._entityId));
                if (this.params.watchProperty) {
                    head = ( /** @type {?} */(this.params.watchProperty)).reduce(function (_head, prop) {
                        _head[prop] = ( /** @type {?} */(head))[prop];
                        return _head;
                    }, /** @type {?} */ ({}));
                }
                return head;
            };
        /**
         * @param {?} currentState
         * @return {?}
         */
        DirtyCheckPlugin.prototype.compareProp = /**
         * @param {?} currentState
         * @return {?}
         */
            function (currentState) {
                /** @type {?} */
                var propKeys = Object.keys(currentState);
                /** @type {?} */
                var head = this._getHead();
                return propKeys.some(function (propKey) { return currentState[propKey] !== head[propKey]; });
            };
        return DirtyCheckPlugin;
    }(AkitaPlugin));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // unsupported: template constraints.
    /**
     * @template E, P
     */
    var  
    // unsupported: template constraints.
    /**
     * @template E, P
     */
    EntityDirtyCheckPlugin = /** @class */ (function (_super) {
        __extends(EntityDirtyCheckPlugin, _super);
        function EntityDirtyCheckPlugin(query, params) {
            if (params === void 0) {
                params = {};
            }
            var _this = _super.call(this, query, params.entityIds) || this;
            _this.query = query;
            _this.params = params;
            _this.isSomeDirty$ = _this.query.select(function (state) { return state.entities; })
                .pipe(operators.map(function (entities) { return _this.checkSomeDirty(entities); }));
            _this.params = __assign({}, dirtyCheckDefaultParams, params);
            _this.activate();
            _this.selectIds().pipe(operators.skip(1)).subscribe(function (ids) {
                _this.rebase(ids, { afterAdd: function (plugin) { return plugin.setHead(); } });
            });
            return _this;
        }
        /**
         * @param {?=} ids
         * @return {?}
         */
        EntityDirtyCheckPlugin.prototype.setHead = /**
         * @param {?=} ids
         * @return {?}
         */
            function (ids) {
                this.forEachId(ids, function (e) { return e.setHead(); });
                return this;
            };
        /**
         * @param {?} id
         * @return {?}
         */
        EntityDirtyCheckPlugin.prototype.hasHead = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                if (this.entities.has(id)) {
                    /** @type {?} */
                    var entity = this.getEntity(id);
                    return entity.hasHead();
                }
                return false;
            };
        /**
         * @param {?=} ids
         * @param {?=} params
         * @return {?}
         */
        EntityDirtyCheckPlugin.prototype.reset = /**
         * @param {?=} ids
         * @param {?=} params
         * @return {?}
         */
            function (ids, params) {
                if (params === void 0) {
                    params = {};
                }
                this.forEachId(ids, function (e) { return e.reset(params); });
            };
        /**
         * @param {?} id
         * @param {?=} asObservable
         * @return {?}
         */
        EntityDirtyCheckPlugin.prototype.isDirty = /**
         * @param {?} id
         * @param {?=} asObservable
         * @return {?}
         */
            function (id, asObservable) {
                if (asObservable === void 0) {
                    asObservable = true;
                }
                if (this.entities.has(id)) {
                    /** @type {?} */
                    var entity = this.getEntity(id);
                    return asObservable ? entity.isDirty$ : entity.isDirty();
                }
                return false;
            };
        /**
         * @return {?}
         */
        EntityDirtyCheckPlugin.prototype.isSomeDirty = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var entities = this.query.getAll({ asObject: true });
                return this.checkSomeDirty(entities);
            };
        /**
         * @param {?=} ids
         * @return {?}
         */
        EntityDirtyCheckPlugin.prototype.destroy = /**
         * @param {?=} ids
         * @return {?}
         */
            function (ids) {
                this.forEachId(ids, function (e) { return e.destroy(); });
            };
        /**
         * @param {?} id
         * @return {?}
         */
        EntityDirtyCheckPlugin.prototype.instantiatePlugin = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return /** @type {?} */ (new DirtyCheckPlugin(this.query, this.params, id));
            };
        /**
         * @param {?} entities
         * @return {?}
         */
        EntityDirtyCheckPlugin.prototype.checkSomeDirty = /**
         * @param {?} entities
         * @return {?}
         */
            function (entities) {
                var e_1, _a;
                /** @type {?} */
                var entitiesIds = this.resolvedIds();
                try {
                    for (var entitiesIds_1 = __values(entitiesIds), entitiesIds_1_1 = entitiesIds_1.next(); !entitiesIds_1_1.done; entitiesIds_1_1 = entitiesIds_1.next()) {
                        var id = entitiesIds_1_1.value;
                        /** @type {?} */
                        var dirty = this.params.comparator(( /** @type {?} */(this.getEntity(id))).getHead(), entities[id]);
                        if (dirty) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (entitiesIds_1_1 && !entitiesIds_1_1.done && (_a = entitiesIds_1.return))
                            _a.call(entitiesIds_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
            };
        return EntityDirtyCheckPlugin;
    }(EntityCollectionPlugin));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * \@example
     *
     * this.peopleStore.update(id, person => ({
     *   guests: increment(person.guests)
     * }));
     * @param {?} value
     * @param {?=} params
     * @return {?}
     */
    function increment(value, params) {
        if (params === void 0) {
            params = { maxValue: undefined };
        }
        if (isNumber(value) === false)
            return;
        if (params.maxValue && value === params.maxValue)
            return value;
        return value + 1;
    }
    /**
     * \@example
     *
     * this.peopleStore.update(id, person => ({
     *   guests: decrement(person.guests)
     * }));
     * @param {?} value
     * @param {?=} params
     * @return {?}
     */
    function decrement(value, params) {
        if (params === void 0) {
            params = { allowNegative: false };
        }
        if (isNumber(value) === false)
            return;
        if (params.allowNegative === false && value === 0) {
            return value;
        }
        return value - 1;
    }
    /**
     * Generate random guid
     * @return {?}
     */
    function guid() {
        return 'xxxxxx4xyx'.replace(/[xy]/g, function (c) {
            /** @type {?} */
            var r = (Math.random() * 16) | 0;
            /** @type {?} */
            var v = c == 'x' ? r : (r & 0x3) | 0x8;
            return v.toString(16);
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.__globalState = __globalState;
    exports.EntityStore = EntityStore;
    exports.getInitialEntitiesState = getInitialEntitiesState;
    exports.getInitialActiveState = getInitialActiveState;
    exports.QueryEntity = QueryEntity;
    exports.Query = Query;
    exports.enableAkitaProdMode = enableAkitaProdMode;
    exports.isDev = isDev;
    exports.__stores__ = __stores__;
    exports.rootDispatcher = rootDispatcher;
    exports.Store = Store;
    exports.applyTransaction = applyTransaction;
    exports.transaction = transaction;
    exports.push = push;
    exports.remove = remove;
    exports.pop = pop;
    exports.unshift = unshift;
    exports.sort = sort;
    exports.reverse = reverse;
    exports.swap = swap;
    exports.update = update;
    exports.splice = splice;
    exports.toggle = toggle;
    exports.filterNil = filterNil;
    exports.coerceArray = coerceArray;
    exports.isObject = isObject;
    exports.isPlainObject = isPlainObject;
    exports.isFunction = isFunction;
    exports.toBoolean = toBoolean;
    exports.isUndefined = isUndefined;
    exports.entityExists = entityExists;
    exports.noop = noop;
    exports.isObservable = isObservable;
    exports.isString = isString;
    exports.isNumber = isNumber;
    exports.isDefined = isDefined;
    exports.resetActive = resetActive;
    exports.isActiveState = isActiveState;
    exports.setValue = setValue;
    exports.getValue = getValue;
    exports.applyAction = applyAction;
    exports.action = action;
    exports.mapInWorker = mapInWorker;
    exports.memoizeOne = memoizeOne;
    exports.SnapshotManager = SnapshotManager;
    exports.snapshotManager = snapshotManager;
    exports.StoreConfig = StoreConfig;
    exports.configKey = configKey;
    exports.QueryConfig = QueryConfig;
    exports.queryConfigKey = queryConfigKey;
    exports.compareValues = compareValues;
    exports.Order = Order;
    exports.AkitaPlugin = AkitaPlugin;
    exports.PaginatorPlugin = PaginatorPlugin;
    exports.Paginator = Paginator;
    exports.PersistNgFormPlugin = PersistNgFormPlugin;
    exports.persistState = persistState;
    exports.akitaDevtools = akitaDevtools;
    exports.EntityCollectionPlugin = EntityCollectionPlugin;
    exports.StateHistoryPlugin = StateHistoryPlugin;
    exports.EntityStateHistoryPlugin = EntityStateHistoryPlugin;
    exports.dirtyCheckDefaultParams = dirtyCheckDefaultParams;
    exports.DirtyCheckPlugin = DirtyCheckPlugin;
    exports.EntityDirtyCheckPlugin = EntityDirtyCheckPlugin;
    exports.increment = increment;
    exports.decrement = decrement;
    exports.guid = guid;
    exports.ɵa = AkitaGlobals;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0b3JhbWEtYWtpdGEudW1kLmpzLm1hcCIsInNvdXJjZXMiOltudWxsLCJuZzovL0BkYXRvcmFtYS9ha2l0YS9zcmMvaW50ZXJuYWwvdXRpbHMudHMiLCJuZzovL0BkYXRvcmFtYS9ha2l0YS9zcmMvaW50ZXJuYWwvZXJyb3IudHMiLCJuZzovL0BkYXRvcmFtYS9ha2l0YS9zcmMvaW50ZXJuYWwvY3J1ZC50cyIsIm5nOi8vQGRhdG9yYW1hL2FraXRhL3NyYy9pbnRlcm5hbC9nbG9iYWwtc3RhdGUudHMiLCJuZzovL0BkYXRvcmFtYS9ha2l0YS9zcmMvaW50ZXJuYWwvdHJhbnNhY3Rpb24uaW50ZXJuYWwudHMiLCJuZzovL0BkYXRvcmFtYS9ha2l0YS9zcmMvaW50ZXJuYWwvZGVlcC1mcmVlemUudHMiLCJuZzovL0BkYXRvcmFtYS9ha2l0YS9zcmMvYXBpL3N0b3JlLWNvbmZpZy50cyIsIm5nOi8vQGRhdG9yYW1hL2FraXRhL3NyYy9hcGkvc3RvcmUudHMiLCJuZzovL0BkYXRvcmFtYS9ha2l0YS9zcmMvYXBpL2VudGl0eS1zdG9yZS50cyIsIm5nOi8vQGRhdG9yYW1hL2FraXRhL3NyYy9pbnRlcm5hbC9zb3J0LnRzIiwibmc6Ly9AZGF0b3JhbWEvYWtpdGEvc3JjL2FwaS9tZW1vaXplLnRzIiwibmc6Ly9AZGF0b3JhbWEvYWtpdGEvc3JjL2FwaS9xdWVyeS1jb25maWcudHMiLCJuZzovL0BkYXRvcmFtYS9ha2l0YS9zcmMvYXBpL3F1ZXJ5LnRzIiwibmc6Ly9AZGF0b3JhbWEvYWtpdGEvc3JjL2FwaS9xdWVyeS1lbnRpdHkudHMiLCJuZzovL0BkYXRvcmFtYS9ha2l0YS9zcmMvYXBpL3RyYW5zYWN0aW9uLnRzIiwibmc6Ly9AZGF0b3JhbWEvYWtpdGEvc3JjL2FwaS9hcnJheXMudHMiLCJuZzovL0BkYXRvcmFtYS9ha2l0YS9zcmMvYXBpL29wZXJhdG9ycy50cyIsIm5nOi8vQGRhdG9yYW1hL2FraXRhL3NyYy9pbnRlcm5hbC9hY3Rpb24udHMiLCJuZzovL0BkYXRvcmFtYS9ha2l0YS9zcmMvYXBpL3dvcmtlci50cyIsIm5nOi8vQGRhdG9yYW1hL2FraXRhL3NyYy9hcGkvc25hcHNob3QtbWFuYWdlci50cyIsIm5nOi8vQGRhdG9yYW1hL2FraXRhL3NyYy9wbHVnaW5zL3BsdWdpbi50cyIsIm5nOi8vQGRhdG9yYW1hL2FraXRhL3NyYy9wbHVnaW5zL3BhZ2luYXRvci9wYWdpbmF0b3ItcGx1Z2luLnRzIiwibmc6Ly9AZGF0b3JhbWEvYWtpdGEvc3JjL3BsdWdpbnMvcGVyc2lzdC1mb3JtL3BlcnNpc3QtbmctZm9ybS1wbHVnaW4udHMiLCJuZzovL0BkYXRvcmFtYS9ha2l0YS9zcmMvZW5oYW5jZXJzL3BlcnNpc3Qtc3RhdGUudHMiLCJuZzovL0BkYXRvcmFtYS9ha2l0YS9zcmMvZW5oYW5jZXJzL2RldnRvb2xzLnRzIiwibmc6Ly9AZGF0b3JhbWEvYWtpdGEvc3JjL3BsdWdpbnMvZW50aXR5LWNvbGxlY3Rpb24tcGx1Z2luLnRzIiwibmc6Ly9AZGF0b3JhbWEvYWtpdGEvc3JjL3BsdWdpbnMvc3RhdGUtaGlzdG9yeS9zdGF0ZS1oaXN0b3J5LXBsdWdpbi50cyIsIm5nOi8vQGRhdG9yYW1hL2FraXRhL3NyYy9wbHVnaW5zL3N0YXRlLWhpc3RvcnkvZW50aXR5LXN0YXRlLWhpc3RvcnktcGx1Z2luLnRzIiwibmc6Ly9AZGF0b3JhbWEvYWtpdGEvc3JjL3BsdWdpbnMvZGlydHktY2hlY2svZGlydHktY2hlY2stcGx1Z2luLnRzIiwibmc6Ly9AZGF0b3JhbWEvYWtpdGEvc3JjL3BsdWdpbnMvZGlydHktY2hlY2svZW50aXR5LWRpcnR5LWNoZWNrLXBsdWdpbi50cyIsIm5nOi8vQGRhdG9yYW1hL2FraXRhL3NyYy9hcGkvc3RvcmUtdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDApXHJcbiAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcbiIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFjdGl2ZVN0YXRlLCBFbnRpdHlTdGF0ZSwgSGFzaE1hcCwgSUQgfSBmcm9tICcuLi9hcGkvdHlwZXMnO1xuXG4vKiogV3JhcHMgdGhlIHByb3ZpZGVkIHZhbHVlIGluIGFuIGFycmF5LCB1bmxlc3MgdGhlIHByb3ZpZGVkIF92YWx1ZSBpcyBhbiBhcnJheS4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb2VyY2VBcnJheTxUPih2YWx1ZTogVCB8IFRbXSk6IFRbXSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbn1cblxuLyoqIENoZWNrIGlmIGEgdmFsdWUgaXMgYW4gb2JqZWN0ICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QodmFsdWU6IGFueSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB0b0Jvb2xlYW4odmFsdWUpICYmIHZhbHVlLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdPYmplY3QnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSk6IHZhbHVlIGlzIEZ1bmN0aW9uIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvQm9vbGVhbih2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGAke3ZhbHVlfWAgIT09ICdmYWxzZSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBlbnRpdHkgZXhpc3RzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbnRpdHlFeGlzdHM8RT4oaWQ6IElELCBlbnRpdGllczogSGFzaE1hcDxFPikge1xuICByZXR1cm4gZW50aXRpZXMuaGFzT3duUHJvcGVydHkoaWQpO1xufVxuXG4vKipcbiAqIE9ic2VydmFibGUgdGhhdCBlbWl0cyBlbXB0eSB2YWx1ZSBhbmQgY29tcGxldGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vb3A8VD4oKTogT2JzZXJ2YWJsZTxUPiB7XG4gIHJldHVybiBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PiB7XG4gICAgb2JzZXJ2ZXIubmV4dCgpO1xuICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNPYnNlcnZhYmxlKHZhbHVlKSB7XG4gIHJldHVybiB0b0Jvb2xlYW4odmFsdWUpICYmIGlzRnVuY3Rpb24odmFsdWUuc3Vic2NyaWJlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbDogc3RyaW5nIHwgYW55KTogdmFsIGlzIHN0cmluZyB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgIT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBhY3RpdmUgZW50aXR5IGV4aXN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldEFjdGl2ZTxFPihzdGF0ZTogRW50aXR5U3RhdGU8RT4pIHtcbiAgcmV0dXJuIGlzQWN0aXZlU3RhdGUoc3RhdGUpICYmIGVudGl0eUV4aXN0cygoc3RhdGUgYXMgQWN0aXZlU3RhdGUpLmFjdGl2ZSwgc3RhdGUuZW50aXRpZXMpID09PSBmYWxzZTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgc3RvcmUgc3VwcG9ydHMgYWN0aXZlIGVudGl0eVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNBY3RpdmVTdGF0ZTxFPihzdGF0ZTogRW50aXR5U3RhdGU8RT4pIHtcbiAgcmV0dXJuIChzdGF0ZSBhcyBBY3RpdmVTdGF0ZSkuaGFzT3duUHJvcGVydHkoJ2FjdGl2ZScpO1xufVxuXG4vKipcbiAqIHNldFZhbHVlKHN0YXRlLCAndG9kb3MudWknLCB7IGZpbHRlcjoge319KVxuICovXG5leHBvcnQgY29uc3Qgc2V0VmFsdWUgPSAob2JqOiBhbnksIHByb3A6IHN0cmluZywgdmFsOiBhbnkpID0+IHtcbiAgY29uc3Qgc3BsaXQgPSBwcm9wLnNwbGl0KCcuJyk7XG5cbiAgaWYgKHNwbGl0Lmxlbmd0aCA9PT0gMSkgcmV0dXJuIHZhbDtcblxuICBvYmogPSB7IC4uLm9iaiB9O1xuXG4gIGNvbnN0IGxhc3RJbmRleCA9IHNwbGl0Lmxlbmd0aCAtIDI7XG4gIGNvbnN0IHJlbW92ZVN0b3JlTmFtZSA9IHByb3Auc3BsaXQoJy4nKS5zbGljZSgxKTtcblxuICByZW1vdmVTdG9yZU5hbWUucmVkdWNlKChhY2MsIHBhcnQsIGluZGV4KSA9PiB7XG4gICAgaWYgKGluZGV4ID09PSBsYXN0SW5kZXgpIHtcbiAgICAgIGFjY1twYXJ0XSA9IHZhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjW3BhcnRdID0geyAuLi5hY2NbcGFydF0gfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjICYmIGFjY1twYXJ0XTtcbiAgfSwgb2JqKTtcblxuICByZXR1cm4gb2JqO1xufTtcblxuLyoqXG4gKiBnZXRWYWx1ZShzdGF0ZSwgJ3RvZG9zLnVpJylcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFZhbHVlID0gKG9iajogYW55LCBwcm9wOiBzdHJpbmcpID0+IHtcbiAgLyoqIHJldHVybiB0aGUgd2hvbGUgc3RhdGUgICovXG4gIGlmIChwcm9wLnNwbGl0KCcuJykubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuICBjb25zdCByZW1vdmVTdG9yZU5hbWUgPSBwcm9wXG4gICAgLnNwbGl0KCcuJylcbiAgICAuc2xpY2UoMSlcbiAgICAuam9pbignLicpO1xuICByZXR1cm4gcmVtb3ZlU3RvcmVOYW1lLnNwbGl0KCcuJykucmVkdWNlKChhY2M6IGFueSwgcGFydDogc3RyaW5nKSA9PiBhY2MgJiYgYWNjW3BhcnRdLCBvYmopO1xufTtcbiIsImltcG9ydCB7IGVudGl0eUV4aXN0cywgaXNPYmplY3QsIHRvQm9vbGVhbiB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgRW50aXR5U3RhdGUsIElEIH0gZnJvbSAnLi4vYXBpL3R5cGVzJztcblxuZXhwb3J0IGNsYXNzIEFraXRhRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBa2l0YUltbXV0YWJpbGl0eUVycm9yIGV4dGVuZHMgQWtpdGFFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHN0b3JlTmFtZSkge1xuICAgIHN1cGVyKGBUaGUgbmV3IHN0YXRlIHNob3VsZCBiZSBpbW11dGFibGUuIE1ha2Ugc3VyZSB0byByZXR1cm4gYSBuZXcgaW1tdXRhYmxlIHN0YXRlLiBcXG4gc3RvcmU6IFxcbiAke3N0b3JlTmFtZX1gKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQWtpdGFFbnRpdHlOb3RFeGlzdHNFcnJvciBleHRlbmRzIEFraXRhRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihpZCkge1xuICAgIHN1cGVyKGBFbnRpdHkgJHtpZH0gZG9lcyBub3QgZXhpc3RzYCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFraXRhTm9BY3RpdmVFcnJvciBleHRlbmRzIEFraXRhRXJyb3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihgQWN0aXZlIGlzIG51bGwvdW5kZWZpbmVkYCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFraXRhSW52YWxpZEVudGl0eVN0YXRlIGV4dGVuZHMgQWtpdGFFcnJvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKGBFbnRpdHkgc3RhdGUgaXMgaW52YWxpZGApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBa2l0YVVwZGF0ZUlkS2V5RXJyb3IgZXh0ZW5kcyBBa2l0YUVycm9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoYFVwZGF0aW5nIGVudGl0eSBpZCBpcyBub3QgcGVybWl0dGVkIHdoZW4gdXBkYXRpbmcgbWFueSBlbnRpdGllc2ApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRFbnRpdHlFeGlzdHMoaWQ6IElELCBlbnRpdGllcykge1xuICBpZiAoIWVudGl0eUV4aXN0cyhpZCwgZW50aXRpZXMpKSB7XG4gICAgdGhyb3cgbmV3IEFraXRhRW50aXR5Tm90RXhpc3RzRXJyb3IoaWQpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRBY3RpdmUoc3RvcmUpIHtcbiAgaWYgKCF0b0Jvb2xlYW4oc3RvcmUuYWN0aXZlKSkge1xuICAgIHRocm93IG5ldyBBa2l0YU5vQWN0aXZlRXJyb3IoKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RW50aXR5U3RhdGUoc3RhdGU6IEVudGl0eVN0YXRlPGFueT4pIHtcbiAgY29uc3QgYXNzZXJ0RW50aXRpZXMgPSBpc09iamVjdChzdGF0ZSk7XG5cbiAgaWYgKCFhc3NlcnRFbnRpdGllcykge1xuICAgIHRocm93IG5ldyBBa2l0YUludmFsaWRFbnRpdHlTdGF0ZSgpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnREZWNvcmF0b3IobmFtZTogc3RyaW5nLCBjbGFzc05hbWU6IHN0cmluZykge1xuICBpZiAoIW5hbWUpIHtcbiAgICBjb25zb2xlLmVycm9yKGBAU3RvcmVDb25maWcoeyBuYW1lIH0pIGlzIG1pc3NpbmcgaW4gJHtjbGFzc05hbWV9YCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEVudGl0aWVzLCBFbnRpdHlTdGF0ZSwgSGFzaE1hcCwgSUQsIE5ld2FibGUgfSBmcm9tICcuLi9hcGkvdHlwZXMnO1xuaW1wb3J0IHsgQWtpdGFVcGRhdGVJZEtleUVycm9yLCBhc3NlcnRFbnRpdHlFeGlzdHMsIGFzc2VydEVudGl0eVN0YXRlIH0gZnJvbSAnLi9lcnJvcic7XG5pbXBvcnQgeyBlbnRpdHlFeGlzdHMsIGlzRnVuY3Rpb24sIGlzUGxhaW5PYmplY3QsIHJlc2V0QWN0aXZlIH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBDUlVEIHtcbiAgX3NldDxTLCBFPihzdGF0ZTogUywgZW50aXRpZXM6IEVbXSB8IEhhc2hNYXA8RT4gfCBFbnRpdGllczxFPiwgZW50aXR5Q2xhc3M6IE5ld2FibGU8RT4sIGlkS2V5KTogUyB7XG4gICAgbGV0IGlkcywgbm9ybWFsaXplZDtcblxuICAgIGlmICgoZW50aXRpZXMgYXMgRW50aXRpZXM8RT4pLmlkcyAmJiAoZW50aXRpZXMgYXMgRW50aXRpZXM8RT4pLmVudGl0aWVzKSB7XG4gICAgICBpZHMgPSAoZW50aXRpZXMgYXMgRW50aXRpZXM8RT4pLmlkcztcbiAgICAgIG5vcm1hbGl6ZWQgPSAoZW50aXRpZXMgYXMgRW50aXRpZXM8RT4pLmVudGl0aWVzO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShlbnRpdGllcyk7XG4gICAgICBub3JtYWxpemVkID0gZW50aXRpZXM7XG5cbiAgICAgIGlmIChpc0FycmF5KSB7XG4gICAgICAgIG5vcm1hbGl6ZWQgPSB0aGlzLmtleUJ5KGVudGl0aWVzIGFzIEVbXSwgZW50aXR5Q2xhc3MsIGlkS2V5KSBhcyBFW107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhc3NlcnRFbnRpdHlTdGF0ZShlbnRpdGllcyk7XG4gICAgICB9XG5cbiAgICAgIGlkcyA9IGlzQXJyYXkgPyAoZW50aXRpZXMgYXMgRVtdKS5tYXAoZW50aXR5ID0+IGVudGl0eVtpZEtleV0pIDogT2JqZWN0LmtleXMobm9ybWFsaXplZCBhcyBIYXNoTWFwPEU+KS5tYXAoaWQgPT4gZW50aXRpZXNbaWRdW2lkS2V5XSk7XG4gICAgfVxuXG4gICAgY29uc3QgbmV3U3RhdGUgPSB7XG4gICAgICAuLi4oc3RhdGUgYXMgYW55KSxcbiAgICAgIGVudGl0aWVzOiBub3JtYWxpemVkLFxuICAgICAgaWRzLFxuICAgICAgbG9hZGluZzogZmFsc2VcbiAgICB9O1xuXG4gICAgaWYgKHJlc2V0QWN0aXZlKG5ld1N0YXRlKSkge1xuICAgICAgbmV3U3RhdGUuYWN0aXZlID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3U3RhdGU7XG4gIH1cblxuICBfcmVwbGFjZUVudGl0eTxUIGV4dGVuZHMgRW50aXR5U3RhdGU+KHN0YXRlOiBULCBpZDogSUQsIGVudGl0eSk6IFQge1xuICAgIHJldHVybiB7XG4gICAgICAuLi4oc3RhdGUgYXMgYW55KSxcbiAgICAgIGVudGl0aWVzOiB7XG4gICAgICAgIC4uLnN0YXRlLmVudGl0aWVzLFxuICAgICAgICBbaWRdOiBlbnRpdHlcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgX2FkZDxTIGV4dGVuZHMgRW50aXR5U3RhdGUsIEU+KHN0YXRlOiBTLCBlbnRpdGllczogRVtdLCBpZEtleSk6IFMge1xuICAgIGxldCBhZGRlZEVudGl0aWVzID0ge307XG4gICAgbGV0IGFkZGVkSWRzID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVudGl0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBlbnRpdHkgPSBlbnRpdGllc1tpXTtcbiAgICAgIGNvbnN0IGVudGl0eUlkID0gZW50aXR5W2lkS2V5XTtcblxuICAgICAgaWYgKCFlbnRpdHlFeGlzdHMoZW50aXR5SWQsIHN0YXRlLmVudGl0aWVzKSkge1xuICAgICAgICBhZGRlZEVudGl0aWVzW2VudGl0eUlkXSA9IGVudGl0eTtcbiAgICAgICAgYWRkZWRJZHMucHVzaChlbnRpdHlJZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLihzdGF0ZSBhcyBhbnkpLFxuICAgICAgZW50aXRpZXM6IHtcbiAgICAgICAgLi4uc3RhdGUuZW50aXRpZXMsXG4gICAgICAgIC4uLmFkZGVkRW50aXRpZXNcbiAgICAgIH0sXG4gICAgICBpZHM6IFsuLi5zdGF0ZS5pZHMsIC4uLmFkZGVkSWRzXVxuICAgIH07XG4gIH1cblxuICBfdXBkYXRlPFQgZXh0ZW5kcyBFbnRpdHlTdGF0ZT4oc3RhdGU6IFQsIGlkczogSURbXSwgbmV3U3RhdGVPckZuOiBvYmplY3QgfCAoKGU6IFJlYWRvbmx5PGFueT4pID0+IG9iamVjdCksIGlkS2V5OiBzdHJpbmcpOiBUIHtcbiAgICBjb25zdCB1cGRhdGVkRW50aXRpZXMgPSB7fTtcblxuICAgIGxldCBpc1VwZGF0aW5nSWRLZXkgPSBmYWxzZTtcbiAgICBsZXQgaWRUb1VwZGF0ZTogSUQ7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaWQgPSBpZHNbaV07XG4gICAgICBpZFRvVXBkYXRlID0gaWQ7XG4gICAgICBhc3NlcnRFbnRpdHlFeGlzdHMoaWQsIHN0YXRlLmVudGl0aWVzKTtcblxuICAgICAgY29uc3Qgb2xkRW50aXR5ID0gc3RhdGUuZW50aXRpZXNbaWRdO1xuICAgICAgY29uc3QgbmV3U3RhdGUgPSBpc0Z1bmN0aW9uKG5ld1N0YXRlT3JGbikgPyBuZXdTdGF0ZU9yRm4ob2xkRW50aXR5KSA6IG5ld1N0YXRlT3JGbjtcblxuICAgICAgaWYgKG5ld1N0YXRlLmhhc093blByb3BlcnR5KGlkS2V5KSAmJiBuZXdTdGF0ZVtpZEtleV0gIT09IG9sZEVudGl0eVtpZEtleV0pIHtcbiAgICAgICAgaWYgKGlkcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEFraXRhVXBkYXRlSWRLZXlFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGlzVXBkYXRpbmdJZEtleSA9IHRydWU7XG4gICAgICAgIGlkVG9VcGRhdGUgPSBuZXdTdGF0ZVtpZEtleV07XG4gICAgICB9XG5cbiAgICAgIGxldCBuZXdFbnRpdHk7XG5cbiAgICAgIGNvbnN0IG1lcmdlZCA9IHtcbiAgICAgICAgLi4ub2xkRW50aXR5LFxuICAgICAgICAuLi5uZXdTdGF0ZVxuICAgICAgfTtcblxuICAgICAgaWYgKGlzUGxhaW5PYmplY3Qob2xkRW50aXR5KSkge1xuICAgICAgICBuZXdFbnRpdHkgPSBtZXJnZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdFbnRpdHkgPSBuZXcgb2xkRW50aXR5LmNvbnN0cnVjdG9yKG1lcmdlZCk7XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZWRFbnRpdGllc1tpZFRvVXBkYXRlXSA9IG5ld0VudGl0eTtcbiAgICB9XG5cbiAgICBsZXQgdXBkYXRlZElkcyA9IHN0YXRlLmlkcztcbiAgICBsZXQgc3RhdGVFbnRpdGllcyA9IHN0YXRlLmVudGl0aWVzO1xuICAgIGlmIChpc1VwZGF0aW5nSWRLZXkpIHtcbiAgICAgIGNvbnN0IFtpZF0gPSBpZHM7XG4gICAgICBjb25zdCB7IFtpZF06IGRlbGV0ZWRFbnRpdHksIC4uLnJlc3QgfSA9IHN0YXRlLmVudGl0aWVzO1xuICAgICAgc3RhdGVFbnRpdGllcyA9IHJlc3Q7XG4gICAgICB1cGRhdGVkSWRzID0gc3RhdGUuaWRzLm1hcChjdXJyZW50ID0+IChjdXJyZW50ID09PSBpZCA/IGlkVG9VcGRhdGUgOiBjdXJyZW50KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLihzdGF0ZSBhcyBhbnkpLFxuICAgICAgZW50aXRpZXM6IHtcbiAgICAgICAgLi4uc3RhdGVFbnRpdGllcyxcbiAgICAgICAgLi4udXBkYXRlZEVudGl0aWVzXG4gICAgICB9LFxuICAgICAgaWRzOiB1cGRhdGVkSWRzXG4gICAgfTtcbiAgfVxuXG4gIF9yZW1vdmU8VCBleHRlbmRzIEVudGl0eVN0YXRlPihzdGF0ZTogVCwgaWRzOiBJRFtdIHwgbnVsbCk6IFQge1xuICAgIGlmICghaWRzKSByZXR1cm4gdGhpcy5fcmVtb3ZlQWxsKHN0YXRlKTtcblxuICAgIGNvbnN0IHJlbW92ZWQgPSBpZHMucmVkdWNlKChhY2MsIGlkKSA9PiB7XG4gICAgICBjb25zdCB7IFtpZF06IGVudGl0eSwgLi4ucmVzdCB9ID0gYWNjO1xuICAgICAgcmV0dXJuIHJlc3Q7XG4gICAgfSwgc3RhdGUuZW50aXRpZXMpO1xuICAgIGNvbnN0IG5ld1N0YXRlID0ge1xuICAgICAgLi4uKHN0YXRlIGFzIGFueSksXG4gICAgICBlbnRpdGllczogcmVtb3ZlZCxcbiAgICAgIGlkczogc3RhdGUuaWRzLmZpbHRlcihjdXJyZW50ID0+IGlkcy5pbmRleE9mKGN1cnJlbnQpID09PSAtMSlcbiAgICB9O1xuXG4gICAgaWYgKHJlc2V0QWN0aXZlKG5ld1N0YXRlKSkge1xuICAgICAgbmV3U3RhdGUuYWN0aXZlID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3U3RhdGU7XG4gIH1cblxuICBwcml2YXRlIF9yZW1vdmVBbGw8VCBleHRlbmRzIEVudGl0eVN0YXRlPihzdGF0ZTogVCk6IFQge1xuICAgIGNvbnN0IG5ld1N0YXRlID0ge1xuICAgICAgLi4uKHN0YXRlIGFzIGFueSksXG4gICAgICBlbnRpdGllczoge30sXG4gICAgICBpZHM6IFtdLFxuICAgICAgYWN0aXZlOiBudWxsXG4gICAgfTtcblxuICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgfVxuXG4gIHByaXZhdGUga2V5QnkoZW50aXRpZXM6IGFueVtdLCBlbnRpdHlDbGFzcz86IE5ld2FibGU8YW55PiwgaWQgPSAnaWQnKSB7XG4gICAgY29uc3QgYWNjID0ge307XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZW50aXRpZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGVudGl0eSA9IGVudGl0aWVzW2ldO1xuICAgICAgYWNjW2VudGl0eVtpZF1dID0gZW50aXR5Q2xhc3MgPyBuZXcgZW50aXR5Q2xhc3MoZW50aXR5KSA6IGVudGl0eTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBfY3J1ZCA9IG5ldyBDUlVEKCk7XG4iLCJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJRCB9IGZyb20gJy4uL2FwaS90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIEFjdGlvbiA9IHtcbiAgdHlwZTogc3RyaW5nO1xuICBlbnRpdHlJZD86IElEW10gfCBJRDtcbiAgcGF5bG9hZD86IGFueTtcbn07XG5cbmV4cG9ydCBjbGFzcyBBa2l0YUdsb2JhbHMge1xuICBwcml2YXRlIGN1c3RvbUFjdGlvbjtcbiAgY3VycmVudEFjdGlvbjogQWN0aW9uO1xuICBza2lwQWN0aW9uID0gZmFsc2U7XG4gIHNraXBUcmFuc2FjdGlvbk1zZyA9IGZhbHNlO1xuICBjdXJyZW50VCA9IFtdO1xuICBhY3RpdmVUcmFuc2FjdGlvbnMgPSAwO1xuICBiYXRjaFRyYW5zYWN0aW9uOiBTdWJqZWN0PGJvb2xlYW4+O1xuXG4gIHNldEFjdGlvbihfYWN0aW9uOiBBY3Rpb24pIHtcbiAgICBpZiAodGhpcy5jdXN0b21BY3Rpb24pIHtcbiAgICAgIHRoaXMuY3VycmVudEFjdGlvbiA9IHRoaXMuY3VzdG9tQWN0aW9uO1xuICAgICAgdGhpcy5jdXN0b21BY3Rpb24gPSBudWxsO1xuICAgICAgdGhpcy5za2lwVHJhbnNhY3Rpb25Nc2cgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuYWN0aXZlVHJhbnNhY3Rpb25zID09PSAwKSB7XG4gICAgICAgIHRoaXMuY3VycmVudEFjdGlvbiA9IF9hY3Rpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYWN0aXZlVHJhbnNhY3Rpb25zID4gMCkge1xuICAgICAgdGhpcy5jdXJyZW50VC5wdXNoKF9hY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIHNldEN1c3RvbUFjdGlvbihhY3Rpb246IEFjdGlvbiwgc2tpcFRyYW5zYWN0aW9uTXNnID0gZmFsc2UpIHtcbiAgICB0aGlzLmN1cnJlbnRBY3Rpb24gPSB0aGlzLmN1c3RvbUFjdGlvbiA9IGFjdGlvbjtcbiAgICB0aGlzLnNraXBUcmFuc2FjdGlvbk1zZyA9IHNraXBUcmFuc2FjdGlvbk1zZztcbiAgfVxuXG4gIHNldFNraXBBY3Rpb24oc2tpcCA9IHRydWUpIHtcbiAgICB0aGlzLnNraXBBY3Rpb24gPSBza2lwO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBfX2dsb2JhbFN0YXRlID0gbmV3IEFraXRhR2xvYmFscygpO1xuIiwiaW1wb3J0IHsgX19nbG9iYWxTdGF0ZSB9IGZyb20gJy4vZ2xvYmFsLXN0YXRlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIG9mIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogU3RhcnQgYSBuZXcgdHJhbnNhY3Rpb24gYmF0Y2hcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0QmF0Y2goKSB7XG4gIGlmICghaXNUcmFuc2FjdGlvbkluUHJvY2VzcygpKSB7XG4gICAgX19nbG9iYWxTdGF0ZS5iYXRjaFRyYW5zYWN0aW9uID0gbmV3IFN1YmplY3QoKTtcbiAgfVxuICBfX2dsb2JhbFN0YXRlLmFjdGl2ZVRyYW5zYWN0aW9ucysrO1xufVxuXG4vKipcbiAqIEVuZCB0aGUgdHJhbnNhY3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuZEJhdGNoKCkge1xuICBpZiAoLS1fX2dsb2JhbFN0YXRlLmFjdGl2ZVRyYW5zYWN0aW9ucyA9PT0gMCkge1xuICAgIF9fZ2xvYmFsU3RhdGUuYmF0Y2hUcmFuc2FjdGlvbi5uZXh0KHRydWUpO1xuICAgIF9fZ2xvYmFsU3RhdGUuYmF0Y2hUcmFuc2FjdGlvbi5jb21wbGV0ZSgpO1xuICB9XG59XG5cbi8qKlxuICogV2hldGhlciB3ZSdyZSBpbnNpZGUgYmF0Y2hcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVHJhbnNhY3Rpb25JblByb2Nlc3MoKSB7XG4gIHJldHVybiBfX2dsb2JhbFN0YXRlLmFjdGl2ZVRyYW5zYWN0aW9ucyA+IDA7XG59XG5cbi8qKlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWl0KCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICByZXR1cm4gX19nbG9iYWxTdGF0ZS5iYXRjaFRyYW5zYWN0aW9uID8gX19nbG9iYWxTdGF0ZS5iYXRjaFRyYW5zYWN0aW9uLmFzT2JzZXJ2YWJsZSgpIDogb2YodHJ1ZSk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZGVlcEZyZWV6ZShvKSB7XG4gIE9iamVjdC5mcmVlemUobyk7XG5cbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobykuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgaWYgKG8uaGFzT3duUHJvcGVydHkocHJvcCkgJiYgb1twcm9wXSAhPT0gbnVsbCAmJiAodHlwZW9mIG9bcHJvcF0gPT09ICdvYmplY3QnIHx8IHR5cGVvZiBvW3Byb3BdID09PSAnZnVuY3Rpb24nKSAmJiAhT2JqZWN0LmlzRnJvemVuKG9bcHJvcF0pKSB7XG4gICAgICBkZWVwRnJlZXplKG9bcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG87XG59XG4iLCJleHBvcnQgdHlwZSBTdG9yZUNvbmZpZ09wdGlvbnMgPSB7XG4gIG5hbWU6IHN0cmluZztcbiAgaWRLZXk/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3QgY29uZmlnS2V5ID0gJ2FraXRhQ29uZmlnJztcblxuZXhwb3J0IGZ1bmN0aW9uIFN0b3JlQ29uZmlnKG1ldGFkYXRhOiBTdG9yZUNvbmZpZ09wdGlvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbnN0cnVjdG9yOiBGdW5jdGlvbikge1xuICAgIGNvbnN0cnVjdG9yW2NvbmZpZ0tleV0gPSB7IGlkS2V5OiAnaWQnIH07XG5cbiAgICBmb3IgKGxldCBpID0gMCwga2V5cyA9IE9iamVjdC5rZXlzKG1ldGFkYXRhKTsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICAvKiBuYW1lIGlzIHByZXNlcnZlZCByZWFkIG9ubHkga2V5ICovXG4gICAgICBpZiAoa2V5ID09PSAnbmFtZScpIHtcbiAgICAgICAgY29uc3RydWN0b3JbY29uZmlnS2V5XVsnc3RvcmVOYW1lJ10gPSBtZXRhZGF0YVtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3RydWN0b3JbY29uZmlnS2V5XVtrZXldID0gbWV0YWRhdGFba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgeyBIYXNoTWFwLCBJRCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQWtpdGFJbW11dGFiaWxpdHlFcnJvciwgYXNzZXJ0RGVjb3JhdG9yIH0gZnJvbSAnLi4vaW50ZXJuYWwvZXJyb3InO1xuaW1wb3J0IHsgY29tbWl0LCBpc1RyYW5zYWN0aW9uSW5Qcm9jZXNzIH0gZnJvbSAnLi4vaW50ZXJuYWwvdHJhbnNhY3Rpb24uaW50ZXJuYWwnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiwgaXNQbGFpbk9iamVjdCB9IGZyb20gJy4uL2ludGVybmFsL3V0aWxzJztcbmltcG9ydCB7IGRlZXBGcmVlemUgfSBmcm9tICcuLi9pbnRlcm5hbC9kZWVwLWZyZWV6ZSc7XG5pbXBvcnQgeyBjb25maWdLZXksIFN0b3JlQ29uZmlnT3B0aW9ucyB9IGZyb20gJy4vc3RvcmUtY29uZmlnJztcbmltcG9ydCB7IF9fZ2xvYmFsU3RhdGUgfSBmcm9tICcuLi9pbnRlcm5hbC9nbG9iYWwtc3RhdGUnO1xuXG4vKiogV2hldGhlciB3ZSBhcmUgaW4gZGV2IG1vZGUgKi9cbmxldCBfX0RFVl9fID0gdHJ1ZTtcblxuZXhwb3J0IGNvbnN0IF9fc3RvcmVzX186IHsgW3N0b3JlTmFtZTogc3RyaW5nXTogU3RvcmU8YW55PiB9ID0ge307XG5cbmV4cG9ydCBjb25zdCBlbnVtIEFjdGlvbnMge1xuICBORVdfU1RPUkUsXG4gIE5FV19TVEFURVxufVxuXG5leHBvcnQgdHlwZSBBY3Rpb24gPSB7XG4gIHR5cGU6IEFjdGlvbnM7XG4gIHBheWxvYWQ6IEhhc2hNYXA8YW55Pjtcbn07XG5cbmV4cG9ydCBjb25zdCByb290RGlzcGF0Y2hlciA9IG5ldyBSZXBsYXlTdWJqZWN0PEFjdGlvbj4oKTtcblxuZnVuY3Rpb24gbmV4dFN0YXRlKHN0b3JlTmFtZSwgaW5pdGlhbFN0YXRlID0gZmFsc2UpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBBY3Rpb25zLk5FV19TVEFURSxcbiAgICBwYXlsb2FkOiB7XG4gICAgICBuYW1lOiBzdG9yZU5hbWUsXG4gICAgICBpbml0aWFsU3RhdGVcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogRW5hYmxlIHByb2R1Y3Rpb24gbW9kZSB0byBkaXNhYmxlIG9iamVjdEZyZWV6ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlQWtpdGFQcm9kTW9kZSgpIHtcbiAgX19ERVZfXyA9IGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZXYoKSB7XG4gIHJldHVybiBfX0RFVl9fO1xufVxuXG4vKipcbiAqIFRoZSBSb290IFN0b3JlIHRoYXQgZXZlcnkgc3ViIHN0b3JlIG5lZWRzIHRvIGluaGVyaXQgYW5kXG4gKiBpbnZva2UgYHN1cGVyYCB3aXRoIHRoZSBpbml0aWFsIHN0YXRlLlxuICovXG5leHBvcnQgY2xhc3MgU3RvcmU8Uz4ge1xuICAvKiogTWFuYWdlIHRoZSBzdG9yZSB3aXRoIEJlaGF2aW9yU3ViamVjdCAqL1xuICBwcml2YXRlIHN0b3JlOiBCZWhhdmlvclN1YmplY3Q8UmVhZG9ubHk8Uz4+O1xuXG4gIC8qKiBUaGUgY3VycmVudCBzdGF0ZSB2YWx1ZSAqL1xuICBwcml2YXRlIHN0b3JlVmFsdWU6IFM7XG5cbiAgLyoqIFdoZXRoZXIgd2UgYXJlIGluc2lkZSB0cmFuc2FjdGlvbiAqKi9cbiAgcHJpdmF0ZSBpblRyYW5zYWN0aW9uID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBfaXNQcmlzdGluZSA9IHRydWU7XG5cbiAgLyoqXG4gICAqXG4gICAqIEluaXRpYWwgdGhlIHN0b3JlIHdpdGggdGhlIHN0YXRlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihpbml0aWFsU3RhdGUpIHtcbiAgICBfX2dsb2JhbFN0YXRlLnNldEFjdGlvbih7IHR5cGU6ICdAQElOSVQnIH0pO1xuICAgIF9fc3RvcmVzX19bdGhpcy5zdG9yZU5hbWVdID0gdGhpcztcbiAgICB0aGlzLnNldFN0YXRlKCgpID0+IGluaXRpYWxTdGF0ZSk7XG4gICAgcm9vdERpc3BhdGNoZXIubmV4dCh7XG4gICAgICB0eXBlOiBBY3Rpb25zLk5FV19TVE9SRSxcbiAgICAgIHBheWxvYWQ6IHsgc3RvcmU6IHRoaXMgfVxuICAgIH0pO1xuICAgIGlzRGV2KCkgJiYgYXNzZXJ0RGVjb3JhdG9yKHRoaXMuc3RvcmVOYW1lLCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUpO1xuICB9XG5cbiAgc2V0TG9hZGluZyhsb2FkaW5nID0gZmFsc2UpIHtcbiAgICBpZiAobG9hZGluZyAhPT0gKHRoaXMuX3ZhbHVlKCkgYXMgUyAmIHsgbG9hZGluZzogYm9vbGVhbiB9KS5sb2FkaW5nKSB7XG4gICAgICBpc0RldigpICYmIF9fZ2xvYmFsU3RhdGUuc2V0QWN0aW9uKHsgdHlwZTogJ1NldCBMb2FkaW5nJyB9KTtcbiAgICAgIHRoaXMuc2V0U3RhdGUocyA9PiAoeyAuLi4ocyBhcyBvYmplY3QpLCBsb2FkaW5nIH0gYXMgYW55KSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgc3RvcmUncyBlcnJvciBzdGF0ZS5cbiAgICovXG4gIHNldEVycm9yPFQ+KGVycm9yOiBUKSB7XG4gICAgaWYgKGVycm9yICE9PSAodGhpcy5fdmFsdWUoKSBhcyBTICYgeyBlcnJvcjogYW55IH0pLmVycm9yKSB7XG4gICAgICBpc0RldigpICYmIF9fZ2xvYmFsU3RhdGUuc2V0QWN0aW9uKHsgdHlwZTogJ1NldCBFcnJvcicgfSk7XG4gICAgICB0aGlzLnNldFN0YXRlKHMgPT4gKHsgLi4uKHMgYXMgb2JqZWN0KSwgZXJyb3IgfSBhcyBhbnkpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0IGEgc2xpY2UgZnJvbSB0aGUgc3RvcmVcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdGhpcy5zdG9yZS5zZWxlY3Qoc3RhdGUgPT4gc3RhdGUuZW50aXRpZXMpXG4gICAqXG4gICAqL1xuICBfc2VsZWN0PFI+KHByb2plY3Q6IChzdG9yZTogUykgPT4gUik6IE9ic2VydmFibGU8Uj4ge1xuICAgIHJldHVybiB0aGlzLnN0b3JlJC5waXBlKFxuICAgICAgbWFwKHByb2plY3QpLFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxuICAgICk7XG4gIH1cblxuICBfdmFsdWUoKTogUyB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmVWYWx1ZTtcbiAgfVxuXG4gIGdldCBjb25maWcoKTogU3RvcmVDb25maWdPcHRpb25zIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvcltjb25maWdLZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgc3RvcmUgbmFtZVxuICAgKi9cbiAgZ2V0IHN0b3JlTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcgJiYgdGhpcy5jb25maWdbJ3N0b3JlTmFtZSddO1xuICB9XG5cbiAgZ2V0IGlzUHJpc3RpbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzUHJpc3RpbmU7XG4gIH1cblxuICAvKipcbiAgICogYHNldFN0YXRlKClgIGlzIHRoZSBvbmx5IHdheSB0byB1cGRhdGUgYSBzdG9yZTsgSXQgcmVjZWl2ZXMgYSBjYWxsYmFjayBmdW5jdGlvbixcbiAgICogd2hpY2ggZ2V0cyB0aGUgY3VycmVudCBzdGF0ZSwgYW5kIHJldHVybnMgYSBuZXcgaW1tdXRhYmxlIHN0YXRlLFxuICAgKiB3aGljaCB3aWxsIGJlIHRoZSBuZXcgdmFsdWUgb2YgdGhlIHN0b3JlLlxuICAgKi9cbiAgc2V0U3RhdGUobmV3U3RhdGVGbjogKHN0YXRlOiBSZWFkb25seTxTPikgPT4gUywgX3Jvb3REaXNwYXRjaGVyID0gdHJ1ZSkge1xuICAgIGNvbnN0IHByZXZTdGF0ZSA9IHRoaXMuX3ZhbHVlKCk7XG4gICAgdGhpcy5zdG9yZVZhbHVlID0gX19ERVZfXyA/IGRlZXBGcmVlemUobmV3U3RhdGVGbih0aGlzLl92YWx1ZSgpKSkgOiBuZXdTdGF0ZUZuKHRoaXMuX3ZhbHVlKCkpO1xuXG4gICAgaWYgKHByZXZTdGF0ZSA9PT0gdGhpcy5zdG9yZVZhbHVlKSB7XG4gICAgICB0aHJvdyBuZXcgQWtpdGFJbW11dGFiaWxpdHlFcnJvcih0aGlzLnN0b3JlTmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnN0b3JlKSB7XG4gICAgICB0aGlzLnN0b3JlID0gbmV3IEJlaGF2aW9yU3ViamVjdCh0aGlzLnN0b3JlVmFsdWUpO1xuICAgICAgcm9vdERpc3BhdGNoZXIubmV4dChuZXh0U3RhdGUodGhpcy5zdG9yZU5hbWUsIHRydWUpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNUcmFuc2FjdGlvbkluUHJvY2VzcygpKSB7XG4gICAgICB0aGlzLmhhbmRsZVRyYW5zYWN0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5kaXNwYXRjaCh0aGlzLnN0b3JlVmFsdWUsIF9yb290RGlzcGF0Y2hlcik7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgaXMgYSBzaG9ydGN1dCBmb3IgYHNldFN0YXRlKClgLlxuICAgKiBJdCBjYW4gYmUgdXNlZnVsIHdoZW4geW91IHdhbnQgdG8gcGFzcyB0aGUgd2hvbGUgc3RhdGUgb2JqZWN0IGluc3RlYWQgb2YgbWVyZ2luZyBhIHBhcnRpYWwgc3RhdGUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHRoaXMuc3RvcmUudXBkYXRlKG5ld1N0YXRlKVxuICAgKi9cbiAgdXBkYXRlKG5ld1N0YXRlOiBQYXJ0aWFsPFM+KTtcbiAgdXBkYXRlKG5ld1N0YXRlOiAoc3RhdGU6IFJlYWRvbmx5PFM+KSA9PiBQYXJ0aWFsPFM+KTtcbiAgdXBkYXRlKGlkOiBJRCB8IElEW10gfCBudWxsLCBuZXdTdGF0ZTogUGFydGlhbDxTPik7XG4gIHVwZGF0ZShuZXdTdGF0ZU9ySWQ6IFBhcnRpYWw8Uz4gfCBJRCB8IElEW10gfCBudWxsIHwgKChzdGF0ZTogUmVhZG9ubHk8Uz4pID0+IFBhcnRpYWw8Uz4pLCBuZXdTdGF0ZT86IFBhcnRpYWw8Uz4pIHtcbiAgICBfX2dsb2JhbFN0YXRlLnNldEFjdGlvbih7IHR5cGU6ICdVcGRhdGUgU3RvcmUnIH0pO1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4ge1xuICAgICAgbGV0IHZhbHVlID0gaXNGdW5jdGlvbihuZXdTdGF0ZU9ySWQpID8gbmV3U3RhdGVPcklkKHN0YXRlKSA6IG5ld1N0YXRlT3JJZDtcbiAgICAgIGxldCBtZXJnZWQgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgdmFsdWUpO1xuICAgICAgcmV0dXJuIGlzUGxhaW5PYmplY3Qoc3RhdGUpID8gbWVyZ2VkIDogbmV3IChzdGF0ZSBhcyBhbnkpLmNvbnN0cnVjdG9yKG1lcmdlZCk7XG4gICAgfSk7XG4gICAgdGhpcy5zZXREaXJ0eSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHN0b3JlIHRvIGEgcHJpc3RpbmUgc3RhdGUuXG4gICAqL1xuICBzZXRQcmlzdGluZSgpIHtcbiAgICB0aGlzLl9pc1ByaXN0aW5lID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzdG9yZSB0byBhIGRpcnR5IHN0YXRlLCBpbmRpY2F0aW5nIHRoYXQgaXQgaXMgbm90IHByaXN0aW5lLlxuICAgKi9cbiAgc2V0RGlydHkoKSB7XG4gICAgdGhpcy5faXNQcmlzdGluZSA9IGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBkaXNwYXRjaChzdGF0ZTogUywgX3Jvb3REaXNwYXRjaGVyID0gdHJ1ZSkge1xuICAgIHRoaXMuc3RvcmUubmV4dChzdGF0ZSk7XG4gICAgaWYgKF9yb290RGlzcGF0Y2hlcikge1xuICAgICAgcm9vdERpc3BhdGNoZXIubmV4dChuZXh0U3RhdGUodGhpcy5zdG9yZU5hbWUpKTtcbiAgICAgIGlzRGV2KCkgJiYgX19nbG9iYWxTdGF0ZS5zZXRBY3Rpb24oeyB0eXBlOiAnU2V0IFN0YXRlJyB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldCBzdG9yZSQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICAvKipcbiAgICogV2hlbiB0aGUgdHJhbnNhY3Rpb24gZW5kcyBkaXNwYXRjaCB0aGUgZmluYWwgdmFsdWUgb25jZVxuICAgKi9cbiAgcHJpdmF0ZSB3YXRjaFRyYW5zYWN0aW9uKCkge1xuICAgIGNvbW1pdCgpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLmluVHJhbnNhY3Rpb24gPSBmYWxzZTtcbiAgICAgIGlmIChpc0RldigpICYmICFfX2dsb2JhbFN0YXRlLnNraXBUcmFuc2FjdGlvbk1zZykge1xuICAgICAgICBfX2dsb2JhbFN0YXRlLnNldEFjdGlvbih7IHR5cGU6ICdAVHJhbnNhY3Rpb24nIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5kaXNwYXRjaCh0aGlzLl92YWx1ZSgpKTtcbiAgICAgIF9fZ2xvYmFsU3RhdGUuY3VycmVudFQgPSBbXTtcbiAgICAgIF9fZ2xvYmFsU3RhdGUuc2tpcFRyYW5zYWN0aW9uTXNnID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTGlzdGVuIHRvIHRoZSB0cmFuc2FjdGlvbiBzdHJlYW1cbiAgICovXG4gIHByaXZhdGUgaGFuZGxlVHJhbnNhY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLmluVHJhbnNhY3Rpb24pIHtcbiAgICAgIHRoaXMud2F0Y2hUcmFuc2FjdGlvbigpO1xuICAgICAgdGhpcy5pblRyYW5zYWN0aW9uID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzID09PSBfX3N0b3Jlc19fW3RoaXMuc3RvcmVOYW1lXSkge1xuICAgICAgZGVsZXRlIF9fc3RvcmVzX19bdGhpcy5zdG9yZU5hbWVdO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgX2NydWQgfSBmcm9tICcuLi9pbnRlcm5hbC9jcnVkJztcbmltcG9ydCB7IEFraXRhSW1tdXRhYmlsaXR5RXJyb3IsIGFzc2VydEFjdGl2ZSB9IGZyb20gJy4uL2ludGVybmFsL2Vycm9yJztcbmltcG9ydCB7IEFjdGlvbiwgX19nbG9iYWxTdGF0ZSB9IGZyb20gJy4uL2ludGVybmFsL2dsb2JhbC1zdGF0ZSc7XG5pbXBvcnQgeyBjb2VyY2VBcnJheSwgZW50aXR5RXhpc3RzLCBpc0Z1bmN0aW9uLCB0b0Jvb2xlYW4gfSBmcm9tICcuLi9pbnRlcm5hbC91dGlscyc7XG5pbXBvcnQgeyBpc0RldiwgU3RvcmUgfSBmcm9tICcuL3N0b3JlJztcbmltcG9ydCB7IEFjdGl2ZVN0YXRlLCBFbnRpdGllcywgRW50aXR5U3RhdGUsIEhhc2hNYXAsIElELCBOZXdhYmxlIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogVGhlIFJvb3QgU3RvcmUgdGhhdCBldmVyeSBzdWIgc3RvcmUgbmVlZHMgdG8gaW5oZXJpdCBhbmRcbiAqIGludm9rZSBgc3VwZXJgIHdpdGggdGhlIGluaXRpYWwgc3RhdGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBFbnRpdHlTdG9yZTxTIGV4dGVuZHMgRW50aXR5U3RhdGU8RT4sIEU+IGV4dGVuZHMgU3RvcmU8Uz4ge1xuICAvKipcbiAgICpcbiAgICogSW5pdGlhdGUgdGhlIHN0b3JlIHdpdGggdGhlIHN0YXRlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihpbml0aWFsU3RhdGUgPSB7fSwgcHJpdmF0ZSBvcHRpb25zOiB7IGlkS2V5Pzogc3RyaW5nIH0gPSB7fSkge1xuICAgIHN1cGVyKHsgLi4uZ2V0SW5pdGlhbEVudGl0aWVzU3RhdGUoKSwgLi4uaW5pdGlhbFN0YXRlIH0pO1xuICB9XG5cbiAgZ2V0IGVudGl0aWVzKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZSgpLmVudGl0aWVzO1xuICB9XG5cbiAgZ2V0IGlkS2V5KCkge1xuICAgIC8qKiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5ICovXG4gICAgY29uc3QgbmV3SWRLZXkgPSB0aGlzLmNvbmZpZyAmJiB0aGlzLmNvbmZpZy5pZEtleTtcbiAgICBpZiAoIW5ld0lkS2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmlkS2V5IHx8ICdpZCc7XG4gICAgfVxuICAgIHJldHVybiBuZXdJZEtleTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBSZXBsYWNlIGN1cnJlbnQgY29sbGVjdGlvbiB3aXRoIHByb3ZpZGVkIGNvbGxlY3Rpb25cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdGhpcy5zdG9yZS5zZXQoW0VudGl0eSwgRW50aXR5XSk7XG4gICAqIHRoaXMuc3RvcmUuc2V0KHsxOiBFbnRpdHksIDI6IEVudGl0eX0pO1xuICAgKiB0aGlzLnN0b3JlLnNldChbe2lkOiAxfSwge2lkOiAyfV0sIHsgZW50aXR5Q2xhc3M6IFByb2R1Y3QgfSk7XG4gICAqXG4gICAqL1xuICBzZXQoZW50aXRpZXM6IEVbXSB8IEhhc2hNYXA8RT4gfCBFbnRpdGllczxFPiwgb3B0aW9uczogeyBlbnRpdHlDbGFzcz86IE5ld2FibGU8RT4gfSA9IHt9KSB7XG4gICAgaXNEZXYoKSAmJiBfX2dsb2JhbFN0YXRlLnNldEFjdGlvbih7IHR5cGU6ICdTZXQgRW50aXRpZXMnIH0pO1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4gX2NydWQuX3NldChzdGF0ZSwgZW50aXRpZXMsIG9wdGlvbnMuZW50aXR5Q2xhc3MsIHRoaXMuaWRLZXkpKTtcbiAgICB0aGlzLnNldERpcnR5KCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIG9yIHJlcGxhY2UgYW4gZW50aXR5IGluIHRoZSBzdG9yZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdGhpcy5zdG9yZS5jcmVhdGVPclJlcGxhY2UoMywgRW50aXR5KTtcbiAgICpcbiAgICovXG4gIGNyZWF0ZU9yUmVwbGFjZShpZDogSUQsIGVudGl0eTogRSkge1xuICAgIGlmICghZW50aXR5RXhpc3RzKGlkLCB0aGlzLl92YWx1ZSgpLmVudGl0aWVzKSkge1xuICAgICAgaWYgKCFlbnRpdHlbdGhpcy5pZEtleV0pIHtcbiAgICAgICAgZW50aXR5W3RoaXMuaWRLZXldID0gaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5hZGQoZW50aXR5KTtcbiAgICB9XG4gICAgaXNEZXYoKSAmJiBfX2dsb2JhbFN0YXRlLnNldEFjdGlvbih7IHR5cGU6ICdVcHNlcnQgRW50aXR5JywgZW50aXR5SWQ6IFtpZF0gfSk7XG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSA9PiBfY3J1ZC5fcmVwbGFjZUVudGl0eShzdGF0ZSwgaWQsIGVudGl0eSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhbiBlbnRpdHkgb3IgZW50aXRpZXMgdG8gdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB0aGlzLnN0b3JlLmFkZChbRW50aXR5LCBFbnRpdHldKTtcbiAgICogdGhpcy5zdG9yZS5hZGQoRW50aXR5KTtcbiAgICovXG4gIGFkZChlbnRpdGllczogRVtdIHwgRSkge1xuICAgIGNvbnN0IHRvQXJyYXkgPSBjb2VyY2VBcnJheShlbnRpdGllcyk7XG4gICAgaWYgKHRvQXJyYXkubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgaXNEZXYoKSAmJiBfX2dsb2JhbFN0YXRlLnNldEFjdGlvbih7IHR5cGU6ICdBZGQgRW50aXR5JyB9KTtcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlID0+IF9jcnVkLl9hZGQ8UywgRT4oc3RhdGUsIHRvQXJyYXksIHRoaXMuaWRLZXkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBVcGRhdGUgYW4gZW50aXR5IG9yIGVudGl0aWVzIGluIHRoZSBzdG9yZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdGhpcy5zdG9yZS51cGRhdGUoMywge1xuICAgKiAgIG5hbWU6ICdOZXcgTmFtZSdcbiAgICogfSk7XG4gICAqXG4gICAqICB0aGlzLnN0b3JlLnVwZGF0ZSgzLCBlbnRpdHkgPT4ge1xuICAgKiAgICByZXR1cm4ge1xuICAgKiAgICAgIGNvbmZpZzoge1xuICAgKiAgICAgICAgLi4uZW50aXR5LmZpbHRlcixcbiAgICogICAgICAgIGRhdGVcbiAgICogICAgICB9XG4gICAqICAgIH1cbiAgICogIH0pO1xuICAgKlxuICAgKiB0aGlzLnN0b3JlLnVwZGF0ZShbMSwyLDNdLCB7XG4gICAqICAgbmFtZTogJ05ldyBOYW1lJ1xuICAgKiB9KTtcbiAgICpcbiAgICogdGhpcy5zdG9yZS51cGRhdGUoZSA9PiBlLm5hbWUgPT09ICd2YWx1ZScsIHtcbiAgICogICBuYW1lOiAnTmV3IE5hbWUnXG4gICAqIH0pO1xuICAgKlxuICAgKiB0aGlzLnN0b3JlLnVwZGF0ZShudWxsLCB7XG4gICAqICAgbmFtZTogJ05ldyBOYW1lJ1xuICAgKiB9KTtcbiAgICpcbiAgICovXG4gIHVwZGF0ZShpZDogSUQgfCBJRFtdIHwgbnVsbCwgbmV3U3RhdGVGbjogKChlbnRpdHk6IFJlYWRvbmx5PEU+KSA9PiBQYXJ0aWFsPEU+KSk7XG4gIHVwZGF0ZShpZDogSUQgfCBJRFtdIHwgbnVsbCwgbmV3U3RhdGU6IFBhcnRpYWw8RT4pO1xuICB1cGRhdGUoaWQ6IElEIHwgSURbXSB8IG51bGwsIG5ld1N0YXRlOiBQYXJ0aWFsPFM+KTtcbiAgdXBkYXRlKG5ld1N0YXRlOiAoc3RhdGU6IFJlYWRvbmx5PFM+KSA9PiBQYXJ0aWFsPFM+KTtcbiAgdXBkYXRlKHByZWRpY2F0ZTogKChlbnRpdHk6IFJlYWRvbmx5PEU+KSA9PiBib29sZWFuKSwgbmV3U3RhdGVGbjogKChlbnRpdHk6IFJlYWRvbmx5PEU+KSA9PiBQYXJ0aWFsPEU+KSk7XG4gIHVwZGF0ZShwcmVkaWNhdGU6ICgoZW50aXR5OiBSZWFkb25seTxFPikgPT4gYm9vbGVhbiksIG5ld1N0YXRlOiBQYXJ0aWFsPEU+KTtcbiAgdXBkYXRlKHByZWRpY2F0ZTogKChlbnRpdHk6IFJlYWRvbmx5PEU+KSA9PiBib29sZWFuKSwgbmV3U3RhdGU6IFBhcnRpYWw8Uz4pO1xuICB1cGRhdGUobmV3U3RhdGU6IFBhcnRpYWw8Uz4pO1xuICB1cGRhdGUoXG4gICAgaWRzT3JGbjogSUQgfCBJRFtdIHwgbnVsbCB8IFBhcnRpYWw8Uz4gfCAoKHN0YXRlOiBSZWFkb25seTxTPikgPT4gUGFydGlhbDxTPikgfCAoKGVudGl0eTogUmVhZG9ubHk8RT4pID0+IGJvb2xlYW4pLFxuICAgIG5ld1N0YXRlT3JGbj86ICgoZW50aXR5OiBSZWFkb25seTxFPikgPT4gUGFydGlhbDxFPikgfCBQYXJ0aWFsPEU+IHwgUGFydGlhbDxTPlxuICApIHtcbiAgICBsZXQgaWRzOiBJRFtdID0gW107XG4gICAgY29uc3Qgc3RvcmVJZHMgPSB0aGlzLl92YWx1ZSgpLmlkcztcblxuICAgIGlmIChpc0Z1bmN0aW9uKGlkc09yRm4pKSB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc3RvcmVJZHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgaWQgPSBzdG9yZUlkc1tpXTtcbiAgICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5fdmFsdWUoKS5lbnRpdGllc1tpZF07XG4gICAgICAgIGlmIChlbnRpdHkgJiYgKGlkc09yRm4gYXMgRnVuY3Rpb24pKGVudGl0eSkpIHtcbiAgICAgICAgICBpZHMucHVzaChpZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWRzID0gdG9Cb29sZWFuKGlkc09yRm4pID8gY29lcmNlQXJyYXkoaWRzT3JGbikgOiBzdG9yZUlkcztcbiAgICB9XG5cbiAgICBpZiAoaWRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlzRGV2KCkgJiYgX19nbG9iYWxTdGF0ZS5zZXRBY3Rpb24oeyB0eXBlOiAnVXBkYXRlIEVudGl0eScsIGVudGl0eUlkOiBpZHMgfSk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlID0+IHtcbiAgICAgIHJldHVybiBfY3J1ZC5fdXBkYXRlKHN0YXRlLCBpZHMsIG5ld1N0YXRlT3JGbiwgdGhpcy5pZEtleSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQW4gYWxpYXMgdG8gdXBkYXRlIGFsbC5cbiAgICovXG4gIHVwZGF0ZUFsbChzdGF0ZTogUGFydGlhbDxFPikge1xuICAgIGlmICh0aGlzLl92YWx1ZSgpLmlkcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB0aGlzLnVwZGF0ZShudWxsLCBzdGF0ZSk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSByb290IHN0YXRlIChkYXRhIHdoaWNoIGlzIGV4dGVybmFsIHRvIHRoZSBlbnRpdGllcykuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHRoaXMuc3RvcmUudXBkYXRlUm9vdCh7XG4gICAqICAgbWV0YWRhdGE6ICduZXcgbWV0YWRhdGFcbiAgICogfSk7XG4gICAqXG4gICAqICB0aGlzLnN0b3JlLnVwZGF0ZVJvb3Qoc3RhdGUgPT4ge1xuICAgKiAgICByZXR1cm4ge1xuICAgKiAgICAgIG1ldGFkYXRhOiB7XG4gICAqICAgICAgICAuLi5zdGF0ZS5tZXRhZGF0YSxcbiAgICogICAgICAgIGtleTogJ25ldyB2YWx1ZSdcbiAgICogICAgICB9XG4gICAqICAgIH1cbiAgICogIH0pO1xuICAgKi9cbiAgdXBkYXRlUm9vdChuZXdTdGF0ZUZuOiAoKHN0YXRlOiBSZWFkb25seTxTPikgPT4gUGFydGlhbDxTPikgfCBQYXJ0aWFsPFM+LCBhY3Rpb24/OiBBY3Rpb24pIHtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IGlzRnVuY3Rpb24obmV3U3RhdGVGbikgPyBuZXdTdGF0ZUZuKHRoaXMuX3ZhbHVlKCkpIDogbmV3U3RhdGVGbjtcblxuICAgIGlmIChuZXdTdGF0ZSA9PT0gdGhpcy5fdmFsdWUoKSkge1xuICAgICAgdGhyb3cgbmV3IEFraXRhSW1tdXRhYmlsaXR5RXJyb3IodGhpcy5zdG9yZU5hbWUpO1xuICAgIH1cblxuICAgIGlzRGV2KCkgJiYgX19nbG9iYWxTdGF0ZS5zZXRBY3Rpb24oYWN0aW9uIHx8IHsgdHlwZTogJ1VwZGF0ZSBSb290JyB9KTtcblxuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uKHN0YXRlIGFzIGFueSksXG4gICAgICAgIC4uLihuZXdTdGF0ZSBhcyBhbnkpXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIFJlbW92ZSBvbmUgb3IgbW9yZSBlbnRpdGllcyBmcm9tIHRoZSBzdG9yZTpcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdGhpcy5zdG9yZS5yZW1vdmUoNSk7XG4gICAqIHRoaXMuc3RvcmUucmVtb3ZlKFsxLDIsM10pO1xuICAgKiB0aGlzLnN0b3JlLnJlbW92ZShlbnRpdHkgPT4gZW50aXR5LmlkID09PSAxKTtcbiAgICogdGhpcy5zdG9yZS5yZW1vdmUoKTtcbiAgICovXG4gIHJlbW92ZShpZD86IElEIHwgSURbXSk7XG4gIHJlbW92ZShwcmVkaWNhdGU6IChlbnRpdHk6IFJlYWRvbmx5PEU+KSA9PiBib29sZWFuKTtcbiAgcmVtb3ZlKGlkc09yRm4/OiBJRCB8IElEW10gfCAoKGVudGl0eTogUmVhZG9ubHk8RT4pID0+IGJvb2xlYW4pKSB7XG4gICAgY29uc3Qgc3RvcmVJZHMgPSB0aGlzLl92YWx1ZSgpLmlkcztcblxuICAgIGlmIChzdG9yZUlkcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBjb25zdCBpZFBhc3NlZCA9IHRvQm9vbGVhbihpZHNPckZuKTtcbiAgICBpZiAoIWlkUGFzc2VkKSB0aGlzLnNldFByaXN0aW5lKCk7XG5cbiAgICBsZXQgaWRzOiBJRFtdID0gW107XG4gICAgaWYgKGlzRnVuY3Rpb24oaWRzT3JGbikpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzdG9yZUlkcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjb25zdCBpZCA9IHN0b3JlSWRzW2ldO1xuICAgICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLl92YWx1ZSgpLmVudGl0aWVzW2lkXTtcbiAgICAgICAgaWYgKGVudGl0eSAmJiBpZHNPckZuKGVudGl0eSkpIHtcbiAgICAgICAgICBpZHMucHVzaChpZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWRzID0gaWRQYXNzZWQgPyBjb2VyY2VBcnJheShpZHNPckZuKSA6IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGlkcyAmJiBpZHMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgaXNEZXYoKSAmJiBfX2dsb2JhbFN0YXRlLnNldEFjdGlvbih7IHR5cGU6ICdSZW1vdmUgRW50aXR5JywgZW50aXR5SWQ6IGlkcyB9KTtcblxuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4ge1xuICAgICAgcmV0dXJuIF9jcnVkLl9yZW1vdmUoc3RhdGUsIGlkcyk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogVXBkYXRlIHRoZSBhY3RpdmUgZW50aXR5LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB0aGlzLnN0b3JlLnVwZGF0ZUFjdGl2ZShhY3RpdmUgPT4ge1xuICAgKiAgIHJldHVybiB7XG4gICAqICAgICBjb25maWc6IHtcbiAgICogICAgICAuLmFjdGl2ZS5jb25maWcsXG4gICAqICAgICAgZGF0ZVxuICAgKiAgICAgfVxuICAgKiAgIH1cbiAgICogfSlcbiAgICovXG4gIHVwZGF0ZUFjdGl2ZShuZXdTdGF0ZUZuOiAoKGVudGl0eTogUmVhZG9ubHk8RT4pID0+IFBhcnRpYWw8RT4pIHwgUGFydGlhbDxFPikge1xuICAgIGFzc2VydEFjdGl2ZSh0aGlzLl92YWx1ZSgpKTtcbiAgICBpc0RldigpICYmIF9fZ2xvYmFsU3RhdGUuc2V0QWN0aW9uKHsgdHlwZTogJ1VwZGF0ZSBBY3RpdmUgRW50aXR5JywgZW50aXR5SWQ6IHRoaXMuX3ZhbHVlKCkuYWN0aXZlIH0pO1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4ge1xuICAgICAgY29uc3QgYWN0aXZlSWQgPSBzdGF0ZS5hY3RpdmU7XG4gICAgICBjb25zdCBuZXdTdGF0ZSA9IGlzRnVuY3Rpb24obmV3U3RhdGVGbikgPyBuZXdTdGF0ZUZuKHN0YXRlLmVudGl0aWVzW2FjdGl2ZUlkXSkgOiBuZXdTdGF0ZUZuO1xuICAgICAgaWYgKG5ld1N0YXRlID09PSBzdGF0ZSkge1xuICAgICAgICB0aHJvdyBuZXcgQWtpdGFJbW11dGFiaWxpdHlFcnJvcih0aGlzLnN0b3JlTmFtZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NydWQuX3VwZGF0ZShzdGF0ZSwgW2FjdGl2ZUlkXSwgbmV3U3RhdGUsIHRoaXMuaWRLZXkpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgZ2l2ZW4gZW50aXR5IGFzIGFjdGl2ZS5cbiAgICovXG4gIHNldEFjdGl2ZShpZDogSUQpIHtcbiAgICBpZiAoaWQgPT09IHRoaXMuX3ZhbHVlKCkuYWN0aXZlKSByZXR1cm47XG4gICAgaXNEZXYoKSAmJiBfX2dsb2JhbFN0YXRlLnNldEFjdGlvbih7IHR5cGU6ICdTZXQgQWN0aXZlIEVudGl0eScsIGVudGl0eUlkOiBpZCB9KTtcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLihzdGF0ZSBhcyBhbnkpLFxuICAgICAgICBhY3RpdmU6IGlkXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRJbml0aWFsRW50aXRpZXNTdGF0ZSA9ICgpID0+XG4gICh7XG4gICAgZW50aXRpZXM6IHt9LFxuICAgIGlkczogW10sXG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBlcnJvcjogbnVsbFxuICB9IGFzIEVudGl0eVN0YXRlKTtcblxuZXhwb3J0IGNvbnN0IGdldEluaXRpYWxBY3RpdmVTdGF0ZSA9ICgpID0+XG4gICh7XG4gICAgYWN0aXZlOiBudWxsXG4gIH0gYXMgQWN0aXZlU3RhdGUpO1xuIiwiZXhwb3J0IGVudW0gT3JkZXIge1xuICBBU0MgPSAnYXNjJyxcbiAgREVTQyA9ICdkZXNjJ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVZhbHVlcyhrZXksIG9yZGVyOiBPcmRlciA9IE9yZGVyLkFTQykge1xuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIGlmICghYS5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8ICFiLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGNvbnN0IHZhckEgPSB0eXBlb2YgYVtrZXldID09PSAnc3RyaW5nJyA/IGFba2V5XS50b1VwcGVyQ2FzZSgpIDogYVtrZXldO1xuICAgIGNvbnN0IHZhckIgPSB0eXBlb2YgYltrZXldID09PSAnc3RyaW5nJyA/IGJba2V5XS50b1VwcGVyQ2FzZSgpIDogYltrZXldO1xuXG4gICAgbGV0IGNvbXBhcmlzb24gPSAwO1xuICAgIGlmICh2YXJBID4gdmFyQikge1xuICAgICAgY29tcGFyaXNvbiA9IDE7XG4gICAgfSBlbHNlIGlmICh2YXJBIDwgdmFyQikge1xuICAgICAgY29tcGFyaXNvbiA9IC0xO1xuICAgIH1cbiAgICByZXR1cm4gb3JkZXIgPT0gT3JkZXIuREVTQyA/IGNvbXBhcmlzb24gKiAtMSA6IGNvbXBhcmlzb247XG4gIH07XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gbWVtb2l6ZU9uZShmbjogRnVuY3Rpb24pIHtcbiAgbGV0IGxhc3RBcmdzO1xuICBsZXQgY2hhbmdlZCA9IGZhbHNlO1xuICBsZXQgZmlyc3RJbml0ID0gdHJ1ZTtcbiAgbGV0IGxhc3RSZXN1bHQ7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICBpZiAobGFzdEFyZ3MpIHtcbiAgICAgIC8qKiBJZiBlbnRpdGllcyBub3IgaWRzIGRvZXNuJ3QgY2hhbmdlIHJldHVybiB0aGUgbGFzdCB2YWx1ZSAqL1xuICAgICAgY2hhbmdlZCA9IGxhc3RBcmdzWzFdICE9PSBhcmdzWzFdIHx8IGxhc3RBcmdzWzBdICE9PSBhcmdzWzBdO1xuICAgIH1cblxuICAgIGlmIChmaXJzdEluaXQgfHwgKGNoYW5nZWQgJiYgIWZpcnN0SW5pdCkpIHtcbiAgICAgIGxhc3RSZXN1bHQgPSBmbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG5cbiAgICBmaXJzdEluaXQgPSBmYWxzZTtcbiAgICBsYXN0QXJncyA9IGFyZ3M7XG4gICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gIH07XG59XG4iLCJpbXBvcnQgeyBPcmRlciB9IGZyb20gJy4uL2ludGVybmFsL3NvcnQnO1xuXG5leHBvcnQgdHlwZSBTb3J0Qnk8RSwgUyA9IGFueT4gPSAoKGE6IEUsIGI6IEUsIHN0YXRlPzogUykgPT4gbnVtYmVyKSB8IGtleW9mIEU7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU29ydEJ5T3B0aW9uczxFPiB7XG4gIHNvcnRCeT86IFNvcnRCeTxFPjtcbiAgc29ydEJ5T3JkZXI/OiBPcmRlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBRdWVyeUNvbmZpZ09wdGlvbnM8RSA9IGFueT4gZXh0ZW5kcyBTb3J0QnlPcHRpb25zPEU+IHt9XG5cbmV4cG9ydCBjb25zdCBxdWVyeUNvbmZpZ0tleSA9ICdha2l0YVF1ZXJ5Q29uZmlnJztcblxuZXhwb3J0IGZ1bmN0aW9uIFF1ZXJ5Q29uZmlnPEU+KG1ldGFkYXRhOiBRdWVyeUNvbmZpZ09wdGlvbnM8RT4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbnN0cnVjdG9yOiBGdW5jdGlvbikge1xuICAgIGNvbnN0cnVjdG9yW3F1ZXJ5Q29uZmlnS2V5XSA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwLCBrZXlzID0gT2JqZWN0LmtleXMobWV0YWRhdGEpOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGNvbnN0cnVjdG9yW3F1ZXJ5Q29uZmlnS2V5XVtrZXldID0gbWV0YWRhdGFba2V5XTtcbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgeyBTdG9yZSB9IGZyb20gJy4vc3RvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IHF1ZXJ5Q29uZmlnS2V5LCBRdWVyeUNvbmZpZ09wdGlvbnMgfSBmcm9tICcuL3F1ZXJ5LWNvbmZpZyc7XG5cbmV4cG9ydCBjbGFzcyBRdWVyeTxTPiB7XG4gIC8qKiBVc2Ugb25seSBmb3IgaW50ZXJuYWwgcGx1Z2lucyBsaWtlIFBhZ2luYXRpb24gLSBkb24ndCB1c2UgdGhpcyBwcm9wZXJ0eSAqKi9cbiAgX19zdG9yZV9fOiBTdG9yZTxTPjtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgc3RvcmU6IFN0b3JlPFM+KSB7XG4gICAgdGhpcy5fX3N0b3JlX18gPSBzdG9yZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3QgYSBzbGljZSBmcm9tIHRoZSBzdG9yZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdGhpcy5xdWVyeS5zZWxlY3QoKVxuICAgKiB0aGlzLnF1ZXJ5LnNlbGVjdChzdGF0ZSA9PiBzdGF0ZS5lbnRpdGllcylcbiAgICovXG4gIHNlbGVjdDxSPihwcm9qZWN0PzogKHN0b3JlOiBTKSA9PiBSKTogT2JzZXJ2YWJsZTxSPjtcbiAgc2VsZWN0KCk6IE9ic2VydmFibGU8Uz47XG4gIHNlbGVjdDxSPihwcm9qZWN0PzogKHN0b3JlOiBTKSA9PiBSKTogT2JzZXJ2YWJsZTxSIHwgUz4ge1xuICAgIGxldCBzdGF0ZSA9IHByb2plY3QgPyBwcm9qZWN0IDogc3RhdGUgPT4gc3RhdGU7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuX3NlbGVjdChzdGF0ZSk7XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0IG9uY2UgYW5kIGNvbXBsZXRlLlxuICAgKi9cbiAgc2VsZWN0T25jZTxSPihwcm9qZWN0OiAoc3RvcmU6IFMpID0+IFIpOiBPYnNlcnZhYmxlPFI+IHtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3QocHJvamVjdCkucGlwZSh0YWtlKDEpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3QgdGhlIHN0b3JlJ3MgbG9hZGluZyBzdGF0ZS5cbiAgICovXG4gIHNlbGVjdExvYWRpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0KHN0YXRlID0+IChzdGF0ZSBhcyBTICYgeyBsb2FkaW5nOiBib29sZWFuIH0pLmxvYWRpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdCB0aGUgc3RvcmUncyBlcnJvciBzdGF0ZS5cbiAgICovXG4gIHNlbGVjdEVycm9yKCkge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdChzdGF0ZSA9PiAoc3RhdGUgYXMgUyAmIHsgZXJyb3I6IGFueSB9KS5lcnJvcik7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSByYXcgdmFsdWUgb2YgdGhlIHN0b3JlLlxuICAgKi9cbiAgZ2V0U25hcHNob3QoKTogUyB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuX3ZhbHVlKCk7XG4gIH1cblxuICAvKipcbiAgICogIFJldHVybnMgd2hldGhlciB0aGUgc3RhdGUgb2YgdGhlIHN0b3JlIGlzIHByaXN0aW5lICh0aGUgc2V0KCkgbWV0aG9kIGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgY2FsbGVkXG4gICAqICBzaW5jZSB0aGUgc3RvcmUgY3JlYXRpb24sIG9yIHRoZSBsYXN0IHRpbWUgc2V0UHJpc3RpbmUoKXdhcyBjYWxsZWQpLlxuICAgKi9cbiAgZ2V0IGlzUHJpc3RpbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuaXNQcmlzdGluZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHN0YXRlIG9mIHRoZSBzdG9yZSBpcyBkaXJ0eSAodGhlIHNldCgpIG1ldGhvZFxuICAgKiBvciB0aGUgc2V0RGlydHkoKSBtZXRob2QgaGFzIGJlZW4gZXhwbGljaXRseSBjYWxsZWQgc2luY2UgdGhlIHN0b3JlIGNyZWF0aW9uLFxuICAgKiBvciB0aGUgbGFzdCB0aW1lIHNldFByaXN0aW5lKCkgd2FzIGNhbGxlZCkuXG4gICAqL1xuICBnZXQgaXNEaXJ0eSgpIHtcbiAgICByZXR1cm4gIXRoaXMuc3RvcmUuaXNQcmlzdGluZTtcbiAgfVxuXG4gIGdldCBjb25maWcoKTogUXVlcnlDb25maWdPcHRpb25zIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcltxdWVyeUNvbmZpZ0tleV07XG4gIH1cbn1cbiIsImltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGF1ZGl0VGltZSwgbWFwLCBzd2l0Y2hNYXAsIHdpdGhMYXRlc3RGcm9tIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBjb21wYXJlVmFsdWVzLCBPcmRlciB9IGZyb20gJy4uL2ludGVybmFsL3NvcnQnO1xuaW1wb3J0IHsgZW50aXR5RXhpc3RzLCBpc0Z1bmN0aW9uLCBpc1VuZGVmaW5lZCwgdG9Cb29sZWFuIH0gZnJvbSAnLi4vaW50ZXJuYWwvdXRpbHMnO1xuaW1wb3J0IHsgRW50aXR5U3RvcmUgfSBmcm9tICcuL2VudGl0eS1zdG9yZSc7XG5pbXBvcnQgeyBtZW1vaXplT25lIH0gZnJvbSAnLi9tZW1vaXplJztcbmltcG9ydCB7IFF1ZXJ5IH0gZnJvbSAnLi9xdWVyeSc7XG5pbXBvcnQgeyBTb3J0QnksIFNvcnRCeU9wdGlvbnMgfSBmcm9tICcuL3F1ZXJ5LWNvbmZpZyc7XG5pbXBvcnQgeyBBY3RpdmVTdGF0ZSwgRW50aXR5U3RhdGUsIEhhc2hNYXAsIElEIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0T3B0aW9uczxFPiBleHRlbmRzIFNvcnRCeU9wdGlvbnM8RT4ge1xuICBhc09iamVjdD86IGJvb2xlYW47XG4gIGZpbHRlckJ5PzogKChlbnRpdHk6IEUpID0+IGJvb2xlYW4pIHwgdW5kZWZpbmVkO1xuICBsaW1pdFRvPzogbnVtYmVyO1xufVxuXG4vKipcbiAqICBBbiBhYnN0cmFjdGlvbiBmb3IgcXVlcnlpbmcgdGhlIGVudGl0aWVzIGZyb20gdGhlIHN0b3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBRdWVyeUVudGl0eTxTIGV4dGVuZHMgRW50aXR5U3RhdGUsIEU+IGV4dGVuZHMgUXVlcnk8Uz4ge1xuICBwcm90ZWN0ZWQgc3RvcmU6IEVudGl0eVN0b3JlPFMsIEU+O1xuICBwcml2YXRlIG1lbW9pemVkO1xuXG4gIC8qKiBVc2Ugb25seSBmb3IgaW50ZXJuYWwgcGx1Z2lucyBsaWtlIFBhZ2luYXRpb24gLSBkb24ndCB1c2UgdGhpcyBwcm9wZXJ0eSAqKi9cbiAgX19zdG9yZV9fO1xuXG4gIGNvbnN0cnVjdG9yKHN0b3JlOiBFbnRpdHlTdG9yZTxTLCBFPikge1xuICAgIHN1cGVyKHN0b3JlKTtcbiAgICB0aGlzLl9fc3RvcmVfXyA9IHN0b3JlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdCB0aGUgZW50aXJlIHN0b3JlJ3MgZW50aXR5IGNvbGxlY3Rpb24uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHRoaXMuc3RvcmUuc2VsZWN0QWxsKCk7XG4gICAqL1xuICBzZWxlY3RBbGwob3B0aW9uczogeyBhc09iamVjdDogdHJ1ZTsgZmlsdGVyQnk/OiBTZWxlY3RPcHRpb25zPEU+WydmaWx0ZXJCeSddOyBsaW1pdFRvPzogbnVtYmVyOyBzb3J0Qnk/OiB1bmRlZmluZWQ7IHNvcnRCeU9yZGVyPzogdW5kZWZpbmVkIH0pOiBPYnNlcnZhYmxlPEhhc2hNYXA8RT4+O1xuICBzZWxlY3RBbGwob3B0aW9uczogeyBmaWx0ZXJCeTogU2VsZWN0T3B0aW9uczxFPlsnZmlsdGVyQnknXTsgbGltaXRUbz86IG51bWJlcjsgc29ydEJ5PzogU29ydEJ5PEU+OyBzb3J0QnlPcmRlcj86IE9yZGVyIH0pOiBPYnNlcnZhYmxlPEVbXT47XG4gIHNlbGVjdEFsbChvcHRpb25zOiB7IGFzT2JqZWN0OiB0cnVlOyBsaW1pdFRvPzogbnVtYmVyOyBzb3J0Qnk/OiB1bmRlZmluZWQ7IHNvcnRCeU9yZGVyPzogdW5kZWZpbmVkIH0pOiBPYnNlcnZhYmxlPEhhc2hNYXA8RT4+O1xuICBzZWxlY3RBbGwob3B0aW9uczogeyBsaW1pdFRvPzogbnVtYmVyOyBzb3J0Qnk/OiBTb3J0Qnk8RT47IHNvcnRCeU9yZGVyPzogT3JkZXIgfSk6IE9ic2VydmFibGU8RVtdPjtcbiAgc2VsZWN0QWxsKG9wdGlvbnM6IHsgYXNPYmplY3Q6IGZhbHNlOyBmaWx0ZXJCeT86IFNlbGVjdE9wdGlvbnM8RT5bJ2ZpbHRlckJ5J107IGxpbWl0VG8/OiBudW1iZXI7IHNvcnRCeT86IFNvcnRCeTxFPjsgc29ydEJ5T3JkZXI/OiBPcmRlciB9KTogT2JzZXJ2YWJsZTxFW10+O1xuICBzZWxlY3RBbGwoKTogT2JzZXJ2YWJsZTxFW10+O1xuICBzZWxlY3RBbGwoXG4gICAgb3B0aW9uczogU2VsZWN0T3B0aW9uczxFPiA9IHtcbiAgICAgIGFzT2JqZWN0OiBmYWxzZVxuICAgIH1cbiAgKTogT2JzZXJ2YWJsZTxFW10gfCBIYXNoTWFwPEU+PiB7XG4gICAgY29uc3Qgc2VsZWN0U3RhdGUkID0gdGhpcy5zZWxlY3Qoc3RhdGUgPT4gc3RhdGUpO1xuICAgIGNvbnN0IHNlbGVjdEVudGl0aWVzJCA9IHRoaXMuc2VsZWN0KHN0YXRlID0+IHN0YXRlLmVudGl0aWVzKTtcblxuICAgIG9wdGlvbnMuc29ydEJ5ID0gb3B0aW9ucy5zb3J0QnkgfHwgKHRoaXMuY29uZmlnICYmICh0aGlzLmNvbmZpZy5zb3J0QnkgYXMgU29ydEJ5PEU+KSk7XG4gICAgb3B0aW9ucy5zb3J0QnlPcmRlciA9IG9wdGlvbnMuc29ydEJ5T3JkZXIgfHwgKHRoaXMuY29uZmlnICYmIHRoaXMuY29uZmlnLnNvcnRCeU9yZGVyKTtcblxuICAgIHJldHVybiBzZWxlY3RFbnRpdGllcyQucGlwZShcbiAgICAgIHdpdGhMYXRlc3RGcm9tKHNlbGVjdFN0YXRlJCwgKGVudGl0aWVzOiBIYXNoTWFwPEU+LCBzdGF0ZTogUykgPT4ge1xuICAgICAgICBjb25zdCB7IGlkcyB9ID0gc3RhdGU7XG4gICAgICAgIGlmIChvcHRpb25zLmFzT2JqZWN0KSB7XG4gICAgICAgICAgcmV0dXJuIHRvTWFwKGlkcywgZW50aXRpZXMsIG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghb3B0aW9ucy5maWx0ZXJCeSAmJiAhb3B0aW9ucy5zb3J0QnkpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5tZW1vaXplZCkge1xuICAgICAgICAgICAgICB0aGlzLm1lbW9pemVkID0gbWVtb2l6ZU9uZSh0b0FycmF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1lbW9pemVkKHN0YXRlLCBvcHRpb25zKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdG9BcnJheShzdGF0ZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGVudGlyZSBzdG9yZSdzIGVudGl0eSBjb2xsZWN0aW9uLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB0aGlzLnN0b3JlLmdldEFsbCgpO1xuICAgKi9cbiAgZ2V0QWxsKG9wdGlvbnM6IHsgYXNPYmplY3Q6IHRydWU7IGZpbHRlckJ5PzogU2VsZWN0T3B0aW9uczxFPlsnZmlsdGVyQnknXTsgbGltaXRUbz86IG51bWJlciB9KTogSGFzaE1hcDxFPjtcbiAgZ2V0QWxsKG9wdGlvbnM6IHsgZmlsdGVyQnk6IFNlbGVjdE9wdGlvbnM8RT5bJ2ZpbHRlckJ5J107IGxpbWl0VG8/OiBudW1iZXIgfSk6IEVbXTtcbiAgZ2V0QWxsKG9wdGlvbnM6IHsgYXNPYmplY3Q6IHRydWU7IGxpbWl0VG8/OiBudW1iZXIgfSk6IEhhc2hNYXA8RT47XG4gIGdldEFsbChvcHRpb25zOiB7IGxpbWl0VG8/OiBudW1iZXIgfSk6IEVbXTtcbiAgZ2V0QWxsKG9wdGlvbnM6IHsgYXNPYmplY3Q6IGZhbHNlOyBmaWx0ZXJCeT86IFNlbGVjdE9wdGlvbnM8RT5bJ2ZpbHRlckJ5J107IGxpbWl0VG8/OiBudW1iZXIgfSk6IEVbXTtcbiAgZ2V0QWxsKCk6IEVbXTtcbiAgZ2V0QWxsKG9wdGlvbnM6IFNlbGVjdE9wdGlvbnM8RT4gPSB7IGFzT2JqZWN0OiBmYWxzZSwgZmlsdGVyQnk6IHVuZGVmaW5lZCwgbGltaXRUbzogdW5kZWZpbmVkIH0pOiBFW10gfCBIYXNoTWFwPEU+IHtcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuZ2V0U25hcHNob3QoKTtcblxuICAgIGlmIChvcHRpb25zLmFzT2JqZWN0KSB7XG4gICAgICByZXR1cm4gdG9NYXAoc3RhdGUuaWRzLCBzdGF0ZS5lbnRpdGllcywgb3B0aW9ucywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvQXJyYXkoc3RhdGUsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdCBtdWx0aXBsZSBlbnRpdGllcyBmcm9tIHRoZSBzdG9yZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdGhpcy5zdG9yZS5zZWxlY3RNYW55KFsxLDJdKTtcbiAgICovXG4gIHNlbGVjdE1hbnkoaWRzOiBJRFtdLCBvcHRpb25zOiB7IGZpbHRlclVuZGVmaW5lZD86IGJvb2xlYW4gfSA9IHt9KTogT2JzZXJ2YWJsZTxFW10+IHtcbiAgICBjb25zdCBmaWx0ZXJVbmRlZmluZWQgPSBpc1VuZGVmaW5lZChvcHRpb25zLmZpbHRlclVuZGVmaW5lZCkgPyB0cnVlIDogb3B0aW9ucy5maWx0ZXJVbmRlZmluZWQ7XG4gICAgY29uc3QgZW50aXRpZXMgPSBpZHMubWFwKGlkID0+IHRoaXMuc2VsZWN0RW50aXR5KGlkKSk7XG5cbiAgICByZXR1cm4gY29tYmluZUxhdGVzdChlbnRpdGllcykucGlwZShcbiAgICAgIG1hcChlbnRpdGllcyA9PiB7XG4gICAgICAgIHJldHVybiBmaWx0ZXJVbmRlZmluZWQgPyBlbnRpdGllcy5maWx0ZXIodmFsID0+ICFpc1VuZGVmaW5lZCh2YWwpKSA6IGVudGl0aWVzO1xuICAgICAgfSksXG4gICAgICBhdWRpdFRpbWUoMClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdCBhbiBlbnRpdHkgb3IgYSBzbGljZSBvZiBhbiBlbnRpdHkuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHRoaXMucGFnZXNTdG9yZS5zZWxlY3RFbnRpdHkoMSlcbiAgICogdGhpcy5wYWdlc1N0b3JlLnNlbGVjdEVudGl0eSgxLCBlbnRpdHkgPT4gZW50aXR5LmNvbmZpZy5kYXRlKVxuICAgKlxuICAgKi9cbiAgc2VsZWN0RW50aXR5PFI+KGlkOiBJRCk6IE9ic2VydmFibGU8RT47XG4gIHNlbGVjdEVudGl0eTxSPihpZDogSUQsIHByb2plY3Q6IChlbnRpdHk6IEUpID0+IFIpOiBPYnNlcnZhYmxlPFI+O1xuICBzZWxlY3RFbnRpdHk8Uj4oaWQ6IElELCBwcm9qZWN0PzogKGVudGl0eTogRSkgPT4gUik6IE9ic2VydmFibGU8UiB8IEU+IHtcbiAgICBpZiAoIXByb2plY3QpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ieUlkKGlkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zZWxlY3Qoc3RhdGUgPT4ge1xuICAgICAgaWYgKHRoaXMuaGFzRW50aXR5KGlkKSkge1xuICAgICAgICByZXR1cm4gcHJvamVjdCh0aGlzLmdldEVudGl0eShpZCkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBlbnRpdHkgYnkgaWRcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogdGhpcy5zdG9yZS5nZXRFbnRpdHkoMSk7XG4gICAqL1xuICBnZXRFbnRpdHkoaWQ6IElEKTogRSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U25hcHNob3QoKS5lbnRpdGllc1tpZF07XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0IHRoZSBhY3RpdmUgZW50aXR5J3MgaWQuXG4gICAqL1xuICBzZWxlY3RBY3RpdmVJZCgpOiBPYnNlcnZhYmxlPElEPiB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0KHN0YXRlID0+IChzdGF0ZSBhcyBTICYgQWN0aXZlU3RhdGUpLmFjdGl2ZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBhY3RpdmUgaWRcbiAgICovXG4gIGdldEFjdGl2ZUlkKCk6IElEIHtcbiAgICByZXR1cm4gKHRoaXMuZ2V0U25hcHNob3QoKSBhcyBTICYgQWN0aXZlU3RhdGUpLmFjdGl2ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3QgdGhlIGFjdGl2ZSBlbnRpdHkuXG4gICAqL1xuICBzZWxlY3RBY3RpdmU8Uj4oKTogT2JzZXJ2YWJsZTxFPjtcbiAgc2VsZWN0QWN0aXZlPFI+KHByb2plY3Q6IChlbnRpdHk6IEUpID0+IFIpOiBPYnNlcnZhYmxlPFI+O1xuICBzZWxlY3RBY3RpdmU8Uj4ocHJvamVjdD86IChlbnRpdHk6IEUpID0+IFIpOiBPYnNlcnZhYmxlPFIgfCBFPiB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0QWN0aXZlSWQoKS5waXBlKHN3aXRjaE1hcChhY3RpdmVJZCA9PiB0aGlzLnNlbGVjdEVudGl0eShhY3RpdmVJZCwgcHJvamVjdCkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGFjdGl2ZSBlbnRpdHkuXG4gICAqL1xuICBnZXRBY3RpdmUoKTogRSB7XG4gICAgY29uc3QgYWN0aXZlSWQ6IElEID0gdGhpcy5nZXRBY3RpdmVJZCgpO1xuICAgIHJldHVybiB0b0Jvb2xlYW4oYWN0aXZlSWQpID8gdGhpcy5nZXRFbnRpdHkoYWN0aXZlSWQpIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdCB0aGUgc3RvcmUncyBlbnRpdHkgY29sbGVjdGlvbiBsZW5ndGguXG4gICAqL1xuICBzZWxlY3RDb3VudChwcmVkaWNhdGU/OiAoZW50aXR5OiBFKSA9PiBib29sZWFuKTogT2JzZXJ2YWJsZTxudW1iZXI+IHtcbiAgICBpZiAoaXNGdW5jdGlvbihwcmVkaWNhdGUpKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZWxlY3RBbGwoe1xuICAgICAgICBmaWx0ZXJCeTogcHJlZGljYXRlXG4gICAgICB9KS5waXBlKG1hcChlbnRpdGllcyA9PiBlbnRpdGllcy5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zZWxlY3Qoc3RvcmUgPT4gc3RvcmUuaWRzLmxlbmd0aCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBzdG9yZSdzIGVudGl0eSBjb2xsZWN0aW9uIGxlbmd0aC5cbiAgICovXG4gIGdldENvdW50KHByZWRpY2F0ZT86IChlbnRpdHk6IEUpID0+IGJvb2xlYW4pOiBudW1iZXIge1xuICAgIGlmIChpc0Z1bmN0aW9uKHByZWRpY2F0ZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEFsbCgpLmZpbHRlcihwcmVkaWNhdGUpLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0U25hcHNob3QoKS5pZHMubGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciBlbnRpdHkgZXhpc3RzLlxuICAgKi9cbiAgaGFzRW50aXR5KGlkOiBJRCk6IGJvb2xlYW47XG4gIGhhc0VudGl0eShwcm9qZWN0OiAoZW50aXR5OiBFKSA9PiBib29sZWFuKTogYm9vbGVhbjtcbiAgaGFzRW50aXR5KHByb2plY3RPcklkOiBhbnkpOiBib29sZWFuIHtcbiAgICBpZiAoaXNGdW5jdGlvbihwcm9qZWN0T3JJZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEFsbCgpLnNvbWUocHJvamVjdE9ySWQpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvamVjdE9ySWQgaW4gdGhpcy5zdG9yZS5lbnRpdGllcztcbiAgfVxuXG4gIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U25hcHNob3QoKS5pZHMubGVuZ3RoID09PSAwO1xuICB9XG5cbiAgcHJpdmF0ZSBfYnlJZChpZDogSUQpOiBPYnNlcnZhYmxlPEU+IHtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3Qoc3RhdGUgPT4gdGhpcy5nZXRFbnRpdHkoaWQpKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMubWVtb2l6ZWQgPSBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXk8RSwgUyBleHRlbmRzIEVudGl0eVN0YXRlPihzdGF0ZTogUywgb3B0aW9uczogU2VsZWN0T3B0aW9uczxFPik6IEVbXSB7XG4gIGxldCBhcnIgPSBbXTtcbiAgY29uc3QgeyBpZHMsIGVudGl0aWVzIH0gPSBzdGF0ZTtcbiAgY29uc3QgeyBmaWx0ZXJCeSwgbGltaXRUbywgc29ydEJ5LCBzb3J0QnlPcmRlciB9ID0gb3B0aW9ucztcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGlkcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGlkID0gaWRzW2ldO1xuXG4gICAgaWYgKCFlbnRpdHlFeGlzdHMoaWQsIGVudGl0aWVzKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKCFmaWx0ZXJCeSkge1xuICAgICAgYXJyLnB1c2goZW50aXRpZXNbaWRdKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChmaWx0ZXJCeShlbnRpdGllc1tpZF0pKSB7XG4gICAgICBhcnIucHVzaChlbnRpdGllc1tpZF0pO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzb3J0QnkpIHtcbiAgICBsZXQgX3NvcnRCeTogYW55ID0gaXNGdW5jdGlvbihzb3J0QnkpID8gc29ydEJ5IDogY29tcGFyZVZhbHVlcyhzb3J0QnksIHNvcnRCeU9yZGVyKTtcbiAgICBhcnIgPSBhcnIuc29ydCgoYSwgYikgPT4gX3NvcnRCeShhLCBiLCBzdGF0ZSkpO1xuICB9XG4gIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGxpbWl0VG8gfHwgYXJyLmxlbmd0aCwgYXJyLmxlbmd0aCk7XG5cbiAgcmV0dXJuIGxlbmd0aCA9PT0gYXJyLmxlbmd0aCA/IGFyciA6IGFyci5zbGljZSgwLCBsZW5ndGgpO1xufVxuXG5mdW5jdGlvbiB0b01hcDxFPihpZHM6IElEW10sIGVudGl0aWVzOiBIYXNoTWFwPEU+LCBvcHRpb25zOiBTZWxlY3RPcHRpb25zPEU+LCBnZXQgPSBmYWxzZSk6IEhhc2hNYXA8RT4ge1xuICBjb25zdCBtYXAgPSB7fTtcbiAgY29uc3QgeyBmaWx0ZXJCeSwgbGltaXRUbyB9ID0gb3B0aW9ucztcblxuICBpZiAoZ2V0ICYmICFmaWx0ZXJCeSAmJiAhbGltaXRUbykge1xuICAgIHJldHVybiBlbnRpdGllcztcbiAgfVxuXG4gIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGxpbWl0VG8gfHwgaWRzLmxlbmd0aCwgaWRzLmxlbmd0aCk7XG5cbiAgaWYgKGZpbHRlckJ5ICYmIGlzVW5kZWZpbmVkKGxpbWl0VG8pID09PSBmYWxzZSkge1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IGlkcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGNvdW50ID09PSBsaW1pdFRvKSBicmVhaztcbiAgICAgIGNvbnN0IGlkID0gaWRzW2ldO1xuICAgICAgaWYgKCFlbnRpdHlFeGlzdHMoaWQsIGVudGl0aWVzKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChmaWx0ZXJCeShlbnRpdGllc1tpZF0pKSB7XG4gICAgICAgIG1hcFtpZF0gPSBlbnRpdGllc1tpZF07XG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGlkID0gaWRzW2ldO1xuXG4gICAgICBpZiAoIWVudGl0eUV4aXN0cyhpZCwgZW50aXRpZXMpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWZpbHRlckJ5KSB7XG4gICAgICAgIG1hcFtpZF0gPSBlbnRpdGllc1tpZF07XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodG9Cb29sZWFuKGZpbHRlckJ5KGVudGl0aWVzW2lkXSkpKSB7XG4gICAgICAgIG1hcFtpZF0gPSBlbnRpdGllc1tpZF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1hcDtcbn1cbiIsImltcG9ydCB7IGVuZEJhdGNoLCBzdGFydEJhdGNoIH0gZnJvbSAnLi4vaW50ZXJuYWwvdHJhbnNhY3Rpb24uaW50ZXJuYWwnO1xuXG4vKipcbiAqICBBIGxvZ2ljYWwgdHJhbnNhY3Rpb24uXG4gKiAgVXNlIHRoaXMgdHJhbnNhY3Rpb24gdG8gb3B0aW1pemUgdGhlIGRpc3BhdGNoIG9mIGFsbCB0aGUgc3RvcmVzLlxuICogIFRoZSBmb2xsb3dpbmcgY29kZSB3aWxsIHVwZGF0ZSB0aGUgc3RvcmUsIEJVVCAgZW1pdHMgb25seSBvbmNlXG4gKlxuICogIEBleGFtcGxlXG4gKiAgYXBwbHlUcmFuc2FjdGlvbigoKSA9PiB7XG4gKiAgICB0aGlzLnRvZG9zU3RvcmUuYWRkKG5ldyBUb2RvKDEsIHRpdGxlKSk7XG4gKiAgICB0aGlzLnRvZG9zU3RvcmUuYWRkKG5ldyBUb2RvKDIsIHRpdGxlKSk7XG4gKiAgfSk7XG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlUcmFuc2FjdGlvbjxUPihhY3Rpb246ICgpID0+IFQsIHRoaXNBcmcgPSB1bmRlZmluZWQpOiBUIHtcbiAgc3RhcnRCYXRjaCgpO1xuICB0cnkge1xuICAgIHJldHVybiBhY3Rpb24uYXBwbHkodGhpc0FyZyk7XG4gIH0gZmluYWxseSB7XG4gICAgZW5kQmF0Y2goKTtcbiAgfVxufVxuXG4vKipcbiAqICBBIGxvZ2ljYWwgdHJhbnNhY3Rpb24uXG4gKiAgVXNlIHRoaXMgdHJhbnNhY3Rpb24gdG8gb3B0aW1pemUgdGhlIGRpc3BhdGNoIG9mIGFsbCB0aGUgc3RvcmVzLlxuICpcbiAqICBUaGUgZm9sbG93aW5nIGNvZGUgd2lsbCB1cGRhdGUgdGhlIHN0b3JlLCBCVVQgIGVtaXRzIG9ubHkgb25jZS5cbiAqXG4gKiAgQGV4YW1wbGVcbiAqICBAdHJhbnNhY3Rpb25cbiAqICBhZGRUb2RvcygpIHtcbiAqICAgIHRoaXMudG9kb3NTdG9yZS5hZGQobmV3IFRvZG8oMSwgdGl0bGUpKTtcbiAqICAgIHRoaXMudG9kb3NTdG9yZS5hZGQobmV3IFRvZG8oMiwgdGl0bGUpKTtcbiAqICB9XG4gKlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zYWN0aW9uKCkge1xuICByZXR1cm4gZnVuY3Rpb24odGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcsIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcikge1xuICAgIGNvbnN0IG9yaWdpbmFsTWV0aG9kID0gZGVzY3JpcHRvci52YWx1ZTtcblxuICAgIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICByZXR1cm4gYXBwbHlUcmFuc2FjdGlvbigoKSA9PiB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbE1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgfTtcbn1cbiIsImltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnLi4vaW50ZXJuYWwvdXRpbHMnO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZ2VvcmFwYm94L2ltbXV0YWJsZS1hcnJheXNcblxuLyoqXG4gKiBBZGRzIG9uZSBvciBtb3JlIGVsZW1lbnRzIHRvIHRoZSBlbmQgb2YgYW4gYXJyYXkgYnkgcmV0dXJuaW5nXG4gKiBhIG5ldyBhcnJheSBpbnN0ZWFkIG9mIG11dGF0aW5nIHRoZSBvcmlnaW5hbCBvbmUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IG9yaWdpbmFsQXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddO1xuICogY29uc3QgcmVzdWx0QXJyYXkgPSBwdXNoKG9yaWdpbmFsQXJyYXksICdmJywgJ2cnKTtcbiAqIC8vIC0+IG9yaWdpbmFsQXJyYXkgWydhJywgJ2InLCAnYycsICdkJywgJ2UnXVxuICogLy8gLT4gcmVzdWx0QXJyYXkgWydhJywgJ2InLCAnYycsICdkJywgJ2UnLCAnZicsICdnJ11cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHB1c2g8VD4oYXJyYXk6IFRbXSwgLi4uZWxlbWVudE46IFRbXSk6IFRbXSB7XG4gIHJldHVybiBbLi4uYXJyYXksIC4uLmVsZW1lbnROXTtcbn1cblxuLyoqXG4gKiBEZWxldGVzIGFuIGVsZW1lbnQgZnJvbSBhbiBhcnJheSBieSBpdHMgaW5kZXggaW4gdGhlIGFycmF5LlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBvcmlnaW5hbEFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJywgJ2UnXTtcbiAqIGNvbnN0IHJlc3VsdEFycmF5ID0gcmVtb3ZlKG9yaWdpbmFsQXJyYXksIDIpO1xuICogLy8gLT4gb3JpZ2luYWxBcnJheSBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddXG4gKiAvLyAtPiByZXN1bHRBcnJheSBbJ2EnLCAnYicsICdkJywgJ2UnXVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlPFQ+KGFycmF5OiBUW10sIGluZGV4OiBudW1iZXIpOiBUW10ge1xuICByZXR1cm4gaW5kZXggPj0gMCA/IFsuLi5hcnJheS5zbGljZSgwLCBpbmRleCksIC4uLmFycmF5LnNsaWNlKGluZGV4ICsgMSldIDogWy4uLmFycmF5XTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBsYXN0IGVsZW1lbnQgZnJvbSBhbiBhcnJheSBieSByZXR1cm5pbmdcbiAqIGEgbmV3IGFycmF5IGluc3RlYWQgb2YgbXV0YXRpbmcgdGhlIG9yaWdpbmFsIG9uZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgb3JpZ2luYWxBcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCcsICdlJ107XG4gKiBjb25zdCByZXN1bHRBcnJheSA9IHBvcChvcmlnaW5hbEFycmF5KTtcbiAqIC8vIC0+IG9yaWdpbmFsQXJyYXkgWydhJywgJ2InLCAnYycsICdkJywgJ2UnXVxuICogLy8gLT4gcmVzdWx0QXJyYXkgWydhJywgJ2InLCAnYycsICdkJ11cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvcDxUPihhcnJheTogVFtdKTogVFtdIHtcbiAgcmV0dXJuIGFycmF5LnNsaWNlKDAsIC0xKTtcbn1cblxuLyoqXG4gKiBBZGRzIG9uZSBvciBtb3JlIGVsZW1lbnRzIHRvIHRoZSBiZWdpbm5pbmcgb2YgYW4gYXJyYXkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IG9yaWdpbmFsQXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddO1xuICogY29uc3QgcmVzdWx0QXJyYXkgPSB1bnNoaWZ0KG9yaWdpbmFsQXJyYXksICdmJywgJ2cnKTtcbiAqIC8vIC0+IG9yaWdpbmFsQXJyYXkgWydhJywgJ2InLCAnYycsICdkJywgJ2UnXVxuICogLy8gLT4gcmVzdWx0QXJyYXkgWydmJywgJ2cnLCAnYScsICdiJywgJ2MnLCAnZCcsICdlJ11cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVuc2hpZnQ8VD4oYXJyYXk6IFRbXSwgLi4uZWxlbWVudE46IFRbXSk6IFRbXSB7XG4gIHJldHVybiBbLi4uZWxlbWVudE4sIC4uLmFycmF5XTtcbn1cblxuLyoqXG4gKiBTb3J0cyB0aGUgZWxlbWVudHMgb2YgYW4gYXJyYXkgKG5vdCBpbiBwbGFjZSkgYW5kIHJldHVybnMgYSBzb3J0ZWQgYXJyYXkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IG51bWJlckFycmF5ID0gWzIwLCAzLCA0LCAxMCwgLTMsIDEsIDAsIDVdO1xuICogY29uc3Qgc3RyaW5nQXJyYXkgPSBbJ0JsdWUnLCAnSHVtcGJhY2snLCAnQmVsdWdhJ107XG4gKlxuICogY29uc3QgcmVzdWx0QXJyYXkgPSBzb3J0KG51bWJlckFycmF5LCAoYSwgYikgPT4gYSAtIGIpO1xuICogLy8gLT4gbnVtYmVyQXJyYXkgWzIwLCAzLCA0LCAxMCwgLTMsIDEsIDAsIDVdXG4gKiAvLyAtPiByZXN1bHRBcnJheSBbLTMsIDAsIDEsIDMsIDQsIDUsIDEwLCAyMF1cbiAqXG4gKiBjb25zdCByZXN1bHRBcnJheSA9IHNvcnQobnVtYmVyQXJyYXksIChhLCBiKSA9PiBiIC0gYSk7XG4gKiAvLyAtPiBudW1iZXJBcnJheSBbMjAsIDMsIDQsIDEwLCAtMywgMSwgMCwgNV1cbiAqIC8vIC0+IHJlc3VsdEFycmF5IFsyMCwgMTAsIDUsIDQsIDMsIDEsIDAsIC0zXVxuICpcbiAqIGNvbnN0IHJlc3VsdEFycmF5ID0gc29ydChzdHJpbmdBcnJheSk7XG4gKiAvLyAtPiBzdHJpbmdBcnJheSBbJ0JsdWUnLCAnSHVtcGJhY2snLCAnQmVsdWdhJ11cbiAqIC8vIC0+IHJlc3VsdEFycmF5IFsnQmVsdWdhJywgJ0JsdWUnLCAnSHVtcGJhY2snXVxuICpcbiAqIGNvbnN0IHJlc3VsdEFycmF5ID0gc29ydChzdHJpbmdBcnJheSwgKGEsIGIpID0+IGEudG9Mb3dlckNhc2UoKSA8IGIudG9Mb3dlckNhc2UoKSk7XG4gKiAvLyAtPiBzdHJpbmdBcnJheSBbJ0JsdWUnLCAnSHVtcGJhY2snLCAnQmVsdWdhJ11cbiAqIC8vIC0+IHJlc3VsdEFycmF5IFsnSHVtcGJhY2snLCAnQmx1ZScsICdCZWx1Z2EnXVxuICovXG5leHBvcnQgZnVuY3Rpb24gc29ydDxUPihhcnJheTogVFtdLCBjb21wYXJlRnVuY3Rpb24/OiAoYTogVCwgYjogVCkgPT4gbnVtYmVyKTogVFtdIHtcbiAgcmV0dXJuIFsuLi5hcnJheV0uc29ydChjb21wYXJlRnVuY3Rpb24pO1xufVxuXG4vKipcbiAqIFJldmVyc2VzIGFuIGFycmF5IChub3QgaW4gcGxhY2UpLlxuICogVGhlIGZpcnN0IGFycmF5IGVsZW1lbnQgYmVjb21lcyB0aGUgbGFzdCwgYW5kIHRoZSBsYXN0IGFycmF5IGVsZW1lbnQgYmVjb21lcyB0aGUgZmlyc3QuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IG9yaWdpbmFsQXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddO1xuICogY29uc3QgcmVzdWx0QXJyYXkgPSByZXZlcnNlKG9yaWdpbmFsQXJyYXkpO1xuICogLy8gLT4gb3JpZ2luYWxBcnJheSBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddXG4gKiAvLyAtPiByZXN1bHRBcnJheSBbJ2UnLCAnZCcsICdjJywgJ2InLCAnYSddXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXZlcnNlPFQ+KGFycmF5OiBUW10pOiBUW10ge1xuICByZXR1cm4gWy4uLmFycmF5XS5yZXZlcnNlKCk7XG59XG5cbi8qKlxuICogU3dhcCBpdGVtcyBpbiB0aGUgYXJyYXlcbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgb3JpZ2luYWxBcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCcsICdlJ107XG4gKiBjb25zdCByZXN1bHRBcnJheSA9IHN3YXAob3JpZ2luYWxBcnJheSwgMSwgNCk7XG4gKiAvLyAtPiBvcmlnaW5hbEFycmF5IFsnYScsICdiJywgJ2MnLCAnZCcsICdlJ11cbiAqIC8vIC0+IHJlc3VsdEFycmF5IFsnYScsICdlJywgJ2MnLCAnZCcsICdiJ11cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN3YXA8VD4oYXJyYXk6IFRbXSwgZmlyc3RJbmRleDogbnVtYmVyLCBzZWNvbmRJbmRleDogbnVtYmVyKTogVFtdIHtcbiAgY29uc3QgcmVzdWx0cyA9IGFycmF5LnNsaWNlKCk7XG4gIGNvbnN0IGZpcnN0SXRlbSA9IGFycmF5W2ZpcnN0SW5kZXhdO1xuICByZXN1bHRzW2ZpcnN0SW5kZXhdID0gYXJyYXlbc2Vjb25kSW5kZXhdO1xuICByZXN1bHRzW3NlY29uZEluZGV4XSA9IGZpcnN0SXRlbTtcblxuICByZXR1cm4gcmVzdWx0cztcbn1cblxuLyoqXG4gKiBVcGRhdGUgaXRlbSBpbiB0aGUgYXJyYXlcbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgb3JpZ2luYWxBcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCcsICdlJ107XG4gKiBjb25zdCByZXN1bHRBcnJheSA9IHVwZGF0ZShvcmlnaW5hbEFycmF5LCAxLCAnbmV3SXRlbScpO1xuICogLy8gLT4gcmVzdWx0QXJyYXkgWydhJywgJ25ld0l0ZW0nLCAnYycsICdkJywgJ2InXVxuICpcbiAqIGNvbnN0IG9yaWdpbmFsQXJyYXkgPSBbe3RpdGxlOiAxfSwge3RpdGxlOiAyfV07XG4gKiBjb25zdCByZXN1bHRBcnJheSA9IHVwZGF0ZShvcmlnaW5hbEFycmF5LCBvcmlnaW5hbEFycmF5WzBdLCB7dGl0bGU6IDN9KTtcbiAqIC8vIC0+IHJlc3VsdEFycmF5ICBbe3RpdGxlOiAzfSwge3RpdGxlOiAyfV07XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGU8VD4oYXJyYXk6IFRbXSwgaW5kZXhPckl0ZW06IG51bWJlciB8IG9iamVjdCwgdXBkYXRlZDogVCk6IFRbXSB7XG4gIHJldHVybiBhcnJheS5tYXAoKGN1cnJlbnQsIGlkeCkgPT4ge1xuICAgIGlmICh0eXBlb2YgaW5kZXhPckl0ZW0gPT09ICdudW1iZXInICYmIGlkeCA9PT0gaW5kZXhPckl0ZW0pIHtcbiAgICAgIHJldHVybiB1cGRhdGVkO1xuICAgIH1cblxuICAgIGlmIChpc09iamVjdChpbmRleE9ySXRlbSkgJiYgKGluZGV4T3JJdGVtIGFzIGFueSkgPT09IGN1cnJlbnQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLihpbmRleE9ySXRlbSBhcyBvYmplY3QpLFxuICAgICAgICAuLi4odXBkYXRlZCBhcyBhbnkpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50O1xuICB9KTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGV4aXN0aW5nIGVsZW1lbnRzIGFuZC9vciBhZGRzIG5ldyBlbGVtZW50cyB0byBhbiBhcnJheS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgb3JpZ2luYWxBcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCcsICdlJ107XG4gKiBjb25zdCByZXN1bHRBcnJheSA9IHNwbGljZShvcmlnaW5hbEFycmF5LCAwKTtcbiAqIC8vIC0+IG9yaWdpbmFsQXJyYXkgWydhJywgJ2InLCAnYycsICdkJywgJ2UnXVxuICogLy8gLT4gcmVzdWx0QXJyYXkgW11cbiAqXG4gKiBjb25zdCBvcmlnaW5hbEFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJywgJ2UnXTtcbiAqIGNvbnN0IHJlc3VsdEFycmF5ID0gc3BsaWNlKG9yaWdpbmFsQXJyYXksIDAsIDEpO1xuICogLy8gLT4gb3JpZ2luYWxBcnJheSBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddXG4gKiAvLyAtPiByZXN1bHRBcnJheSBbJ2InLCAnYycsICdkJywgJ2UnXVxuICpcbiAqIGNvbnN0IG9yaWdpbmFsQXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddO1xuICogY29uc3QgcmVzdWx0QXJyYXkgPSBzcGxpY2Uob3JpZ2luYWxBcnJheSwgMCwgMyk7XG4gKiAvLyAtPiBvcmlnaW5hbEFycmF5IFsnYScsICdiJywgJ2MnLCAnZCcsICdlJ11cbiAqIC8vIC0+IHJlc3VsdEFycmF5IFsnZCcsICdlJ11cbiAqXG4gKiBjb25zdCBvcmlnaW5hbEFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJywgJ2UnXTtcbiAqIGNvbnN0IHJlc3VsdEFycmF5ID0gc3BsaWNlKG9yaWdpbmFsQXJyYXksIDAsIG9yaWdpbmFsQXJyYXkubGVuZ3RoKTtcbiAqIC8vIC0+IG9yaWdpbmFsQXJyYXkgWydhJywgJ2InLCAnYycsICdkJywgJ2UnXVxuICogLy8gLT4gcmVzdWx0QXJyYXkgW11cbiAqXG4gKiBjb25zdCBvcmlnaW5hbEFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJywgJ2UnXTtcbiAqIGNvbnN0IHJlc3VsdEFycmF5ID0gc3BsaWNlKG9yaWdpbmFsQXJyYXksIDAsIC0zKTtcbiAqIC8vIC0+IG9yaWdpbmFsQXJyYXkgWydhJywgJ2InLCAnYycsICdkJywgJ2UnXVxuICogLy8gLT4gcmVzdWx0QXJyYXkgWydhJywgJ2InLCAnYycsICdkJywgJ2UnXVxuICpcbiAqIGNvbnN0IG9yaWdpbmFsQXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddO1xuICogY29uc3QgcmVzdWx0QXJyYXkgPSBzcGxpY2Uob3JpZ2luYWxBcnJheSwgMCwgMCwgJ2xvcmVtJywgJ2lwc3VtJyk7XG4gKiAvLyAtPiBvcmlnaW5hbEFycmF5IFsnYScsICdiJywgJ2MnLCAnZCcsICdlJ11cbiAqIC8vIC0+IHJlc3VsdEFycmF5IFsnbG9yZW0nLCAnaXBzdW0nLCAnYScsICdiJywgJ2MnLCAnZCcsICdlJ11cbiAqXG4gKiBjb25zdCBvcmlnaW5hbEFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJywgJ2UnXTtcbiAqIGNvbnN0IHJlc3VsdEFycmF5ID0gc3BsaWNlKG9yaWdpbmFsQXJyYXksIG9yaWdpbmFsQXJyYXkubGVuZ3RoLCAwLCAnbG9yZW0nLCAnaXBzdW0nKTtcbiAqIC8vIC0+IG9yaWdpbmFsQXJyYXkgWydhJywgJ2InLCAnYycsICdkJywgJ2UnXVxuICogLy8gLT4gcmVzdWx0QXJyYXkgWydhJywgJ2InLCAnYycsICdkJywgJ2UnLCAnbG9yZW0nLCAnaXBzdW0nXVxuICpcbiAqIGNvbnN0IG9yaWdpbmFsQXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddO1xuICogY29uc3QgcmVzdWx0QXJyYXkgPSBzcGxpY2Uob3JpZ2luYWxBcnJheSwgMCwgMiwgJ2xvcmVtJywgJ2lwc3VtJyk7XG4gKiAvLyAtPiBvcmlnaW5hbEFycmF5IFsnYScsICdiJywgJ2MnLCAnZCcsICdlJ11cbiAqIC8vIC0+IHJlc3VsdEFycmF5IFsnbG9yZW0nLCAnaXBzdW0nLCAnYycsICdkJywgJ2UnXVxuICpcbiAqIGNvbnN0IG9yaWdpbmFsQXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddO1xuICogY29uc3QgcmVzdWx0QXJyYXkgPSBzcGxpY2Uob3JpZ2luYWxBcnJheSwgb3JpZ2luYWxBcnJheS5sZW5ndGggLSAyLCAyLCAnbG9yZW0nLCAnaXBzdW0nKTtcbiAqIC8vIC0+IG9yaWdpbmFsQXJyYXkgWydhJywgJ2InLCAnYycsICdkJywgJ2UnXVxuICogLy8gLT4gcmVzdWx0QXJyYXkgWydhJywgJ2InLCAnYycsICdsb3JlbScsICdpcHN1bSddXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGxpY2U8VD4oYXJyYXk6IFRbXSwgc3RhcnQgPSBhcnJheS5sZW5ndGgsIGRlbGV0ZUNvdW50ID0gYXJyYXkubGVuZ3RoIC0gc3RhcnQsIC4uLmVsZW1lbnROOiBUW10pOiBUW10ge1xuICByZXR1cm4gWy4uLmFycmF5LnNsaWNlKDAsIHN0YXJ0KSwgLi4uZWxlbWVudE4sIC4uLmFycmF5LnNsaWNlKHN0YXJ0ICsgKGRlbGV0ZUNvdW50IDwgMCA/IDAgOiBkZWxldGVDb3VudCkpXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZTxUPihhcnI6IFRbXSwgaXRlbTogVCkge1xuICByZXR1cm4gYXJyLmluZGV4T2YoaXRlbSkgPiAtMSA/IGFyci5maWx0ZXIoY3VycmVudCA9PiBpdGVtICE9PSBjdXJyZW50KSA6IHB1c2goYXJyLCBpdGVtKTtcbn1cbiIsIi8qKiBDaGVja3MgaWYgdmFsdWUgaXMgbnVsbCBvciB1bmRlZmluZWQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGNvbnN0IGZpbHRlck5pbCA9IDxUPihzb3VyY2U6IE9ic2VydmFibGU8VD4pID0+IHNvdXJjZS5waXBlKGZpbHRlcih2YWx1ZSA9PiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSk7XG4iLCJpbXBvcnQgeyBBY3Rpb24sIF9fZ2xvYmFsU3RhdGUgfSBmcm9tICcuL2dsb2JhbC1zdGF0ZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseUFjdGlvbjxUPihmdW5jOiAoKSA9PiBULCBhY3Rpb246IEFjdGlvbiwgdGhpc0FyZyA9IHVuZGVmaW5lZCk6IFQge1xuICBfX2dsb2JhbFN0YXRlLnNldEN1c3RvbUFjdGlvbihhY3Rpb24sIHRydWUpO1xuICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFjdGlvbihhY3Rpb246IEFjdGlvbiwgc2tpcFRyYW5zYWN0aW9uTXNnID0gdHJ1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24odGFyZ2V0OiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcsIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcikge1xuICAgIGNvbnN0IG9yaWdpbmFsTWV0aG9kID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgX19nbG9iYWxTdGF0ZS5zZXRDdXN0b21BY3Rpb24oYWN0aW9uLCBza2lwVHJhbnNhY3Rpb25Nc2cpO1xuICAgICAgcmV0dXJuIG9yaWdpbmFsTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG5cbiAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgfTtcbn1cbiIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZnVuY3Rpb24gc2VyaWFsaXplKG9iamVjdCkge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqZWN0LCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdvcmtlcigpIHtcbiAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFxuICAgIFtcbiAgICAgIGBzZWxmLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgZnVuY3Rpb24gZGVzZXJpYWxpemUoc3RyKSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHN0ciB8fCAnJywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICB2YWx1ZS5zdWJzdHIoMCwgOCkgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRCb2R5ID0gdmFsdWUuaW5kZXhPZigneycpICsgMTtcbiAgICAgICAgICAgIHZhciBlbmRCb2R5ID0gdmFsdWUubGFzdEluZGV4T2YoJ30nKTtcbiAgICAgICAgICAgIHZhciBzdGFydEFyZ3MgPSB2YWx1ZS5pbmRleE9mKCcoJykgKyAxO1xuICAgICAgICAgICAgdmFyIGVuZEFyZ3MgPSB2YWx1ZS5pbmRleE9mKCcpJyk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKHZhbHVlLnN1YnN0cmluZyhzdGFydEFyZ3MsIGVuZEFyZ3MpLCB2YWx1ZS5zdWJzdHJpbmcoc3RhcnRCb2R5LCBlbmRCb2R5KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBkZXNlcmlhbGl6ZWQgPSBkZXNlcmlhbGl6ZShlLmRhdGEpO1xuICAgICAgdmFyIG1hcHBlZCA9IGRlc2VyaWFsaXplZC5kYXRhLm1hcChmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkZXNlcmlhbGl6ZWQuZmFjdG9yeShkKTtcbiAgICAgIH0pO1xuXG4gICAgICBzZWxmLnBvc3RNZXNzYWdlKG1hcHBlZCk7XG4gICAgfWBcbiAgICBdLFxuICAgIHtcbiAgICAgIHR5cGU6ICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgfVxuICApO1xuXG4gIGNvbnN0IHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gIHJldHVybiBuZXcgV29ya2VyKHVybCk7XG59XG5cbi8qKlxuICogIEBleGFtcGxlXG4gKiAgIGNvbnN0IG1vY2tUb2RvcyA9IEFycmF5LmZyb20oe2xlbmd0aDogMTAwMDB9LCAoXywgeCkgPT4gKHtpZDogeH0pKTtcbiAqXG4gKiAgIG9mKG1vY2tUb2RvcykucGlwZShtYXBJbldvcmtlcjxUb2RvPihjcmVhdGVUb2RvKSlcbiAqICAgLnN1YnNjcmliZShyZXMgPT4gY29uc29sZS5sb2cocmVzKSk7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXBJbldvcmtlcjxUPihmYWN0b3J5Rm46IEZ1bmN0aW9uKSB7XG4gIHJldHVybiBmdW5jdGlvbihzb3VyY2UpOiBPYnNlcnZhYmxlPFRbXT4ge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PiB7XG4gICAgICBjb25zdCB3b3JrZXIgPSBjcmVhdGVXb3JrZXIoKTtcblxuICAgICAgd29ya2VyLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dChlLmRhdGEpO1xuICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB3b3JrZXIudGVybWluYXRlKCk7XG4gICAgICB9O1xuXG4gICAgICB3b3JrZXIub25lcnJvciA9IGZ1bmN0aW9uKGVycikge1xuICAgICAgICBvYnNlcnZlci5lcnJvcihlcnIpO1xuICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB3b3JrZXIudGVybWluYXRlKCk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZSh2YWx1ZSA9PiB7XG4gICAgICAgIGNvbnN0IGlucHV0ID0ge1xuICAgICAgICAgIGZhY3Rvcnk6IGZhY3RvcnlGbixcbiAgICAgICAgICBkYXRhOiB2YWx1ZVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzZXJpYWxpemVkID0gc2VyaWFsaXplKGlucHV0KTtcblxuICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2Uoc2VyaWFsaXplZCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn1cbiIsImltcG9ydCB7IF9fc3RvcmVzX18gfSBmcm9tICcuL3N0b3JlJztcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi4vaW50ZXJuYWwvdXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgU25hcHNob3RNYW5hZ2VyIHtcbiAgLyoqXG4gICAqIEdldCBhIHNuYXBzaG90IG9mIHRoZSB3aG9sZSBzdGF0ZSBvciBhIHNwZWNpZmljIHN0b3Jlc1xuICAgKiBVc2UgaXQgT05MWSBmb3IgdGhpbmdzIGxpa2Ugc2F2aW5nIHRoZSBzdGF0ZSBpbiB0aGUgc2VydmVyXG4gICAqL1xuICBnZXRTdG9yZXNTbmFwc2hvdChzdG9yZXM6IHN0cmluZ1tdID0gW10pIHtcbiAgICBsZXQgYWNjID0ge307XG4gICAgY29uc3QgaGFzSW5jbHVkZSA9IHN0b3Jlcy5sZW5ndGggPiAwO1xuICAgIGNvbnN0IGtleXMgPSBoYXNJbmNsdWRlID8gc3RvcmVzIDogT2JqZWN0LmtleXMoX19zdG9yZXNfXyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgc3RvcmVOYW1lID0ga2V5c1tpXTtcbiAgICAgIGFjY1tzdG9yZU5hbWVdID0gX19zdG9yZXNfX1tzdG9yZU5hbWVdLl92YWx1ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHNuYXBzaG90IHdlIGdldCBmcm9tIHRoZSBzZXJ2ZXJcbiAgICovXG4gIHNldFN0b3Jlc1NuYXBzaG90KHN0b3JlczogeyBbc3RvcmVOYW1lOiBzdHJpbmddOiBhbnkgfSB8IHN0cmluZykge1xuICAgIGxldCBub3JtYWxpemVkU3RvcmVzID0gc3RvcmVzO1xuICAgIGlmIChpc1N0cmluZyhzdG9yZXMpKSB7XG4gICAgICBub3JtYWxpemVkU3RvcmVzID0gSlNPTi5wYXJzZShub3JtYWxpemVkU3RvcmVzIGFzIHN0cmluZyk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGtleXMgPSBPYmplY3Qua2V5cyhub3JtYWxpemVkU3RvcmVzKTsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHN0b3JlTmFtZSA9IGtleXNbaV07XG4gICAgICBpZiAoX19zdG9yZXNfX1tzdG9yZU5hbWVdKSB7XG4gICAgICAgIF9fc3RvcmVzX19bc3RvcmVOYW1lXS5zZXRTdGF0ZSgoKSA9PiBub3JtYWxpemVkU3RvcmVzW3N0b3JlTmFtZV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgc25hcHNob3RNYW5hZ2VyID0gbmV3IFNuYXBzaG90TWFuYWdlcigpO1xuIiwiaW1wb3J0IHsgUXVlcnlFbnRpdHkgfSBmcm9tICcuLi9hcGkvcXVlcnktZW50aXR5JztcbmltcG9ydCB7IFF1ZXJ5IH0gZnJvbSAnLi4vYXBpL3F1ZXJ5JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlck5pbCB9IGZyb20gJy4uL2FwaS9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vaW50ZXJuYWwvdXRpbHMnO1xuaW1wb3J0IHsgSUQgfSBmcm9tICcuLi9hcGkvdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBRdWVyaWVzPEUsIFM+ID0gUXVlcnk8Uz4gfCBRdWVyeUVudGl0eTxTLCBFPjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFraXRhUGx1Z2luPEUgPSBhbnksIFMgPSBhbnk+IHtcbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBxdWVyeTogUXVlcmllczxFLCBTPikge31cblxuICAvKiogVGhpcyBtZXRob2QgaXMgcmVzcG9uc2libGUgZm9yIGdldHRpbmcgYWNjZXNzIHRvIHRoZSBxdWVyeS4gKi9cbiAgcHJvdGVjdGVkIGdldFF1ZXJ5KCk6IFF1ZXJpZXM8RSwgUz4ge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5O1xuICB9XG5cbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHJlc3BvbnNpYmxlIGZvciBnZXR0aW5nIGFjY2VzcyB0byB0aGUgc3RvcmUuICovXG4gIHByb3RlY3RlZCBnZXRTdG9yZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRRdWVyeSgpLl9fc3RvcmVfXztcbiAgfVxuXG4gIC8qKiBUaGlzIG1ldGhvZCBpcyByZXNwb25zaWJsZSBmb3IgY2xlYW5pbmcuICovXG4gIHB1YmxpYyBhYnN0cmFjdCBkZXN0cm95KCk7XG5cbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHJlc3BvbnNpYmxlIHRlbGxzIHdoZXRoZXIgdGhlIHBsdWdpbiBpcyBlbnRpdHlCYXNlZCBvciBub3QuICAqL1xuICBwcm90ZWN0ZWQgaXNFbnRpdHlCYXNlZChlbnRpdHlJZDogSUQpIHtcbiAgICByZXR1cm4gdG9Cb29sZWFuKGVudGl0eUlkKTtcbiAgfVxuXG4gIC8qKiBUaGlzIG1ldGhvZCBpcyByZXNwb25zaWJsZSBmb3Igc2VsZWN0aW5nIHRoZSBzb3VyY2U7IGl0IGNhbiBiZSB0aGUgd2hvbGUgc3RvcmUgb3Igb25lIGVudGl0eS4gKi9cbiAgcHJvdGVjdGVkIHNlbGVjdFNvdXJjZShlbnRpdHlJZDogSUQpOiBPYnNlcnZhYmxlPFMgfCBFPiB7XG4gICAgaWYgKHRoaXMuaXNFbnRpdHlCYXNlZChlbnRpdHlJZCkpIHtcbiAgICAgIHJldHVybiAodGhpcy5nZXRRdWVyeSgpIGFzIFF1ZXJ5RW50aXR5PFMsIEU+KS5zZWxlY3RFbnRpdHkoZW50aXR5SWQpLnBpcGUoZmlsdGVyTmlsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKHRoaXMuZ2V0UXVlcnkoKSBhcyBRdWVyeTxTPikuc2VsZWN0KHN0YXRlID0+IHN0YXRlKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRTb3VyY2UoZW50aXR5SWQ6IElEKTogUyB8IEUge1xuICAgIGlmICh0aGlzLmlzRW50aXR5QmFzZWQoZW50aXR5SWQpKSB7XG4gICAgICByZXR1cm4gKHRoaXMuZ2V0UXVlcnkoKSBhcyBRdWVyeUVudGl0eTxTLCBFPikuZ2V0RW50aXR5KGVudGl0eUlkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5nZXRRdWVyeSgpLmdldFNuYXBzaG90KCk7XG4gIH1cblxuICAvKiogVGhpcyBtZXRob2QgaXMgcmVzcG9uc2libGUgZm9yIHVwZGF0aW5nIHRoZSBzdG9yZSBvciBvbmUgZW50aXR5OyBpdCBjYW4gYmUgdGhlIHdob2xlIHN0b3JlIG9yIG9uZSBlbnRpdHkuICovXG4gIHByb3RlY3RlZCB1cGRhdGVTdG9yZShuZXdTdGF0ZSwgZW50aXR5SWQ/KSB7XG4gICAgaWYgKHRoaXMuaXNFbnRpdHlCYXNlZChlbnRpdHlJZCkpIHtcbiAgICAgIHRoaXMuZ2V0U3RvcmUoKS51cGRhdGUoZW50aXR5SWQsIG5ld1N0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nZXRTdG9yZSgpLnNldFN0YXRlKChzdGF0ZSkgPT4gKHsuLi5zdGF0ZSwgLi4ubmV3U3RhdGV9KSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBRdWVyeUVudGl0eSB9IGZyb20gJy4uLy4uL2FwaS9xdWVyeS1lbnRpdHknO1xuaW1wb3J0IHsgZGVsYXksIG1hcCwgc3dpdGNoTWFwLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBmcm9tLCBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGlzT2JzZXJ2YWJsZSwgaXNVbmRlZmluZWQgfSBmcm9tICcuLi8uLi9pbnRlcm5hbC91dGlscyc7XG5pbXBvcnQgeyBJRCB9IGZyb20gJy4uLy4uL2FwaS90eXBlcyc7XG5pbXBvcnQgeyBBa2l0YVBsdWdpbiB9IGZyb20gJy4uL3BsdWdpbic7XG5pbXBvcnQgeyBhcHBseVRyYW5zYWN0aW9uIH0gZnJvbSAnLi4vLi4vYXBpL3RyYW5zYWN0aW9uJztcbmltcG9ydCB7IGFjdGlvbiwgYXBwbHlBY3Rpb24gfSBmcm9tICcuLi8uLi9pbnRlcm5hbC9hY3Rpb24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBhZ2luYXRpb25SZXNwb25zZTxFPiB7XG4gIGN1cnJlbnRQYWdlOiBudW1iZXI7XG4gIHBlclBhZ2U6IG51bWJlcjtcbiAgbGFzdFBhZ2U6IG51bWJlcjtcbiAgZGF0YTogRVtdO1xuICB0b3RhbD86IG51bWJlcjtcbiAgZnJvbT86IG51bWJlcjtcbiAgdG8/OiBudW1iZXI7XG4gIHBhZ2VDb250cm9scz86IG51bWJlcltdO1xufVxuXG5leHBvcnQgdHlwZSBQYWdpbmF0b3JDb25maWcgPSB7XG4gIHBhZ2VzQ29udHJvbHM/OiBib29sZWFuO1xuICByYW5nZT86IGJvb2xlYW47XG4gIHN0YXJ0V2l0aD86IG51bWJlcjtcbiAgY2FjaGVUaW1lb3V0PzogT2JzZXJ2YWJsZTxudW1iZXI+O1xufTtcblxuY29uc3QgcGFnaW5hdG9yRGVmYXVsdHM6IFBhZ2luYXRvckNvbmZpZyA9IHtcbiAgcGFnZXNDb250cm9sczogZmFsc2UsXG4gIHJhbmdlOiBmYWxzZSxcbiAgc3RhcnRXaXRoOiAxLFxuICBjYWNoZVRpbWVvdXQ6IHVuZGVmaW5lZFxufTtcblxuZXhwb3J0IGNsYXNzIFBhZ2luYXRvclBsdWdpbjxFPiBleHRlbmRzIEFraXRhUGx1Z2luPEU+IHtcbiAgLyoqIFNhdmUgY3VycmVudCBmaWx0ZXJzLCBzb3J0aW5nLCBldGMuIGluIGNhY2hlICovXG4gIG1ldGFkYXRhID0gbmV3IE1hcCgpO1xuXG4gIHByaXZhdGUgcGFnZTogQmVoYXZpb3JTdWJqZWN0PG51bWJlcj47XG4gIHByaXZhdGUgcGFnZXMgPSBuZXcgTWFwPG51bWJlciwgeyBpZHM6IElEW10gfT4oKTtcbiAgcHJpdmF0ZSByZWFkb25seSBjbGVhckNhY2hlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgcHJpdmF0ZSBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uUmVzcG9uc2U8RT4gPSB7XG4gICAgY3VycmVudFBhZ2U6IDEsXG4gICAgcGVyUGFnZTogMCxcbiAgICB0b3RhbDogMCxcbiAgICBsYXN0UGFnZTogMCxcbiAgICBkYXRhOiBbXVxuICB9O1xuXG4gIC8qKlxuICAgKiBXaGVuIHRoZSB1c2VyIG5hdmlnYXRlcyB0byBhIGRpZmZlcmVudCBwYWdlIGFuZCByZXR1cm5cbiAgICogd2UgZG9uJ3Qgd2FudCB0byBjYWxsIGBjbGVhckNhY2hlYCBvbiBmaXJzdCB0aW1lLlxuICAgKi9cbiAgcHJpdmF0ZSBpbml0aWFsID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHF1ZXJ5OiBRdWVyeUVudGl0eTxhbnksIEU+LCBwdWJsaWMgY29uZmlnOiBQYWdpbmF0b3JDb25maWcgPSB7fSkge1xuICAgIHN1cGVyKHF1ZXJ5KTtcbiAgICB0aGlzLmNvbmZpZyA9IE9iamVjdC5hc3NpZ24ocGFnaW5hdG9yRGVmYXVsdHMsIGNvbmZpZyk7XG4gICAgY29uc3QgeyBzdGFydFdpdGgsIGNhY2hlVGltZW91dCB9ID0gdGhpcy5jb25maWc7XG4gICAgdGhpcy5wYWdlID0gbmV3IEJlaGF2aW9yU3ViamVjdChzdGFydFdpdGgpO1xuICAgIGlmIChpc09ic2VydmFibGUoY2FjaGVUaW1lb3V0KSkge1xuICAgICAgdGhpcy5jbGVhckNhY2hlU3Vic2NyaXB0aW9uID0gY2FjaGVUaW1lb3V0LnN1YnNjcmliZShfID0+IHRoaXMuY2xlYXJDYWNoZSgpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUHJveHkgdG8gdGhlIHF1ZXJ5IGxvYWRpbmdcbiAgICovXG4gIGlzTG9hZGluZyQgPSB0aGlzLnF1ZXJ5LnNlbGVjdExvYWRpbmcoKS5waXBlKGRlbGF5KDApKTtcblxuICAvKipcbiAgICogTGlzdGVuIHRvIHBhZ2UgY2hhbmdlc1xuICAgKi9cbiAgZ2V0IHBhZ2VDaGFuZ2VzKCkge1xuICAgIHJldHVybiB0aGlzLnBhZ2UuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IHBhZ2UgbnVtYmVyXG4gICAqL1xuICBnZXQgY3VycmVudFBhZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFnaW5hdGlvbi5jdXJyZW50UGFnZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBjdXJyZW50IHBhZ2UgaXMgdGhlIGZpcnN0IG9uZVxuICAgKi9cbiAgZ2V0IGlzRmlyc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFBhZ2UgPT09IDE7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgY3VycmVudCBwYWdlIGlzIHRoZSBsYXN0IG9uZVxuICAgKi9cbiAgZ2V0IGlzTGFzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50UGFnZSA9PT0gdGhpcy5wYWdpbmF0aW9uLmxhc3RQYWdlO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZ2VuZXJhdGUgYW4gYXJyYXkgb2YgcGFnZXMgZm9yICpuZ0ZvclxuICAgKiBbMSwgMiwgMywgNF1cbiAgICovXG4gIHdpdGhDb250cm9scygpIHtcbiAgICB0aGlzLmNvbmZpZy5wYWdlc0NvbnRyb2xzID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGdlbmVyYXRlIHRoZSBgZnJvbWAgYW5kIGB0b2Aga2V5c1xuICAgKiBbMSwgMiwgMywgNF1cbiAgICovXG4gIHdpdGhSYW5nZSgpIHtcbiAgICB0aGlzLmNvbmZpZy5yYW5nZSA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBsb2FkaW5nIHN0YXRlXG4gICAqL1xuICBzZXRMb2FkaW5nKHZhbHVlID0gdHJ1ZSkge1xuICAgIHRoaXMuZ2V0U3RvcmUoKS5zZXRMb2FkaW5nKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIHBhZ2luYXRpb24gb2JqZWN0IGFuZCBhZGQgdGhlIHBhZ2VcbiAgICovXG4gIEBhY3Rpb24oeyB0eXBlOiAnQFBhZ2luYXRpb24gLSBOZXcgUGFnZScgfSwgdHJ1ZSlcbiAgdXBkYXRlKHJlc3BvbnNlOiBQYWdpbmF0aW9uUmVzcG9uc2U8RT4pIHtcbiAgICB0aGlzLnBhZ2luYXRpb24gPSByZXNwb25zZTtcbiAgICB0aGlzLmFkZFBhZ2UocmVzcG9uc2UuZGF0YSk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogU2V0IHRoZSBpZHMgYW5kIGFkZCB0aGUgcGFnZSB0byBzdG9yZVxuICAgKi9cbiAgYWRkUGFnZShkYXRhOiBFW10pIHtcbiAgICB0aGlzLnBhZ2VzLnNldCh0aGlzLmN1cnJlbnRQYWdlLCB7IGlkczogZGF0YS5tYXAoZW50aXR5ID0+IGVudGl0eVt0aGlzLmdldFN0b3JlKCkuaWRLZXldKSB9KTtcbiAgICB0aGlzLmdldFN0b3JlKCkuYWRkKGRhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIHRoZSBjYWNoZS5cbiAgICovXG4gIGNsZWFyQ2FjaGUoKSB7XG4gICAgaWYgKCF0aGlzLmluaXRpYWwpIHtcbiAgICAgIGFwcGx5QWN0aW9uKFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5nZXRTdG9yZSgpLnJlbW92ZSgpO1xuICAgICAgICB9LFxuICAgICAgICB7IHR5cGU6ICdAUGFnaW5hdGlvbiAtIENsZWFyIENhY2hlJyB9XG4gICAgICApO1xuICAgICAgdGhpcy5wYWdlcyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgdGhpcy5pbml0aWFsID0gZmFsc2U7XG4gIH1cblxuICBjbGVhclBhZ2UocGFnZTogbnVtYmVyKSB7XG4gICAgdGhpcy5wYWdlcy5kZWxldGUocGFnZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgdGhlIGNhY2hlIHRpbWVvdXQgYW5kIG9wdGlvbmFsbHkgdGhlIHBhZ2VzXG4gICAqL1xuICBkZXN0cm95KHsgY2xlYXJDYWNoZSwgY3VycmVudFBhZ2UgfTogeyBjbGVhckNhY2hlPzogYm9vbGVhbjsgY3VycmVudFBhZ2U/OiBudW1iZXIgfSA9IHt9KSB7XG4gICAgaWYgKHRoaXMuY2xlYXJDYWNoZVN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5jbGVhckNhY2hlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICAgIGlmIChjbGVhckNhY2hlKSB7XG4gICAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChjdXJyZW50UGFnZSkpIHtcbiAgICAgIHRoaXMuc2V0UGFnZShjdXJyZW50UGFnZSk7XG4gICAgfVxuICAgIHRoaXMuaW5pdGlhbCA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogV2hldGhlciB0aGUgcHJvdmlkZWQgcGFnZSBpcyBhY3RpdmVcbiAgICovXG4gIGlzUGFnZUFjdGl2ZShwYWdlOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50UGFnZSA9PT0gcGFnZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGN1cnJlbnQgcGFnZVxuICAgKi9cbiAgc2V0UGFnZShwYWdlOiBudW1iZXIpIHtcbiAgICBpZiAocGFnZSAhPT0gdGhpcy5jdXJyZW50UGFnZSB8fCAhdGhpcy5oYXNQYWdlKHBhZ2UpKSB7XG4gICAgICB0aGlzLnBhZ2UubmV4dCgodGhpcy5wYWdpbmF0aW9uLmN1cnJlbnRQYWdlID0gcGFnZSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbmNyZW1lbnQgY3VycmVudCBwYWdlXG4gICAqL1xuICBuZXh0UGFnZSgpIHtcbiAgICBpZiAodGhpcy5jdXJyZW50UGFnZSAhPT0gdGhpcy5wYWdpbmF0aW9uLmxhc3RQYWdlKSB7XG4gICAgICB0aGlzLnNldFBhZ2UodGhpcy5wYWdpbmF0aW9uLmN1cnJlbnRQYWdlICsgMSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlY3JlbWVudCBjdXJyZW50IHBhZ2VcbiAgICovXG4gIHByZXZQYWdlKCkge1xuICAgIGlmICh0aGlzLnBhZ2luYXRpb24uY3VycmVudFBhZ2UgPiAxKSB7XG4gICAgICB0aGlzLnNldFBhZ2UodGhpcy5wYWdpbmF0aW9uLmN1cnJlbnRQYWdlIC0gMSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBjdXJyZW50IHBhZ2UgdG8gbGFzdFxuICAgKi9cbiAgc2V0TGFzdFBhZ2UoKSB7XG4gICAgdGhpcy5zZXRQYWdlKHRoaXMucGFnaW5hdGlvbi5sYXN0UGFnZSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGN1cnJlbnQgcGFnZSB0byBmaXJzdFxuICAgKi9cbiAgc2V0Rmlyc3RQYWdlKCkge1xuICAgIHRoaXMuc2V0UGFnZSgxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBwYWdlIGV4aXN0cyBpbiBjYWNoZVxuICAgKi9cbiAgaGFzUGFnZShwYWdlOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5wYWdlcy5oYXMocGFnZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IHBhZ2UgaWYgaXQncyBpbiBjYWNoZSwgb3RoZXJ3aXNlIGludm9rZSB0aGUgcmVxdWVzdFxuICAgKi9cbiAgZ2V0UGFnZShyZXE6ICgpID0+IE9ic2VydmFibGU8UGFnaW5hdGlvblJlc3BvbnNlPEU+Pikge1xuICAgIGNvbnN0IHBhZ2UgPSB0aGlzLnBhZ2luYXRpb24uY3VycmVudFBhZ2U7XG4gICAgaWYgKHRoaXMuaGFzUGFnZShwYWdlKSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0UGFnZShwYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRMb2FkaW5nKHRydWUpO1xuICAgICAgcmV0dXJuIGZyb20ocmVxKCkpLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcCgoY29uZmlnOiBQYWdpbmF0aW9uUmVzcG9uc2U8RT4pID0+IHtcbiAgICAgICAgICBhcHBseVRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZShjb25maWcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB0aGlzLnNlbGVjdFBhZ2UocGFnZSk7XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGdldFF1ZXJ5KCk6IFF1ZXJ5RW50aXR5PGFueSwgRT4ge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRGcm9tKCkge1xuICAgIGlmICh0aGlzLmlzRmlyc3QpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMuY3VycmVudFBhZ2UgLSAxKSAqIHRoaXMucGFnaW5hdGlvbi5wZXJQYWdlICsgMTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VG8oKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFBhZ2UgKiB0aGlzLnBhZ2luYXRpb24ucGVyUGFnZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3QgdGhlIHBhZ2VcbiAgICovXG4gIHByaXZhdGUgc2VsZWN0UGFnZShwYWdlOiBudW1iZXIpOiBPYnNlcnZhYmxlPFBhZ2luYXRpb25SZXNwb25zZTxFPj4ge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5LnNlbGVjdEFsbCh7IGFzT2JqZWN0OiB0cnVlIH0pLnBpcGUoXG4gICAgICB0YWtlKDEpLFxuICAgICAgbWFwKGVudGl0aWVzID0+IHtcbiAgICAgICAgbGV0IHJlc3BvbnNlOiBQYWdpbmF0aW9uUmVzcG9uc2U8RT4gPSB7XG4gICAgICAgICAgLi4udGhpcy5wYWdpbmF0aW9uLFxuICAgICAgICAgIGRhdGE6IHRoaXMucGFnZXMuZ2V0KHBhZ2UpLmlkcy5tYXAoaWQgPT4gZW50aXRpZXNbaWRdKVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHsgcmFuZ2UsIHBhZ2VzQ29udHJvbHMgfSA9IHRoaXMuY29uZmlnO1xuXG4gICAgICAgIGlmICghdGhpcy5wYWdpbmF0aW9uLnRvdGFsKSB7XG4gICAgICAgICAgcmVzcG9uc2UudG90YWwgPSByZXNwb25zZS5wZXJQYWdlICogcmVzcG9uc2UubGFzdFBhZ2U7XG4gICAgICAgICAgdGhpcy5wYWdpbmF0aW9uLnRvdGFsID0gcmVzcG9uc2UudG90YWw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICByZXNwb25zZS5mcm9tID0gdGhpcy5nZXRGcm9tKCk7XG4gICAgICAgICAgcmVzcG9uc2UudG8gPSB0aGlzLmdldFRvKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFnZXNDb250cm9scykge1xuICAgICAgICAgIHJlc3BvbnNlLnBhZ2VDb250cm9scyA9IGdlbmVyYXRlUGFnZXModGhpcy5wYWdpbmF0aW9uLnRvdGFsLCB0aGlzLnBhZ2luYXRpb24ucGVyUGFnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhbiBhcnJheSBzbyB3ZSBjYW4gbmdGb3IgdGhlbSB0byBuYXZpZ2F0ZSBiZXR3ZWVuIHBhZ2VzXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlUGFnZXModG90YWw6IG51bWJlciwgcGVyUGFnZTogbnVtYmVyKSB7XG4gIGNvbnN0IGxlbiA9IE1hdGguY2VpbCh0b3RhbCAvIHBlclBhZ2UpO1xuICBsZXQgYXJyID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIucHVzaChpICsgMSk7XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgKi9cbmV4cG9ydCBjb25zdCBQYWdpbmF0b3IgPSBQYWdpbmF0b3JQbHVnaW47XG4iLCJpbXBvcnQgeyBBa2l0YVBsdWdpbiB9IGZyb20gJy4uL3BsdWdpbic7XG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gJy4uLy4uL2FwaS9xdWVyeSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IF9fZ2xvYmFsU3RhdGUgfSBmcm9tICcuLi8uLi9pbnRlcm5hbC9nbG9iYWwtc3RhdGUnO1xuaW1wb3J0IHsgZ2V0VmFsdWUsIGlzU3RyaW5nLCBzZXRWYWx1ZSB9IGZyb20gJy4uLy4uL2ludGVybmFsL3V0aWxzJztcblxuZXhwb3J0IHR5cGUgRm9ybUdyb3VwTGlrZSA9IHtcbiAgcGF0Y2hWYWx1ZTogRnVuY3Rpb247XG4gIHNldFZhbHVlOiBGdW5jdGlvbjtcbiAgdmFsdWVDaGFuZ2VzOiBPYnNlcnZhYmxlPGFueT47XG59O1xuXG5leHBvcnQgdHlwZSBBa2l0YUZvcm1Qcm9wPFQ+ID0ge1xuICBba2V5OiBzdHJpbmddOiBUO1xufTtcblxuZXhwb3J0IHR5cGUgUGVyc2lzdEZvcm1QYXJhbXMgPSB7XG4gIGRlYm91bmNlVGltZT86IG51bWJlcjtcbiAgZm9ybUtleT86IHN0cmluZztcbiAgZW1pdEV2ZW50PzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBjbGFzcyBQZXJzaXN0TmdGb3JtUGx1Z2luPFQgPSBhbnk+IGV4dGVuZHMgQWtpdGFQbHVnaW4ge1xuICBmb3JtQ2hhbmdlczogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIGZvcm06IEZvcm1Hcm91cExpa2U7XG4gIHByaXZhdGUgaXNLZXlCYXNlZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBpbml0aWFsVmFsdWU7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHF1ZXJ5OiBRdWVyeTxhbnk+LCBwcml2YXRlIGZhY3RvcnlGbk9yUGF0aDogRnVuY3Rpb24gfCBzdHJpbmcsIHByaXZhdGUgcGFyYW1zOiBQZXJzaXN0Rm9ybVBhcmFtcyA9IHt9KSB7XG4gICAgc3VwZXIocXVlcnkpO1xuICAgIHRoaXMucGFyYW1zID0geyAuLi57IGRlYm91bmNlVGltZTogMzAwLCBmb3JtS2V5OiAnYWtpdGFGb3JtJywgZW1pdEV2ZW50OiBmYWxzZSB9LCAuLi5wYXJhbXMgfTtcbiAgICB0aGlzLmlzS2V5QmFzZWQgPSBpc1N0cmluZyhmYWN0b3J5Rm5PclBhdGgpO1xuICB9XG5cbiAgc2V0Rm9ybShmb3JtOiBGb3JtR3JvdXBMaWtlKSB7XG4gICAgdGhpcy5mb3JtID0gZm9ybTtcbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXNldChpbml0aWFsU3RhdGU/OiBUKSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIGlmIChpbml0aWFsU3RhdGUpIHtcbiAgICAgIHZhbHVlID0gaW5pdGlhbFN0YXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuaXNLZXlCYXNlZCA/IHRoaXMuaW5pdGlhbFZhbHVlIDogKHRoaXMgYXMgYW55KS5mYWN0b3J5Rm5PclBhdGgoKTtcbiAgICB9XG5cbiAgICB0aGlzLmZvcm0ucGF0Y2hWYWx1ZSh2YWx1ZSk7XG5cbiAgICBjb25zdCBzdG9yZVZhbHVlID0gdGhpcy5pc0tleUJhc2VkID8gc2V0VmFsdWUodGhpcy5nZXRTdG9yZSgpLl92YWx1ZSgpLCBgJHt0aGlzLmdldFN0b3JlKCkuc3RvcmVOYW1lfS4ke3RoaXMuZmFjdG9yeUZuT3JQYXRofWAsIHZhbHVlKSA6IHsgW3RoaXMucGFyYW1zLmZvcm1LZXldOiB2YWx1ZSB9O1xuICAgIHRoaXMudXBkYXRlU3RvcmUoc3RvcmVWYWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIGFjdGl2YXRlKCkge1xuICAgIGxldCBwYXRoO1xuXG4gICAgaWYgKHRoaXMuaXNLZXlCYXNlZCkge1xuICAgICAgcGF0aCA9IGAke3RoaXMuZ2V0U3RvcmUoKS5zdG9yZU5hbWV9LiR7dGhpcy5mYWN0b3J5Rm5PclBhdGh9YDtcbiAgICAgIHRoaXMuaW5pdGlhbFZhbHVlID0gZ2V0VmFsdWUodGhpcy5nZXRTdG9yZSgpLl92YWx1ZSgpLCBwYXRoKTtcbiAgICAgIHRoaXMuZm9ybS5wYXRjaFZhbHVlKHRoaXMuaW5pdGlhbFZhbHVlLCB7IGVtaXRFdmVudDogdGhpcy5wYXJhbXMuZW1pdEV2ZW50IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoISh0aGlzLmdldFF1ZXJ5KCkuZ2V0U25hcHNob3QoKSBhcyBBa2l0YUZvcm1Qcm9wPFQ+KVt0aGlzLnBhcmFtcy5mb3JtS2V5XSkge1xuICAgICAgICBfX2dsb2JhbFN0YXRlLnNldEFjdGlvbih7IHR5cGU6ICdAUGVyc2lzdE5nRm9ybVBsdWdpbiBhY3RpdmF0ZScgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlU3RvcmUoeyBbdGhpcy5wYXJhbXMuZm9ybUtleV06ICh0aGlzIGFzIGFueSkuZmFjdG9yeUZuT3JQYXRoKCkgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucXVlcnkuc2VsZWN0T25jZShzdGF0ZSA9PiAoc3RhdGUgYXMgQWtpdGFGb3JtUHJvcDxUPilbdGhpcy5wYXJhbXMuZm9ybUtleV0pLnN1YnNjcmliZShmb3JtVmFsdWUgPT4gdGhpcy5mb3JtLnBhdGNoVmFsdWUoZm9ybVZhbHVlKSk7XG4gICAgfVxuXG4gICAgdGhpcy5mb3JtQ2hhbmdlcyA9IHRoaXMuZm9ybS52YWx1ZUNoYW5nZXMucGlwZShkZWJvdW5jZVRpbWUodGhpcy5wYXJhbXMuZGVib3VuY2VUaW1lKSkuc3Vic2NyaWJlKHZhbHVlID0+IHtcbiAgICAgIF9fZ2xvYmFsU3RhdGUuc2V0QWN0aW9uKHsgdHlwZTogJ0BQZXJzaXN0Rm9ybSAtIFVwZGF0ZScgfSk7XG4gICAgICBsZXQgbmV3U3RhdGU7XG4gICAgICBpZiAodGhpcy5pc0tleUJhc2VkKSB7XG4gICAgICAgIG5ld1N0YXRlID0gc3RhdGUgPT4gc2V0VmFsdWUoc3RhdGUsIHBhdGgsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1N0YXRlID0gKCkgPT4gKHsgW3RoaXMucGFyYW1zLmZvcm1LZXldOiB2YWx1ZSB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlU3RvcmUobmV3U3RhdGUodGhpcy5nZXRTdG9yZSgpLl92YWx1ZSgpKSk7XG4gICAgfSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZm9ybUNoYW5nZXMgJiYgdGhpcy5mb3JtQ2hhbmdlcy51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBBa2l0YUVycm9yIH0gZnJvbSAnLi4vaW50ZXJuYWwvZXJyb3InO1xuaW1wb3J0IHsgX19zdG9yZXNfXywgQWN0aW9ucywgcm9vdERpc3BhdGNoZXIgfSBmcm9tICcuLi9hcGkvc3RvcmUnO1xuaW1wb3J0IHsgc2tpcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGdldFZhbHVlLCBzZXRWYWx1ZSB9IGZyb20gJy4uL2ludGVybmFsL3V0aWxzJztcbmltcG9ydCB7IF9fZ2xvYmFsU3RhdGUgfSBmcm9tICcuLi9pbnRlcm5hbC9nbG9iYWwtc3RhdGUnO1xuXG5jb25zdCBub3RCcyA9IHR5cGVvZiBsb2NhbFN0b3JhZ2UgPT09ICd1bmRlZmluZWQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBlcnNpc3RTdGF0ZVBhcmFtcyB7XG4gIC8qKiBUaGUgc3RvcmFnZSBrZXkgKi9cbiAga2V5OiBzdHJpbmc7XG4gIC8qKiBTdG9yYWdlIHN0cmF0ZWd5IHRvIHVzZS4gVGhpcyBkZWZhdWx0cyB0byBMb2NhbFN0b3JhZ2UgYnV0IHlvdSBjYW4gcGFzcyBTZXNzaW9uU3RvcmFnZSBvciBhbnl0aGluZyB0aGF0IGltcGxlbWVudHMgdGhlIFN0b3JhZ2VFbmdpbmUgQVBJLiAqL1xuICBzdG9yYWdlOiBTdG9yYWdlO1xuICAvKiogQ3VzdG9tIGRlc2VyaWFsaXplci4gRGVmYXVsdHMgdG8gSlNPTi5wYXJzZSAqL1xuICBkZXNlcmlhbGl6ZTogRnVuY3Rpb247XG4gIC8qKiBDdXN0b20gc2VyaWFsaXplciwgZGVmYXVsdHMgdG8gSlNPTi5zdHJpbmdpZnkgKi9cbiAgc2VyaWFsaXplOiBGdW5jdGlvbjtcbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIHdob2xlIHN0YXRlIGlzIHNhdmVkIHRvIHN0b3JhZ2UsIHVzZSB0aGlzIHBhcmFtIHRvIGluY2x1ZGUgb25seSB0aGUgc3RvcmVzIHlvdSBuZWVkLlxuICAgKiBQYXkgYXR0ZW50aW9uIHRoYXQgeW91IGNhbid0IHVzZSBib3RoIGluY2x1ZGUgYW5kIGV4Y2x1ZGVcbiAgICovXG4gIGluY2x1ZGU6IHN0cmluZ1tdO1xuICAvKipcbiAgICogIEJ5IGRlZmF1bHQgdGhlIHdob2xlIHN0YXRlIGlzIHNhdmVkIHRvIHN0b3JhZ2UsIHVzZSB0aGlzIHBhcmFtIHRvIGV4Y2x1ZGUgc3RvcmVzIHRoYXQgeW91IGRvbid0IG5lZWQuXG4gICAqICBQYXkgYXR0ZW50aW9uIHRoYXQgeW91IGNhbid0IHVzZSBib3RoIGluY2x1ZGUgYW5kIGV4Y2x1ZGVcbiAgICovXG4gIGV4Y2x1ZGU6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGVyc2lzdFN0YXRlKHBhcmFtcz86IFBhcnRpYWw8UGVyc2lzdFN0YXRlUGFyYW1zPikge1xuICBpZiAobm90QnMpIHJldHVybjtcblxuICBjb25zdCBkZWZhdWx0czogUGVyc2lzdFN0YXRlUGFyYW1zID0ge1xuICAgIGtleTogJ0FraXRhU3RvcmVzJyxcbiAgICBzdG9yYWdlOiBsb2NhbFN0b3JhZ2UsXG4gICAgZGVzZXJpYWxpemU6IEpTT04ucGFyc2UsXG4gICAgc2VyaWFsaXplOiBKU09OLnN0cmluZ2lmeSxcbiAgICBpbmNsdWRlOiBbXSxcbiAgICBleGNsdWRlOiBbXVxuICB9O1xuICBjb25zdCB7IHN0b3JhZ2UsIGRlc2VyaWFsaXplLCBzZXJpYWxpemUsIGluY2x1ZGUsIGV4Y2x1ZGUsIGtleSB9ID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdHMsIHBhcmFtcyk7XG5cbiAgY29uc3QgaGFzSW5jbHVkZSA9IGluY2x1ZGUubGVuZ3RoID4gMDtcbiAgY29uc3QgaGFzRXhjbHVkZSA9IGV4Y2x1ZGUubGVuZ3RoID4gMDtcblxuICBpZiAoaGFzSW5jbHVkZSAmJiBoYXNFeGNsdWRlKSB7XG4gICAgdGhyb3cgbmV3IEFraXRhRXJyb3IoXCJZb3UgY2FuJ3QgdXNlIGJvdGggaW5jbHVkZSBhbmQgZXhjbHVkZVwiKTtcbiAgfVxuXG4gIGNvbnN0IHN0b3JhZ2VTdGF0ZSA9IGRlc2VyaWFsaXplKHN0b3JhZ2UuZ2V0SXRlbShrZXkpIHx8ICd7fScpO1xuXG4gIGxldCBzdG9yZXMgPSB7fTtcbiAgbGV0IGFjYyA9IHt9O1xuXG4gIGZ1bmN0aW9uIHNhdmUoKSB7XG4gICAgc3RvcmFnZS5zZXRJdGVtKGtleSwgc2VyaWFsaXplKE9iamVjdC5hc3NpZ24oe30sIHN0b3JhZ2VTdGF0ZSwgYWNjKSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKHN0b3JlTmFtZSwgcGF0aCkge1xuICAgIHN0b3Jlc1tzdG9yZU5hbWVdID0gX19zdG9yZXNfX1tzdG9yZU5hbWVdXG4gICAgICAuX3NlbGVjdChzdGF0ZSA9PiBnZXRWYWx1ZShzdGF0ZSwgcGF0aCkpXG4gICAgICAucGlwZShza2lwKDEpKVxuICAgICAgLnN1YnNjcmliZShkYXRhID0+IHtcbiAgICAgICAgYWNjW3N0b3JlTmFtZV0gPSBkYXRhO1xuICAgICAgICBzYXZlKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEluaXRpYWwoc3RvcmVOYW1lLCBzdG9yZSwgcGF0aCkge1xuICAgIGlmIChzdG9yYWdlU3RhdGVbc3RvcmVOYW1lXSkge1xuICAgICAgX19nbG9iYWxTdGF0ZS5zZXRBY3Rpb24oeyB0eXBlOiAnQFBlcnNpc3RTdGF0ZScgfSk7XG4gICAgICBzdG9yZS5zZXRTdGF0ZShzdGF0ZSA9PiB7XG4gICAgICAgIHJldHVybiBzZXRWYWx1ZShzdGF0ZSwgcGF0aCwgc3RvcmFnZVN0YXRlW3N0b3JlTmFtZV0pO1xuICAgICAgfSk7XG4gICAgICBpZiAoc3RvcmUuc2V0RGlydHkpIHtcbiAgICAgICAgc3RvcmUuc2V0RGlydHkoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdCBzdWJzY3JpcHRpb24gPSByb290RGlzcGF0Y2hlci5zdWJzY3JpYmUoYWN0aW9uID0+IHtcbiAgICBpZiAoYWN0aW9uLnR5cGUgPT09IEFjdGlvbnMuTkVXX1NUT1JFKSB7XG4gICAgICBsZXQgY3VycmVudFN0b3JlTmFtZSA9IGFjdGlvbi5wYXlsb2FkLnN0b3JlLnN0b3JlTmFtZTtcblxuICAgICAgaWYgKGhhc0V4Y2x1ZGUgJiYgZXhjbHVkZS5pbmRleE9mKGN1cnJlbnRTdG9yZU5hbWUpID4gLTEgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzSW5jbHVkZSkge1xuICAgICAgICBjb25zdCBwYXRoID0gaW5jbHVkZS5maW5kKG5hbWUgPT4gbmFtZS5pbmRleE9mKGN1cnJlbnRTdG9yZU5hbWUpID4gLTEpO1xuICAgICAgICBpZiAoIXBhdGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VycmVudFN0b3JlTmFtZSA9IHBhdGguc3BsaXQoJy4nKVswXTtcbiAgICAgICAgICBzZXRJbml0aWFsKGN1cnJlbnRTdG9yZU5hbWUsIGFjdGlvbi5wYXlsb2FkLnN0b3JlLCBwYXRoKTtcbiAgICAgICAgICBzdWJzY3JpYmUoY3VycmVudFN0b3JlTmFtZSwgcGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldEluaXRpYWwoY3VycmVudFN0b3JlTmFtZSwgYWN0aW9uLnBheWxvYWQuc3RvcmUsIGN1cnJlbnRTdG9yZU5hbWUpO1xuICAgICAgICBzdWJzY3JpYmUoY3VycmVudFN0b3JlTmFtZSwgY3VycmVudFN0b3JlTmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBrZXlzID0gT2JqZWN0LmtleXMoc3RvcmVzKTsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3RvcmVOYW1lID0ga2V5c1tpXTtcbiAgICAgICAgc3RvcmVzW3N0b3JlTmFtZV0udW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICAgIHN0b3JlcyA9IHt9O1xuICAgIH0sXG4gICAgY2xlYXIoKSB7XG4gICAgICBzdG9yYWdlLmNsZWFyKCk7XG4gICAgfSxcbiAgICBjbGVhclN0b3JlKHN0b3JlTmFtZTogc3RyaW5nKSB7XG4gICAgICBjb25zdCBzdG9yYWdlU3RhdGUgPSBkZXNlcmlhbGl6ZShzdG9yYWdlLmdldEl0ZW0oa2V5KSB8fCAne30nKTtcblxuICAgICAgaWYgKHN0b3JhZ2VTdGF0ZVtzdG9yZU5hbWVdKSB7XG4gICAgICAgIGRlbGV0ZSBzdG9yYWdlU3RhdGVbc3RvcmVOYW1lXTtcbiAgICAgICAgc3RvcmFnZS5zZXRJdGVtKGtleSwgc2VyaWFsaXplKHN0b3JhZ2VTdGF0ZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7IF9fc3RvcmVzX18sIEFjdGlvbnMsIHJvb3REaXNwYXRjaGVyIH0gZnJvbSAnLi4vYXBpL3N0b3JlJztcbmltcG9ydCB7IF9fZ2xvYmFsU3RhdGUgfSBmcm9tICcuLi9pbnRlcm5hbC9nbG9iYWwtc3RhdGUnO1xuaW1wb3J0IHsgaXNEZWZpbmVkIH0gZnJvbSAnLi4vaW50ZXJuYWwvdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBEZXZ0b29sc09wdGlvbnMgPSB7XG4gIC8qKiAgbWF4aW11bSBhbGxvd2VkIGFjdGlvbnMgdG8gYmUgc3RvcmVkIGluIHRoZSBoaXN0b3J5IHRyZWUgKi9cbiAgbWF4QWdlOiBudW1iZXI7XG4gIGxhdGVuY3k6IG51bWJlcjtcbiAgYWN0aW9uc0JsYWNrbGlzdDogc3RyaW5nW107XG4gIGFjdGlvbnNXaGl0ZWxpc3Q6IHN0cmluZ1tdO1xuICBzaG91bGRDYXRjaEVycm9yczogYm9vbGVhbjtcbiAgbG9nVHJhY2U6IGJvb2xlYW47XG4gIHByZWRpY2F0ZTogKHN0YXRlOiBhbnksIGFjdGlvbjogYW55KSA9PiBib29sZWFuO1xufTtcblxuZXhwb3J0IHR5cGUgTmdab25lTGlrZSA9IHsgcnVuOiBhbnkgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFraXRhRGV2dG9vbHMobmdab25lOiBOZ1pvbmVMaWtlLCBvcHRpb25zPzogUGFydGlhbDxEZXZ0b29sc09wdGlvbnM+KTtcbmV4cG9ydCBmdW5jdGlvbiBha2l0YURldnRvb2xzKG9wdGlvbnM/OiBQYXJ0aWFsPERldnRvb2xzT3B0aW9ucz4pO1xuZXhwb3J0IGZ1bmN0aW9uIGFraXRhRGV2dG9vbHMobmdab25lT3JPcHRpb25zPzogTmdab25lTGlrZSB8IFBhcnRpYWw8RGV2dG9vbHNPcHRpb25zPiwgb3B0aW9uczogUGFydGlhbDxEZXZ0b29sc09wdGlvbnM+ID0ge30pIHtcbiAgaWYgKCEod2luZG93IGFzIGFueSkuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGlzQW5ndWxhciA9IG5nWm9uZU9yT3B0aW9ucyAmJiBuZ1pvbmVPck9wdGlvbnNbJ3J1biddO1xuXG4gIGlmICghaXNBbmd1bGFyKSB7XG4gICAgbmdab25lT3JPcHRpb25zID0gbmdab25lT3JPcHRpb25zIHx8IHt9O1xuICAgIChuZ1pvbmVPck9wdGlvbnMgYXMgYW55KS5ydW4gPSBjYiA9PiBjYigpO1xuICAgIG9wdGlvbnMgPSBuZ1pvbmVPck9wdGlvbnMgYXMgUGFydGlhbDxEZXZ0b29sc09wdGlvbnM+O1xuICB9XG5cbiAgY29uc3QgZGVmYXVsdE9wdGlvbnM6IFBhcnRpYWw8RGV2dG9vbHNPcHRpb25zPiAmIHsgbmFtZTogc3RyaW5nIH0gPSB7IG5hbWU6ICdBa2l0YScgfTtcbiAgY29uc3QgbWVyZ2VkID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gIGNvbnN0IGRldlRvb2xzID0gKHdpbmRvdyBhcyBhbnkpLl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18uY29ubmVjdChtZXJnZWQpO1xuICBsZXQgYXBwU3RhdGUgPSB7fTtcblxuICByb290RGlzcGF0Y2hlci5zdWJzY3JpYmUoYWN0aW9uID0+IHtcbiAgICBpZiAoYWN0aW9uLnR5cGUgPT09IEFjdGlvbnMuTkVXX1NUQVRFKSB7XG4gICAgICBpZiAoX19nbG9iYWxTdGF0ZS5za2lwQWN0aW9uKSB7XG4gICAgICAgIF9fZ2xvYmFsU3RhdGUuc2V0U2tpcEFjdGlvbihmYWxzZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBwU3RhdGUgPSB7XG4gICAgICAgIC4uLmFwcFN0YXRlLFxuICAgICAgICBbYWN0aW9uLnBheWxvYWQubmFtZV06IF9fc3RvcmVzX19bYWN0aW9uLnBheWxvYWQubmFtZV0uX3ZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHsgdHlwZSwgZW50aXR5SWQgfSA9IF9fZ2xvYmFsU3RhdGUuY3VycmVudEFjdGlvbjtcbiAgICAgIGNvbnN0IHN0b3JlTmFtZSA9IGNhcGl0YWxpemUoYWN0aW9uLnBheWxvYWQubmFtZSk7XG4gICAgICBsZXQgbXNnID0gaXNEZWZpbmVkKGVudGl0eUlkKSA/IGBbJHtzdG9yZU5hbWV9XSAtICR7dHlwZX0gKGlkczogJHtlbnRpdHlJZH0pYCA6IGBbJHtzdG9yZU5hbWV9XSAtICR7dHlwZX1gO1xuXG4gICAgICBpZiAob3B0aW9ucy5sb2dUcmFjZSkge1xuICAgICAgICBjb25zb2xlLmdyb3VwKG1zZyk7XG4gICAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgfVxuXG4gICAgICBkZXZUb29scy5zZW5kKHsgdHlwZTogbXNnLCB0cmFuc2FjdGlvbjogX19nbG9iYWxTdGF0ZS5jdXJyZW50VC5tYXAodCA9PiB0LnR5cGUpIH0sIGFwcFN0YXRlKTtcbiAgICB9XG4gIH0pO1xuXG4gIGRldlRvb2xzLnN1YnNjcmliZShtZXNzYWdlID0+IHtcbiAgICBpZiAobWVzc2FnZS50eXBlID09PSAnQUNUSU9OJykge1xuICAgICAgY29uc3QgW3N0b3JlTmFtZV0gPSBtZXNzYWdlLnBheWxvYWQuc3BsaXQoJy4nKTtcblxuICAgICAgaWYgKF9fc3RvcmVzX19bc3RvcmVOYW1lXSkge1xuICAgICAgICAobmdab25lT3JPcHRpb25zIGFzIE5nWm9uZUxpa2UpLnJ1bigoKSA9PiB7XG4gICAgICAgICAgY29uc3QgZnVuY0NhbGwgPSBtZXNzYWdlLnBheWxvYWQucmVwbGFjZShzdG9yZU5hbWUsIGB0aGlzWycke3N0b3JlTmFtZX0nXWApO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBuZXcgRnVuY3Rpb24oYCR7ZnVuY0NhbGx9YCkuY2FsbChfX3N0b3Jlc19fKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1Vua25vd24gTWV0aG9kIMOiwpjCucOvwrjCjycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ0RJU1BBVENIJykge1xuICAgICAgY29uc3QgcGF5bG9hZFR5cGUgPSBtZXNzYWdlLnBheWxvYWQudHlwZTtcblxuICAgICAgaWYgKHBheWxvYWRUeXBlID09PSAnQ09NTUlUJykge1xuICAgICAgICBkZXZUb29scy5pbml0KGFwcFN0YXRlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVzc2FnZS5zdGF0ZSkge1xuICAgICAgICBjb25zdCByb290U3RhdGUgPSBKU09OLnBhcnNlKG1lc3NhZ2Uuc3RhdGUpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwga2V5cyA9IE9iamVjdC5rZXlzKHJvb3RTdGF0ZSk7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3Qgc3RvcmVOYW1lID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoX19zdG9yZXNfX1tzdG9yZU5hbWVdKSB7XG4gICAgICAgICAgICAobmdab25lT3JPcHRpb25zIGFzIE5nWm9uZUxpa2UpLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgIF9fc3RvcmVzX19bc3RvcmVOYW1lXS5zZXRTdGF0ZSgoKSA9PiByb290U3RhdGVbc3RvcmVOYW1lXSwgZmFsc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59XG4iLCJpbXBvcnQge2NvZXJjZUFycmF5LCBpc0Z1bmN0aW9uLCBpc1VuZGVmaW5lZCwgdG9Cb29sZWFufSBmcm9tICcuLi9pbnRlcm5hbC91dGlscyc7XG5pbXBvcnQge1F1ZXJ5RW50aXR5fSBmcm9tICcuLi9hcGkvcXVlcnktZW50aXR5JztcbmltcG9ydCB7SUQsIElEU30gZnJvbSAnLi4vYXBpL3R5cGVzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogRWFjaCBwbHVnaW4gdGhhdCB3YW50cyB0byBhZGQgc3VwcG9ydCBmb3IgZW50aXRpZXMgc2hvdWxkIGV4dGVuZCB0aGlzIGludGVyZmFjZS5cbiAqL1xuZXhwb3J0IHR5cGUgRW50aXR5UGFyYW0gPSBJRDtcblxuZXhwb3J0IHR5cGUgRW50aXR5Q29sbGVjdGlvblBhcmFtcyA9IElEIHwgSURbXTtcblxuZXhwb3J0IHR5cGUgUmViYXNlQWN0aW9uczxQID0gYW55PiA9IHsgYmVmb3JlUmVtb3ZlPzogRnVuY3Rpb247IGJlZm9yZUFkZD86IEZ1bmN0aW9uOyBhZnRlckFkZD86IChwbHVnaW46IFApID0+IGFueTsgfTtcblxuY29uc3QgZGVmYXVsdEFjdGlvbnM6IFJlYmFzZUFjdGlvbnMgPSB7YmVmb3JlUmVtb3ZlOiBwbHVnaW4gPT4gcGx1Z2luLmRlc3Ryb3koKX07XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBFbnRpdHlDb2xsZWN0aW9uUGx1Z2luPEUsIFA+IHtcbiAgcHJvdGVjdGVkIGVudGl0aWVzID0gbmV3IE1hcDxJRCwgUD4oKTtcblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocHJvdGVjdGVkIHF1ZXJ5OiBRdWVyeUVudGl0eTxhbnksIEU+LCBwcml2YXRlIGVudGl0eUlkczogRW50aXR5Q29sbGVjdGlvblBhcmFtcykge31cblxuICAvKipcbiAgICogR2V0IHRoZSBlbnRpdHkgcGx1Z2luIGluc3RhbmNlLlxuICAgKi9cbiAgcHJvdGVjdGVkIGdldEVudGl0eShpZDogSUQpOiBQIHtcbiAgICByZXR1cm4gdGhpcy5lbnRpdGllcy5nZXQoaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGVudGl0eSBwbHVnaW4gZXhpc3QuXG4gICAqL1xuICBwcm90ZWN0ZWQgaGFzRW50aXR5KGlkOiBJRCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmVudGl0aWVzLmhhcyhpZCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBlbnRpdHkgcGx1Z2luIGluc3RhbmNlLlxuICAgKi9cbiAgcHJvdGVjdGVkIHJlbW92ZUVudGl0eShpZDogSUQpIHtcbiAgICByZXR1cm4gdGhpcy5lbnRpdGllcy5kZWxldGUoaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgZW50aXR5IHBsdWdpbiBpbnN0YW5jZS5cbiAgICovXG4gIHByb3RlY3RlZCBjcmVhdGVFbnRpdHkoaWQ6IElELCBwbHVnaW46IFApIHtcbiAgICByZXR1cm4gdGhpcy5lbnRpdGllcy5zZXQoaWQsIHBsdWdpbik7XG4gIH1cblxuICAvKipcbiAgICogSWYgdGhlIHVzZXIgcGFzc2VzIGBlbnRpdHlJZHNgIHdlIHRha2UgdGhlbTsgb3RoZXJ3aXNlLCB3ZSB0YWtlIGFsbC5cbiAgICovXG4gIHByb3RlY3RlZCBnZXRJZHMoKTogSURbXSB7XG4gICAgcmV0dXJuIGlzVW5kZWZpbmVkKHRoaXMuZW50aXR5SWRzKSA/IHRoaXMucXVlcnkuZ2V0U25hcHNob3QoKS5pZHMgOiBjb2VyY2VBcnJheSh0aGlzLmVudGl0eUlkcyk7XG4gIH1cblxuICAvKipcbiAgICogV2hlbiB5b3UgY2FsbCBvbmUgb2YgdGhlIHBsdWdpbiBtZXRob2RzLCB5b3UgY2FuIHBhc3MgaWQvaWRzIG9yIHVuZGVmaW5lZCB3aGljaCBtZWFucyBhbGwuXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVzb2x2ZWRJZHMoaWRzPyk6IElEW10ge1xuICAgIHJldHVybiBpc1VuZGVmaW5lZChpZHMpID8gdGhpcy5nZXRJZHMoKSA6IGNvZXJjZUFycmF5KGlkcyk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbCB0aGlzIG1ldGhvZCB3aGVuIHlvdSB3YW50IHRvIGFjdGl2YXRlIHRoZSBwbHVnaW4gb24gaW5pdCBvciB3aGVuIHlvdSBuZWVkIHRvIGxpc3RlbiB0byBhZGQvcmVtb3ZlIG9mIGVudGl0aWVzIGR5bmFtaWNhbGx5LlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSBpbiB5b3VyIHBsdWdpbiB5b3UgbWF5IGRvIHRoZSBmb2xsb3dpbmc6XG4gICAqXG4gICAqIHRoaXMucXVlcnkuc2VsZWN0KHN0YXRlID0+IHN0YXRlLmlkcykucGlwZShza2lwKDEpKS5zdWJzY3JpYmUoaWRzID0+IHRoaXMuYWN0aXZhdGUoaWRzKSk7XG4gICAqL1xuICBwcm90ZWN0ZWQgcmViYXNlKGlkczogSURbXSwgYWN0aW9uczogUmViYXNlQWN0aW9uczxQPiA9IGRlZmF1bHRBY3Rpb25zKSB7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBJZiB0aGUgdXNlciBwYXNzZXMgYGVudGl0eUlkc2AgJiB3ZSBoYXZlIG5ldyBpZHMgY2hlY2sgaWYgd2UgbmVlZCB0byBhZGQvcmVtb3ZlIGluc3RhbmNlcy5cbiAgICAgKlxuICAgICAqIFRoaXMgcGhhc2Ugd2lsbCBiZSBjYWxsZWQgb25seSB1cG9uIHVwZGF0ZS5cbiAgICAgKi9cbiAgICBpZiAodG9Cb29sZWFuKGlkcykpIHtcbiAgICAgIC8qKlxuICAgICAgICogV2hpY2ggbWVhbnMgYWxsXG4gICAgICAgKi9cbiAgICAgIGlmIChpc1VuZGVmaW5lZCh0aGlzLmVudGl0eUlkcykpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGlkcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGNvbnN0IGVudGl0eUlkID0gaWRzW2ldO1xuICAgICAgICAgIGlmICh0aGlzLmhhc0VudGl0eShlbnRpdHlJZCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpc0Z1bmN0aW9uKGFjdGlvbnMuYmVmb3JlQWRkKSAmJiBhY3Rpb25zLmJlZm9yZUFkZChlbnRpdHlJZCk7XG4gICAgICAgICAgICBjb25zdCBwbHVnaW4gPSB0aGlzLmluc3RhbnRpYXRlUGx1Z2luKGVudGl0eUlkKTtcbiAgICAgICAgICAgIHRoaXMuZW50aXRpZXMuc2V0KGVudGl0eUlkLCBwbHVnaW4pO1xuICAgICAgICAgICAgaXNGdW5jdGlvbihhY3Rpb25zLmFmdGVyQWRkKSAmJiBhY3Rpb25zLmFmdGVyQWRkKHBsdWdpbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbnRpdGllcy5mb3JFYWNoKChwbHVnaW4sIGVudGl0eUlkKSA9PiB7XG4gICAgICAgICAgaWYgKGlkcy5pbmRleE9mKGVudGl0eUlkKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGlzRnVuY3Rpb24oYWN0aW9ucy5iZWZvcmVSZW1vdmUpICYmIGFjdGlvbnMuYmVmb3JlUmVtb3ZlKHBsdWdpbik7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUVudGl0eShlbnRpdHlJZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGljaCBtZWFucyB0aGUgdXNlciBwYXNzZXMgc3BlY2lmaWMgaWRzXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBfaWRzID0gY29lcmNlQXJyYXkodGhpcy5lbnRpdHlJZHMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gX2lkcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGNvbnN0IGVudGl0eUlkID0gX2lkc1tpXTtcbiAgICAgICAgICAvKiogVGhlIEVudGl0eSBpbiBjdXJyZW50IGlkcyBhbmQgZG9lc24ndCBleGlzdCwgYWRkIGl0LiAqL1xuICAgICAgICAgIGlmIChpZHMuaW5kZXhPZihlbnRpdHlJZCkgPiAtMSAmJiB0aGlzLmhhc0VudGl0eShlbnRpdHlJZCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpc0Z1bmN0aW9uKGFjdGlvbnMuYmVmb3JlQWRkKSAmJiBhY3Rpb25zLmJlZm9yZUFkZChlbnRpdHlJZCk7XG4gICAgICAgICAgICBjb25zdCBwbHVnaW4gPSB0aGlzLmluc3RhbnRpYXRlUGx1Z2luKGVudGl0eUlkKTtcbiAgICAgICAgICAgIHRoaXMuZW50aXRpZXMuc2V0KGVudGl0eUlkLCBwbHVnaW4pO1xuICAgICAgICAgICAgaXNGdW5jdGlvbihhY3Rpb25zLmFmdGVyQWRkKSAmJiBhY3Rpb25zLmFmdGVyQWRkKHBsdWdpbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZW50aXRpZXMuZm9yRWFjaCgocGx1Z2luLCBlbnRpdHlJZCkgPT4ge1xuICAgICAgICAgICAgICAvKiogVGhlIEVudGl0eSBub3QgaW4gY3VycmVudCBpZHMgYW5kIGV4aXN0cywgcmVtb3ZlIGl0LiAqL1xuICAgICAgICAgICAgICBpZiAoaWRzLmluZGV4T2YoZW50aXR5SWQpID09PSAtMSAmJiB0aGlzLmhhc0VudGl0eShlbnRpdHlJZCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGFjdGlvbnMuYmVmb3JlUmVtb3ZlKSAmJiBhY3Rpb25zLmJlZm9yZVJlbW92ZShwbHVnaW4pO1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRW50aXR5KGVudGl0eUlkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKlxuICAgICAgICogT3RoZXJ3aXNlLCBzdGFydCB3aXRoIHRoZSBwcm92aWRlZCBpZHMgb3IgYWxsLlxuICAgICAgICovXG4gICAgICB0aGlzLmdldElkcygpLmZvckVhY2goaWQgPT4ge1xuICAgICAgICBpZiAoIXRoaXMuaGFzRW50aXR5KGlkKSkgdGhpcy5jcmVhdGVFbnRpdHkoaWQsIHRoaXMuaW5zdGFudGlhdGVQbHVnaW4oaWQpKVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExpc3RlbiBmb3IgYWRkL3JlbW92ZSBlbnRpdGllcy5cbiAgICovXG4gIHByb3RlY3RlZCBzZWxlY3RJZHMoKTogT2JzZXJ2YWJsZTxJRFtdPiB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnkuc2VsZWN0KHN0YXRlID0+IHN0YXRlLmlkcyk7XG4gIH1cblxuICAvKipcbiAgICogQmFzZSBtZXRob2QgZm9yIGFjdGl2YXRpb24sIHlvdSBjYW4gb3ZlcnJpZGUgaXQgaWYgeW91IG5lZWQgdG8uXG4gICAqL1xuICBwcm90ZWN0ZWQgYWN0aXZhdGUoaWRzPzogSURbXSkge1xuICAgIHRoaXMucmViYXNlKGlkcyk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgaXMgcmVzcG9uc2libGUgZm9yIHBsdWdpbiBpbnN0YW50aWF0aW9uLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZTpcbiAgICogcmV0dXJuIG5ldyBTdGF0ZUhpc3RvcnkodGhpcy5xdWVyeSwgdGhpcy5wYXJhbXMsIGlkKSBhcyBQO1xuICAgKi9cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGluc3RhbnRpYXRlUGx1Z2luKGlkOiBJRCk6IFA7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIHJlc3BvbnNpYmxlIGZvciBjbGVhbmluZy5cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBkZXN0cm95KGlkPzogSUQpO1xuXG4gIC8qKlxuICAgKiBMb29wIG92ZXIgZWFjaCBpZCBhbmQgaW52b2tlIHRoZSBwbHVnaW4gbWV0aG9kLlxuICAgKi9cbiAgcHJvdGVjdGVkIGZvckVhY2hJZChpZHM6IElEUywgY2I6IChlbnRpdHk6IFApID0+IGFueSkge1xuICAgIGNvbnN0IF9pZHMgPSB0aGlzLnJlc29sdmVkSWRzKGlkcyk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gX2lkcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgaWQgPSBfaWRzW2ldO1xuICAgICAgaWYgKHRoaXMuaGFzRW50aXR5KGlkKSkge1xuICAgICAgICBjYih0aGlzLmdldEVudGl0eShpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgZmlsdGVyLCBwYWlyd2lzZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IF9fZ2xvYmFsU3RhdGUgfSBmcm9tICcuLi8uLi9pbnRlcm5hbC9nbG9iYWwtc3RhdGUnO1xuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vLi4vaW50ZXJuYWwvdXRpbHMnO1xuaW1wb3J0IHsgQWtpdGFQbHVnaW4sIFF1ZXJpZXMgfSBmcm9tICcuLi9wbHVnaW4nO1xuaW1wb3J0IHsgRW50aXR5UGFyYW0gfSBmcm9tICcuLi9lbnRpdHktY29sbGVjdGlvbi1wbHVnaW4nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRlSGlzdG9yeVBhcmFtcyB7XG4gIG1heEFnZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFN0YXRlSGlzdG9yeVBsdWdpbjxFID0gYW55LCBTID0gYW55PiBleHRlbmRzIEFraXRhUGx1Z2luPEUsIFM+IHtcbiAgLyoqIEFsbG93IHNraXBwaW5nIGFuIHVwZGF0ZSBmcm9tIG91dHNpZGUgKi9cbiAgcHJpdmF0ZSBza2lwID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBoaXN0b3J5ID0ge1xuICAgIHBhc3Q6IFtdLFxuICAgIHByZXNlbnQ6IG51bGwsXG4gICAgZnV0dXJlOiBbXVxuICB9O1xuXG4gIC8qKiBTa2lwIHRoZSB1cGRhdGUgd2hlbiByZWRvL3VuZG8gKi9cbiAgcHJpdmF0ZSBza2lwVXBkYXRlID0gZmFsc2U7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBxdWVyeTogUXVlcmllczxFLCBTPiwgcHJpdmF0ZSBwYXJhbXM6IFN0YXRlSGlzdG9yeVBhcmFtcyA9IHt9LCBwcml2YXRlIF9lbnRpdHlJZD86IEVudGl0eVBhcmFtKSB7XG4gICAgc3VwZXIocXVlcnkpO1xuICAgIHBhcmFtcy5tYXhBZ2UgPSB0b0Jvb2xlYW4ocGFyYW1zLm1heEFnZSkgPyBwYXJhbXMubWF4QWdlIDogMTA7XG4gICAgdGhpcy5hY3RpdmF0ZSgpO1xuICB9XG5cbiAgZ2V0IGhhc1Bhc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGlzdG9yeS5wYXN0Lmxlbmd0aCA+IDA7XG4gIH1cblxuICBnZXQgaGFzRnV0dXJlKCkge1xuICAgIHJldHVybiB0aGlzLmhpc3RvcnkuZnV0dXJlLmxlbmd0aCA+IDA7XG4gIH1cblxuICBhY3RpdmF0ZSgpIHtcbiAgICB0aGlzLmhpc3RvcnkucHJlc2VudCA9IHRoaXMuZ2V0U291cmNlKHRoaXMuX2VudGl0eUlkKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMuc2VsZWN0U291cmNlKHRoaXMuX2VudGl0eUlkKVxuICAgICAgLnBpcGUocGFpcndpc2UoKSlcbiAgICAgIC5zdWJzY3JpYmUoKFtwYXN0LCBwcmVzZW50XSkgPT4ge1xuICAgICAgICBpZiAodGhpcy5za2lwKSB7XG4gICAgICAgICAgdGhpcy5za2lwID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5za2lwVXBkYXRlKSB7XG4gICAgICAgICAgaWYgKHRoaXMuaGlzdG9yeS5wYXN0Lmxlbmd0aCA9PT0gdGhpcy5wYXJhbXMubWF4QWdlKSB7XG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucGFzdCA9IHRoaXMuaGlzdG9yeS5wYXN0LnNsaWNlKDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmhpc3RvcnkucGFzdCA9IFsuLi50aGlzLmhpc3RvcnkucGFzdCwgcGFzdF07XG4gICAgICAgICAgdGhpcy5oaXN0b3J5LnByZXNlbnQgPSBwcmVzZW50O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIHVuZG8oKSB7XG4gICAgaWYgKHRoaXMuaGlzdG9yeS5wYXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHsgcGFzdCwgcHJlc2VudCwgZnV0dXJlIH0gPSB0aGlzLmhpc3Rvcnk7XG4gICAgICBjb25zdCBwcmV2aW91cyA9IHBhc3RbcGFzdC5sZW5ndGggLSAxXTtcbiAgICAgIGNvbnN0IG5ld1Bhc3QgPSBwYXN0LnNsaWNlKDAsIHBhc3QubGVuZ3RoIC0gMSk7XG5cbiAgICAgIHRoaXMuaGlzdG9yeS5wYXN0ID0gbmV3UGFzdDtcbiAgICAgIHRoaXMuaGlzdG9yeS5wcmVzZW50ID0gcHJldmlvdXM7XG4gICAgICB0aGlzLmhpc3RvcnkuZnV0dXJlID0gW3ByZXNlbnQsIC4uLnRoaXMuaGlzdG9yeS5mdXR1cmVdO1xuICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICByZWRvKCkge1xuICAgIGlmICh0aGlzLmhpc3RvcnkuZnV0dXJlLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHsgcGFzdCwgcHJlc2VudCwgZnV0dXJlIH0gPSB0aGlzLmhpc3Rvcnk7XG4gICAgICBjb25zdCBuZXh0ID0gdGhpcy5oaXN0b3J5LmZ1dHVyZVswXTtcbiAgICAgIGNvbnN0IG5ld0Z1dHVyZSA9IHRoaXMuaGlzdG9yeS5mdXR1cmUuc2xpY2UoMSk7XG4gICAgICB0aGlzLmhpc3RvcnkucGFzdCA9IFsuLi5wYXN0LCBwcmVzZW50XTtcbiAgICAgIHRoaXMuaGlzdG9yeS5wcmVzZW50ID0gbmV4dDtcbiAgICAgIHRoaXMuaGlzdG9yeS5mdXR1cmUgPSBuZXdGdXR1cmU7XG4gICAgICB0aGlzLnVwZGF0ZSgnUmVkbycpO1xuICAgIH1cbiAgfVxuXG4gIGp1bXBUb1Bhc3QoaW5kZXg6IG51bWJlcikge1xuICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5oaXN0b3J5LnBhc3QubGVuZ3RoKSByZXR1cm47XG5cbiAgICBjb25zdCB7IHBhc3QsIGZ1dHVyZSB9ID0gdGhpcy5oaXN0b3J5O1xuICAgIC8qKlxuICAgICAqXG4gICAgICogY29uc3QgcGFzdCA9IFsxLCAyLCAzLCA0LCA1XTtcbiAgICAgKlxuICAgICAqIG5ld1Bhc3QgPSBwYXN0LnNsaWNlKDAsIDIpID0gWzEsIDJdO1xuICAgICAqIHByZXNlbnQgPSBwYXN0W2luZGV4XSA9IDM7XG4gICAgICogWy4uLnBhc3Quc2xpY2UoMiArIDEpLCAuLi5mdXR1cmVdID0gWzQsIDVdO1xuICAgICAqXG4gICAgICovXG4gICAgY29uc3QgbmV3UGFzdCA9IHBhc3Quc2xpY2UoMCwgaW5kZXgpO1xuICAgIGNvbnN0IG5ld0Z1dHVyZSA9IFsuLi5wYXN0LnNsaWNlKGluZGV4ICsgMSksIC4uLmZ1dHVyZV07XG4gICAgY29uc3QgbmV3UHJlc2VudCA9IHBhc3RbaW5kZXhdO1xuICAgIHRoaXMuaGlzdG9yeS5wYXN0ID0gbmV3UGFzdDtcbiAgICB0aGlzLmhpc3RvcnkucHJlc2VudCA9IG5ld1ByZXNlbnQ7XG4gICAgdGhpcy5oaXN0b3J5LmZ1dHVyZSA9IG5ld0Z1dHVyZTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG5cbiAganVtcFRvRnV0dXJlKGluZGV4OiBudW1iZXIpIHtcbiAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuaGlzdG9yeS5mdXR1cmUubGVuZ3RoKSByZXR1cm47XG5cbiAgICBjb25zdCB7IHBhc3QsIGZ1dHVyZSB9ID0gdGhpcy5oaXN0b3J5O1xuXG4gICAgY29uc3QgbmV3UGFzdCA9IFsuLi5wYXN0LCAuLi5mdXR1cmUuc2xpY2UoMCwgaW5kZXgpXTtcbiAgICBjb25zdCBuZXdQcmVzZW50ID0gZnV0dXJlW2luZGV4XTtcbiAgICBjb25zdCBuZXdGdXR1cmUgPSBmdXR1cmUuc2xpY2UoaW5kZXggKyAxKTtcblxuICAgIHRoaXMuaGlzdG9yeS5wYXN0ID0gbmV3UGFzdDtcbiAgICB0aGlzLmhpc3RvcnkucHJlc2VudCA9IG5ld1ByZXNlbnQ7XG4gICAgdGhpcy5oaXN0b3J5LmZ1dHVyZSA9IG5ld0Z1dHVyZTtcbiAgICB0aGlzLnVwZGF0ZSgnUmVkbycpO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5oaXN0b3J5ID0ge1xuICAgICAgcGFzdDogW10sXG4gICAgICBwcmVzZW50OiBudWxsLFxuICAgICAgZnV0dXJlOiBbXVxuICAgIH07XG4gIH1cblxuICBkZXN0cm95KGNsZWFySGlzdG9yeSA9IGZhbHNlKSB7XG4gICAgaWYgKGNsZWFySGlzdG9yeSkge1xuICAgICAgdGhpcy5jbGVhcigpO1xuICAgIH1cbiAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgaWdub3JlTmV4dCgpIHtcbiAgICB0aGlzLnNraXAgPSB0cnVlO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGUoYWN0aW9uID0gJ1VuZG8nKSB7XG4gICAgdGhpcy5za2lwVXBkYXRlID0gdHJ1ZTtcbiAgICBfX2dsb2JhbFN0YXRlLnNldEN1c3RvbUFjdGlvbih7IHR5cGU6IGBAU3RhdGVIaXN0b3J5IC0gJHthY3Rpb259YCB9KTtcbiAgICB0aGlzLnVwZGF0ZVN0b3JlKHRoaXMuaGlzdG9yeS5wcmVzZW50LCB0aGlzLl9lbnRpdHlJZCk7XG4gICAgdGhpcy5za2lwVXBkYXRlID0gZmFsc2U7XG4gIH1cbn1cbiIsImltcG9ydCB7IElELCBJRFMgfSBmcm9tICcuLi8uLi9hcGkvdHlwZXMnO1xuaW1wb3J0IHsgUXVlcnlFbnRpdHkgfSBmcm9tICcuLi8uLi9hcGkvcXVlcnktZW50aXR5JztcbmltcG9ydCB7IFN0YXRlSGlzdG9yeVBsdWdpbiwgU3RhdGVIaXN0b3J5UGFyYW1zIH0gZnJvbSAnLi9zdGF0ZS1oaXN0b3J5LXBsdWdpbic7XG5pbXBvcnQgeyB0b0Jvb2xlYW4gfSBmcm9tICcuLi8uLi9pbnRlcm5hbC91dGlscyc7XG5pbXBvcnQgeyBza2lwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgRW50aXR5Q29sbGVjdGlvblBsdWdpbiwgRW50aXR5Q29sbGVjdGlvblBhcmFtcyB9IGZyb20gJy4uL2VudGl0eS1jb2xsZWN0aW9uLXBsdWdpbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGVIaXN0b3J5RW50aXR5UGFyYW1zIGV4dGVuZHMgU3RhdGVIaXN0b3J5UGFyYW1zIHtcbiAgZW50aXR5SWRzPzogRW50aXR5Q29sbGVjdGlvblBhcmFtcztcbn1cblxuZXhwb3J0IGNsYXNzIEVudGl0eVN0YXRlSGlzdG9yeVBsdWdpbjxFLCBQIGV4dGVuZHMgU3RhdGVIaXN0b3J5UGx1Z2luPEUsIGFueT4gPSBTdGF0ZUhpc3RvcnlQbHVnaW48RSwgYW55Pj4gZXh0ZW5kcyBFbnRpdHlDb2xsZWN0aW9uUGx1Z2luPEUsIFA+IHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHF1ZXJ5OiBRdWVyeUVudGl0eTxhbnksIEU+LCBwcm90ZWN0ZWQgcmVhZG9ubHkgcGFyYW1zOiBTdGF0ZUhpc3RvcnlFbnRpdHlQYXJhbXMgPSB7fSkge1xuICAgIHN1cGVyKHF1ZXJ5LCBwYXJhbXMuZW50aXR5SWRzKTtcbiAgICBwYXJhbXMubWF4QWdlID0gdG9Cb29sZWFuKHBhcmFtcy5tYXhBZ2UpID8gcGFyYW1zLm1heEFnZSA6IDEwO1xuICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgICB0aGlzLnNlbGVjdElkcygpXG4gICAgICAucGlwZShza2lwKDEpKVxuICAgICAgLnN1YnNjcmliZShpZHMgPT4gdGhpcy5hY3RpdmF0ZShpZHMpKTtcbiAgfVxuXG4gIHJlZG8oaWRzPzogSURTKSB7XG4gICAgdGhpcy5mb3JFYWNoSWQoaWRzLCBlID0+IGUucmVkbygpKTtcbiAgfVxuXG4gIHVuZG8oaWRzPzogSURTKSB7XG4gICAgdGhpcy5mb3JFYWNoSWQoaWRzLCBlID0+IGUudW5kbygpKTtcbiAgfVxuXG4gIGhhc1Bhc3QoaWQ6IElEKSB7XG4gICAgaWYgKHRoaXMuaGFzRW50aXR5KGlkKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RW50aXR5KGlkKS5oYXNQYXN0O1xuICAgIH1cbiAgfVxuXG4gIGhhc0Z1dHVyZShpZDogSUQpIHtcbiAgICBpZiAodGhpcy5oYXNFbnRpdHkoaWQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRFbnRpdHkoaWQpLmhhc0Z1dHVyZTtcbiAgICB9XG4gIH1cblxuICBqdW1wVG9GdXR1cmUoaWRzOiBJRFMsIGluZGV4OiBudW1iZXIpIHtcbiAgICB0aGlzLmZvckVhY2hJZChpZHMsIGUgPT4gZS5qdW1wVG9GdXR1cmUoaW5kZXgpKTtcbiAgfVxuXG4gIGp1bXBUb1Bhc3QoaWRzOiBJRFMsIGluZGV4OiBudW1iZXIpIHtcbiAgICB0aGlzLmZvckVhY2hJZChpZHMsIGUgPT4gZS5qdW1wVG9QYXN0KGluZGV4KSk7XG4gIH1cblxuICBjbGVhcihpZHM/OiBJRFMpIHtcbiAgICB0aGlzLmZvckVhY2hJZChpZHMsIGUgPT4gZS5jbGVhcigpKTtcbiAgfVxuXG4gIGRlc3Ryb3koaWRzPzogSURTLCBjbGVhckhpc3RvcnkgPSBmYWxzZSkge1xuICAgIHRoaXMuZm9yRWFjaElkKGlkcywgZSA9PiBlLmRlc3Ryb3koY2xlYXJIaXN0b3J5KSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgaW5zdGFudGlhdGVQbHVnaW4oaWQ6IElEKSB7XG4gICAgcmV0dXJuIG5ldyBTdGF0ZUhpc3RvcnlQbHVnaW48RSwgYW55Pih0aGlzLnF1ZXJ5LCB0aGlzLnBhcmFtcywgaWQpIGFzIFA7XG4gIH1cbn1cbiIsImltcG9ydCB7IEFraXRhUGx1Z2luLCBRdWVyaWVzIH0gZnJvbSAnLi4vcGx1Z2luJztcbmltcG9ydCB7IFF1ZXJ5RW50aXR5IH0gZnJvbSAnLi4vLi4vYXBpL3F1ZXJ5LWVudGl0eSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QsIFN1YnNjcmlwdGlvbiwgbWVyZ2UgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHNraXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBjb2VyY2VBcnJheSwgaXNGdW5jdGlvbiwgaXNVbmRlZmluZWQsIHRvQm9vbGVhbiB9IGZyb20gJy4uLy4uL2ludGVybmFsL3V0aWxzJztcbmltcG9ydCB7IEVudGl0eVBhcmFtIH0gZnJvbSAnLi4vZW50aXR5LWNvbGxlY3Rpb24tcGx1Z2luJztcbmltcG9ydCB7IF9fZ2xvYmFsU3RhdGUgfSBmcm9tICcuLi8uLi9pbnRlcm5hbC9nbG9iYWwtc3RhdGUnO1xuaW1wb3J0IHsgUXVlcnkgfSBmcm9tICcuLi8uLi9hcGkvcXVlcnknO1xuXG5leHBvcnQgdHlwZSBEaXJ0eUNoZWNrQ29tcGFyYXRvcjxFbnRpdHk+ID0gKGhlYWQ6IEVudGl0eSwgY3VycmVudDogRW50aXR5KSA9PiBib29sZWFuO1xuXG5leHBvcnQgdHlwZSBEaXJ0eUNoZWNrUGFyYW1zPFN0b3JlU3RhdGUgPSBhbnk+ID0ge1xuICBjb21wYXJhdG9yPzogRGlydHlDaGVja0NvbXBhcmF0b3I8U3RvcmVTdGF0ZT47XG4gIHdhdGNoUHJvcGVydHk/OiBrZXlvZiBTdG9yZVN0YXRlIHwgKGtleW9mIFN0b3JlU3RhdGUpW107XG59O1xuXG5leHBvcnQgY29uc3QgZGlydHlDaGVja0RlZmF1bHRQYXJhbXMgPSB7XG4gIGNvbXBhcmF0b3I6IChoZWFkLCBjdXJyZW50KSA9PiBKU09OLnN0cmluZ2lmeShoZWFkKSAhPT0gSlNPTi5zdHJpbmdpZnkoY3VycmVudClcbn07XG5cbmV4cG9ydCB0eXBlIERpcnR5Q2hlY2tSZXNldFBhcmFtczxTdG9yZVN0YXRlID0gYW55PiA9IHtcbiAgdXBkYXRlRm4/OiBTdG9yZVN0YXRlIHwgKChoZWFkOiBTdG9yZVN0YXRlLCBjdXJyZW50OiBTdG9yZVN0YXRlKSA9PiBhbnkpO1xufTtcblxuZXhwb3J0IGNsYXNzIERpcnR5Q2hlY2tQbHVnaW48RW50aXR5ID0gYW55LCBTdG9yZVN0YXRlID0gYW55PiBleHRlbmRzIEFraXRhUGx1Z2luPEVudGl0eSwgU3RvcmVTdGF0ZT4ge1xuICBwcml2YXRlIGhlYWQ6IFN0b3JlU3RhdGUgfCBQYXJ0aWFsPFN0b3JlU3RhdGU+IHwgRW50aXR5O1xuICBwcml2YXRlIGRpcnR5ID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgYWN0aXZlID0gZmFsc2U7XG5cbiAgaXNEaXJ0eSQ6IE9ic2VydmFibGU8Ym9vbGVhbj4gPSB0aGlzLmRpcnR5LmFzT2JzZXJ2YWJsZSgpLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHF1ZXJ5OiBRdWVyaWVzPEVudGl0eSwgU3RvcmVTdGF0ZT4sIHByaXZhdGUgcGFyYW1zPzogRGlydHlDaGVja1BhcmFtcywgcHJpdmF0ZSBfZW50aXR5SWQ/OiBFbnRpdHlQYXJhbSkge1xuICAgIHN1cGVyKHF1ZXJ5KTtcbiAgICB0aGlzLnBhcmFtcyA9IHsgLi4uZGlydHlDaGVja0RlZmF1bHRQYXJhbXMsIC4uLnBhcmFtcyB9O1xuICAgIGlmICh0aGlzLnBhcmFtcy53YXRjaFByb3BlcnR5KSB7XG4gICAgICBsZXQgd2F0Y2hQcm9wID0gdGhpcy5wYXJhbXMud2F0Y2hQcm9wZXJ0eTtcbiAgICAgIHdhdGNoUHJvcCA9IGNvZXJjZUFycmF5KHdhdGNoUHJvcCk7XG4gICAgICBpZiAod2F0Y2hQcm9wLmluY2x1ZGVzKCdlbnRpdGllcycpICYmICF3YXRjaFByb3AuaW5jbHVkZXMoJ2lkcycpICYmIHF1ZXJ5IGluc3RhbmNlb2YgUXVlcnlFbnRpdHkpIHtcbiAgICAgICAgd2F0Y2hQcm9wLnB1c2goJ2lkcycpO1xuICAgICAgfVxuICAgICAgdGhpcy5wYXJhbXMud2F0Y2hQcm9wZXJ0eSA9IHdhdGNoUHJvcDtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0SGVhZCgpIHtcbiAgICByZXR1cm4gdGhpcy5oZWFkO1xuICB9XG5cbiAgcHJpdmF0ZSBhY3RpdmF0ZSgpIHtcbiAgICB0aGlzLmhlYWQgPSB0aGlzLl9nZXRIZWFkKCk7XG4gICAgLyoqIGlmIHdlIGFyZSB0cmFja2luZyBzcGVjaWZpYyBwcm9wZXJ0aWVzIHNlbGVjdCBvbmx5IHRoZSByZWxldmFudCBvbmVzICovXG4gICAgY29uc3Qgc291cmNlID0gdGhpcy5wYXJhbXMud2F0Y2hQcm9wZXJ0eVxuICAgICAgPyAodGhpcy5wYXJhbXMud2F0Y2hQcm9wZXJ0eSBhcyAoa2V5b2YgU3RvcmVTdGF0ZSlbXSkubWFwKHByb3AgPT4gdGhpcy5xdWVyeS5zZWxlY3Qoc3RhdGUgPT4gc3RhdGVbcHJvcF0pLnBpcGUobWFwKHZhbCA9PiAoeyB2YWwsIF9fYWtpdGFLZXk6IHByb3AgfSkpKSlcbiAgICAgIDogW3RoaXMuc2VsZWN0U291cmNlKHRoaXMuX2VudGl0eUlkKV07XG4gICAgdGhpcy5zdWJzY3JpcHRpb24gPSBtZXJnZSguLi5zb3VyY2UpXG4gICAgICAucGlwZShza2lwKDEpKVxuICAgICAgLnN1YnNjcmliZSgoY3VycmVudFN0YXRlOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHRoaXMuaGVhZCkpIHJldHVybjtcbiAgICAgICAgLyoqIF9fYWtpdGFLZXkgaXMgdXNlZCB0byBkZXRlcm1pbmUgaWYgd2UgYXJlIHRyYWNraW5nIGEgc3BlY2lmaWMgcHJvcGVydHkgb3IgYSBzdG9yZSBjaGFuZ2UgKi9cbiAgICAgICAgY29uc3QgaGVhZCA9IGN1cnJlbnRTdGF0ZS5fX2FraXRhS2V5ID8gdGhpcy5oZWFkW2N1cnJlbnRTdGF0ZS5fX2FraXRhS2V5IGFzIGFueV0gOiB0aGlzLmhlYWQ7XG4gICAgICAgIGNvbnN0IGNvbXBhcmVUbyA9IGN1cnJlbnRTdGF0ZS5fX2FraXRhS2V5ID8gY3VycmVudFN0YXRlLnZhbCA6IGN1cnJlbnRTdGF0ZTtcbiAgICAgICAgY29uc3QgaXNDaGFuZ2UgPSB0aGlzLnBhcmFtcy5jb21wYXJhdG9yKGhlYWQsIGNvbXBhcmVUbyk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVEaXJ0aW5lc3MoaXNDaGFuZ2UpO1xuICAgICAgfSk7XG4gIH1cblxuICByZXNldChwYXJhbXM6IERpcnR5Q2hlY2tSZXNldFBhcmFtcyA9IHt9KSB7XG4gICAgbGV0IGN1cnJlbnRWYWx1ZSA9IHRoaXMuaGVhZDtcbiAgICBpZiAoaXNGdW5jdGlvbihwYXJhbXMudXBkYXRlRm4pKSB7XG4gICAgICBpZiAodGhpcy5pc0VudGl0eUJhc2VkKHRoaXMuX2VudGl0eUlkKSkge1xuICAgICAgICBjdXJyZW50VmFsdWUgPSBwYXJhbXMudXBkYXRlRm4odGhpcy5oZWFkLCAodGhpcy5nZXRRdWVyeSgpIGFzIFF1ZXJ5RW50aXR5PFN0b3JlU3RhdGUsIEVudGl0eT4pLmdldEVudGl0eSh0aGlzLl9lbnRpdHlJZCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudFZhbHVlID0gcGFyYW1zLnVwZGF0ZUZuKHRoaXMuaGVhZCwgKHRoaXMuZ2V0UXVlcnkoKSBhcyBRdWVyeTxTdG9yZVN0YXRlPikuZ2V0U25hcHNob3QoKSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKiBJZiB3ZSBhcmUgd2F0Y2hpbmcgc3BlY2lmaWMgcHJvcHMgY29tcGFyZSB0aGVtLCBpZiBub3QgY29tcGFyZSB0aGUgZW50aXJlIHN0b3JlICovXG4gICAgY29uc3QgdXBkYXRlID0gdGhpcy5wYXJhbXMud2F0Y2hQcm9wZXJ0eSA/IHRoaXMuY29tcGFyZVByb3AoY3VycmVudFZhbHVlKSA6IHRoaXMuX2dldEhlYWQoKSAhPT0gY3VycmVudFZhbHVlO1xuICAgIGlmICh1cGRhdGUpIHtcbiAgICAgIF9fZ2xvYmFsU3RhdGUuc2V0Q3VzdG9tQWN0aW9uKHsgdHlwZTogYEBEaXJ0eUNoZWNrIC0gUmV2ZXJ0YCB9KTtcbiAgICAgIHRoaXMudXBkYXRlU3RvcmUoY3VycmVudFZhbHVlLCB0aGlzLl9lbnRpdHlJZCk7XG4gICAgfVxuICB9XG5cbiAgc2V0SGVhZCgpIHtcbiAgICBpZiAoIXRoaXMuYWN0aXZlKSB7XG4gICAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGVhZCA9IHRoaXMuX2dldEhlYWQoKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVEaXJ0aW5lc3MoZmFsc2UpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgaXNEaXJ0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdG9Cb29sZWFuKHRoaXMuZGlydHkudmFsdWUpO1xuICB9XG5cbiAgaGFzSGVhZCgpIHtcbiAgICByZXR1cm4gdG9Cb29sZWFuKHRoaXMuZ2V0SGVhZCgpKTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbiAmJiB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVEaXJ0aW5lc3MoaXNEaXJ0eTogYm9vbGVhbikge1xuICAgIHRoaXMuZGlydHkubmV4dChpc0RpcnR5KTtcbiAgfVxuXG4gIHByaXZhdGUgX2dldEhlYWQoKTogUGFydGlhbDxTdG9yZVN0YXRlPiB8IFN0b3JlU3RhdGUge1xuICAgIGxldCBoZWFkOiBTdG9yZVN0YXRlIHwgUGFydGlhbDxTdG9yZVN0YXRlPiA9IHRoaXMuZ2V0U291cmNlKHRoaXMuX2VudGl0eUlkKSBhcyBTdG9yZVN0YXRlO1xuICAgIGlmICh0aGlzLnBhcmFtcy53YXRjaFByb3BlcnR5KSB7XG4gICAgICBoZWFkID0gKHRoaXMucGFyYW1zLndhdGNoUHJvcGVydHkgYXMgKGtleW9mIFN0b3JlU3RhdGUpW10pLnJlZHVjZShcbiAgICAgICAgKF9oZWFkLCBwcm9wKSA9PiB7XG4gICAgICAgICAgX2hlYWRbcHJvcF0gPSAoaGVhZCBhcyBQYXJ0aWFsPFN0b3JlU3RhdGU+KVtwcm9wXTtcbiAgICAgICAgICByZXR1cm4gX2hlYWQ7XG4gICAgICAgIH0sXG4gICAgICAgIHt9IGFzIFBhcnRpYWw8U3RvcmVTdGF0ZT5cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBoZWFkO1xuICB9XG5cbiAgcHJpdmF0ZSBjb21wYXJlUHJvcChjdXJyZW50U3RhdGU6IFBhcnRpYWw8U3RvcmVTdGF0ZT4pOiBib29sZWFuIHtcbiAgICBjb25zdCBwcm9wS2V5cyA9IE9iamVjdC5rZXlzKGN1cnJlbnRTdGF0ZSk7XG4gICAgY29uc3QgaGVhZCA9IHRoaXMuX2dldEhlYWQoKTtcblxuICAgIHJldHVybiBwcm9wS2V5cy5zb21lKHByb3BLZXkgPT4gY3VycmVudFN0YXRlW3Byb3BLZXldICE9PSBoZWFkW3Byb3BLZXldKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtIYXNoTWFwLCBJRCwgSURTfSBmcm9tICcuLi8uLi9hcGkvdHlwZXMnO1xuaW1wb3J0IHtEaXJ0eUNoZWNrQ29tcGFyYXRvciwgZGlydHlDaGVja0RlZmF1bHRQYXJhbXMsIERpcnR5Q2hlY2tQbHVnaW4sIERpcnR5Q2hlY2tSZXNldFBhcmFtc30gZnJvbSAnLi9kaXJ0eS1jaGVjay1wbHVnaW4nO1xuaW1wb3J0IHtRdWVyeUVudGl0eX0gZnJvbSAnLi4vLi4vYXBpL3F1ZXJ5LWVudGl0eSc7XG5pbXBvcnQge0VudGl0eUNvbGxlY3Rpb25QbHVnaW59IGZyb20gJy4uL2VudGl0eS1jb2xsZWN0aW9uLXBsdWdpbic7XG5pbXBvcnQge21hcCwgc2tpcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IHR5cGUgRGlydHlDaGVja0NvbGxlY3Rpb25QYXJhbXM8RT4gPSB7XG4gIGNvbXBhcmF0b3I/OiBEaXJ0eUNoZWNrQ29tcGFyYXRvcjxFPjtcbiAgZW50aXR5SWRzPzogSUQgfCBJRFtdO1xufTtcblxuZXhwb3J0IGNsYXNzIEVudGl0eURpcnR5Q2hlY2tQbHVnaW48RSwgUCBleHRlbmRzIERpcnR5Q2hlY2tQbHVnaW48RSwgYW55PiA9IERpcnR5Q2hlY2tQbHVnaW48RSwgYW55Pj4gZXh0ZW5kcyBFbnRpdHlDb2xsZWN0aW9uUGx1Z2luPEUsIFA+IHtcblxuICBpc1NvbWVEaXJ0eSQ6IE9ic2VydmFibGU8Ym9vbGVhbj4gPSB0aGlzLnF1ZXJ5LnNlbGVjdChzdGF0ZSA9PiBzdGF0ZS5lbnRpdGllcylcbiAgICAucGlwZShtYXAoKGVudGl0aWVzOiBhbnkpID0+IHRoaXMuY2hlY2tTb21lRGlydHkoZW50aXRpZXMpKSk7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHF1ZXJ5OiBRdWVyeUVudGl0eTxhbnksIEU+LCBwcml2YXRlIHJlYWRvbmx5IHBhcmFtczogRGlydHlDaGVja0NvbGxlY3Rpb25QYXJhbXM8RT4gPSB7fSkge1xuICAgIHN1cGVyKHF1ZXJ5LCBwYXJhbXMuZW50aXR5SWRzKTtcbiAgICB0aGlzLnBhcmFtcyA9IHsuLi5kaXJ0eUNoZWNrRGVmYXVsdFBhcmFtcywgLi4ucGFyYW1zfTtcbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgdGhpcy5zZWxlY3RJZHMoKS5waXBlKHNraXAoMSkpLnN1YnNjcmliZShpZHMgPT4ge1xuICAgICAgdGhpcy5yZWJhc2UoaWRzLCB7YWZ0ZXJBZGQ6IHBsdWdpbiA9PiBwbHVnaW4uc2V0SGVhZCgpfSk7XG4gICAgfSk7XG4gIH1cblxuICBzZXRIZWFkKGlkcz86IElEUykge1xuICAgIHRoaXMuZm9yRWFjaElkKGlkcywgZSA9PiBlLnNldEhlYWQoKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBoYXNIZWFkKGlkOiBJRCk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLmVudGl0aWVzLmhhcyhpZCkpIHtcbiAgICAgIGNvbnN0IGVudGl0eSA9IHRoaXMuZ2V0RW50aXR5KGlkKTtcbiAgICAgIHJldHVybiBlbnRpdHkuaGFzSGVhZCgpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJlc2V0KGlkcz86IElEUywgcGFyYW1zOiBEaXJ0eUNoZWNrUmVzZXRQYXJhbXMgPSB7fSkge1xuICAgIHRoaXMuZm9yRWFjaElkKGlkcywgZSA9PiBlLnJlc2V0KHBhcmFtcykpO1xuICB9XG5cbiAgaXNEaXJ0eShpZDogSUQpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICBpc0RpcnR5KGlkOiBJRCwgYXNPYnNlcnZhYmxlOiB0cnVlKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgaXNEaXJ0eShpZDogSUQsIGFzT2JzZXJ2YWJsZTogZmFsc2UpOiBib29sZWFuO1xuICBpc0RpcnR5KGlkOiBJRCwgYXNPYnNlcnZhYmxlID0gdHJ1ZSk6IE9ic2VydmFibGU8Ym9vbGVhbj4gfCBib29sZWFuIHtcbiAgICBpZiAodGhpcy5lbnRpdGllcy5oYXMoaWQpKSB7XG4gICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmdldEVudGl0eShpZCk7XG4gICAgICByZXR1cm4gYXNPYnNlcnZhYmxlID8gZW50aXR5LmlzRGlydHkkIDogZW50aXR5LmlzRGlydHkoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpc1NvbWVEaXJ0eSgpOiBib29sZWFuIHtcbiAgICBjb25zdCBlbnRpdGllcyA9IHRoaXMucXVlcnkuZ2V0QWxsKHthc09iamVjdDogdHJ1ZX0pO1xuICAgIHJldHVybiB0aGlzLmNoZWNrU29tZURpcnR5KGVudGl0aWVzKTtcbiAgfVxuXG4gIGRlc3Ryb3koaWRzPzogSURTKSB7XG4gICAgdGhpcy5mb3JFYWNoSWQoaWRzLCBlID0+IGUuZGVzdHJveSgpKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBpbnN0YW50aWF0ZVBsdWdpbihpZDogSUQpOiBQIHtcbiAgICByZXR1cm4gbmV3IERpcnR5Q2hlY2tQbHVnaW4odGhpcy5xdWVyeSwgdGhpcy5wYXJhbXMsIGlkKSBhcyBQO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja1NvbWVEaXJ0eShlbnRpdGllczogSGFzaE1hcDxFPik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGVudGl0aWVzSWRzID0gdGhpcy5yZXNvbHZlZElkcygpO1xuICAgIGZvciAoY29uc3QgaWQgb2YgZW50aXRpZXNJZHMpIHtcbiAgICAgIGNvbnN0IGRpcnR5ID0gdGhpcy5wYXJhbXMuY29tcGFyYXRvcigodGhpcy5nZXRFbnRpdHkoaWQpIGFzIGFueSkuZ2V0SGVhZCgpLCBlbnRpdGllc1tpZF0pO1xuICAgICAgaWYgKGRpcnR5KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsImltcG9ydCB7IGlzTnVtYmVyIH0gZnJvbSAnLi4vaW50ZXJuYWwvdXRpbHMnO1xuXG4vKipcbiAqIEBleGFtcGxlXG4gKlxuICogdGhpcy5wZW9wbGVTdG9yZS51cGRhdGUoaWQsIHBlcnNvbiA9PiAoe1xuICogICBndWVzdHM6IGluY3JlbWVudChwZXJzb24uZ3Vlc3RzKVxuICogfSkpO1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5jcmVtZW50KHZhbHVlOiBudW1iZXIsIHBhcmFtczogeyBtYXhWYWx1ZTogbnVtYmVyIHwgdW5kZWZpbmVkIH0gPSB7IG1heFZhbHVlOiB1bmRlZmluZWQgfSkge1xuICBpZiAoaXNOdW1iZXIodmFsdWUpID09PSBmYWxzZSkgcmV0dXJuO1xuICBpZiAocGFyYW1zLm1heFZhbHVlICYmIHZhbHVlID09PSBwYXJhbXMubWF4VmFsdWUpIHJldHVybiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICsgMTtcbn1cblxuLyoqXG4gKiBAZXhhbXBsZVxuICpcbiAqIHRoaXMucGVvcGxlU3RvcmUudXBkYXRlKGlkLCBwZXJzb24gPT4gKHtcbiAqICAgZ3Vlc3RzOiBkZWNyZW1lbnQocGVyc29uLmd1ZXN0cylcbiAqIH0pKTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY3JlbWVudCh2YWx1ZSwgcGFyYW1zOiB7IGFsbG93TmVnYXRpdmU6IGJvb2xlYW4gfSA9IHsgYWxsb3dOZWdhdGl2ZTogZmFsc2UgfSkge1xuICBpZiAoaXNOdW1iZXIodmFsdWUpID09PSBmYWxzZSkgcmV0dXJuO1xuICBpZiAocGFyYW1zLmFsbG93TmVnYXRpdmUgPT09IGZhbHNlICYmIHZhbHVlID09PSAwKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiB2YWx1ZSAtIDE7XG59XG5cbi8qKlxuICogR2VuZXJhdGUgcmFuZG9tIGd1aWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGd1aWQoKSB7XG4gIHJldHVybiAneHh4eHh4NHh5eCcucmVwbGFjZSgvW3h5XS9nLCBjID0+IHtcbiAgICBjb25zdCByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwLFxuICAgICAgdiA9IGMgPT0gJ3gnID8gciA6IChyICYgMHgzKSB8IDB4ODtcbiAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbIk9ic2VydmFibGUiLCJ0c2xpYl8xLl9fZXh0ZW5kcyIsIlN1YmplY3QiLCJvZiIsIlJlcGxheVN1YmplY3QiLCJ0c2xpYl8xLl9fYXNzaWduIiwibWFwIiwiZGlzdGluY3RVbnRpbENoYW5nZWQiLCJCZWhhdmlvclN1YmplY3QiLCJ0YWtlIiwid2l0aExhdGVzdEZyb20iLCJjb21iaW5lTGF0ZXN0IiwiYXVkaXRUaW1lIiwic3dpdGNoTWFwIiwidHNsaWJfMS5fX3NwcmVhZCIsImZpbHRlciIsImRlbGF5IiwiZnJvbSIsImRlYm91bmNlVGltZSIsInNraXAiLCJwYWlyd2lzZSIsIm1lcmdlIiwidHNsaWJfMS5fX3ZhbHVlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0lBQUE7Ozs7Ozs7Ozs7Ozs7O0lBY0E7SUFFQSxJQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYztTQUNwQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUM1RSxVQUFVLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztnQkFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUUvRSx1QkFBMEIsQ0FBQyxFQUFFLENBQUM7UUFDMUIsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwQixnQkFBZ0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtRQUN2QyxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7QUFFRCxJQUFPLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksa0JBQWtCLENBQUM7UUFDdEQsS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDakQsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFD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