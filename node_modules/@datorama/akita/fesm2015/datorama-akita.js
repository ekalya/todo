import { Observable, Subject, of, BehaviorSubject, ReplaySubject, combineLatest, from, merge } from 'rxjs';
import { __decorate, __metadata, __rest } from 'tslib';
import { distinctUntilChanged, map, take, auditTime, switchMap, withLatestFrom, filter, delay, debounceTime, skip, pairwise } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Wraps the provided value in an array, unless the provided _value is an array.
 * @template T
 * @param {?} value
 * @return {?}
 */
function coerceArray(value) {
    return Array.isArray(value) ? value : [value];
}
/**
 * Check if a value is an object
 * @param {?} value
 * @return {?}
 */
function isObject(value) {
    return Object.prototype.toString.call(value) === '[object Object]';
}
/**
 * @param {?} value
 * @return {?}
 */
function isPlainObject(value) {
    return toBoolean(value) && value.constructor.name === 'Object';
}
/**
 * @param {?} value
 * @return {?}
 */
function isFunction(value) {
    return typeof value === 'function';
}
/**
 * @param {?} value
 * @return {?}
 */
function toBoolean(value) {
    return value != null && `${value}` !== 'false';
}
/**
 * @param {?} value
 * @return {?}
 */
function isUndefined(value) {
    return typeof value === 'undefined';
}
/**
 * Check if entity exists
 * @template E
 * @param {?} id
 * @param {?} entities
 * @return {?}
 */
function entityExists(id, entities) {
    return entities.hasOwnProperty(id);
}
/**
 * Observable that emits empty value and complete
 * @template T
 * @return {?}
 */
function noop() {
    return new Observable(observer => {
        observer.next();
        observer.complete();
    });
}
/**
 * @param {?} value
 * @return {?}
 */
function isObservable(value) {
    return toBoolean(value) && isFunction(value.subscribe);
}
/**
 * @param {?} val
 * @return {?}
 */
function isString(val) {
    return typeof val === 'string';
}
/**
 * @param {?} value
 * @return {?}
 */
function isNumber(value) {
    return typeof value === 'number';
}
/**
 * @param {?} val
 * @return {?}
 */
function isDefined(val) {
    return val !== null && typeof val !== 'undefined';
}
/**
 * Check if the active entity exist
 * @template E
 * @param {?} state
 * @return {?}
 */
function resetActive(state) {
    return isActiveState(state) && entityExists((/** @type {?} */ (state)).active, state.entities) === false;
}
/**
 * Check if the store supports active entity
 * @template E
 * @param {?} state
 * @return {?}
 */
function isActiveState(state) {
    return (/** @type {?} */ (state)).hasOwnProperty('active');
}
/** *
 * setValue(state, 'todos.ui', { filter: {}})
  @type {?} */
const setValue = (obj, prop, val) => {
    /** @type {?} */
    const split = prop.split('.');
    if (split.length === 1)
        return val;
    obj = Object.assign({}, obj);
    /** @type {?} */
    const lastIndex = split.length - 2;
    /** @type {?} */
    const removeStoreName = prop.split('.').slice(1);
    removeStoreName.reduce((acc, part, index) => {
        if (index === lastIndex) {
            acc[part] = val;
        }
        else {
            acc[part] = Object.assign({}, acc[part]);
        }
        return acc && acc[part];
    }, obj);
    return obj;
};
/** *
 * getValue(state, 'todos.ui')
  @type {?} */
const getValue = (obj, prop) => {
    /** return the whole state  */
    if (prop.split('.').length === 1) {
        return obj;
    }
    /** @type {?} */
    const removeStoreName = prop
        .split('.')
        .slice(1)
        .join('.');
    return removeStoreName.split('.').reduce((acc, part) => acc && acc[part], obj);
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AkitaError extends Error {
    /**
     * @param {?} message
     */
    constructor(message) {
        super(message);
    }
}
class AkitaImmutabilityError extends AkitaError {
    /**
     * @param {?} storeName
     */
    constructor(storeName) {
        super(`The new state should be immutable. Make sure to return a new immutable state. \n store: \n ${storeName}`);
    }
}
class AkitaEntityNotExistsError extends AkitaError {
    /**
     * @param {?} id
     */
    constructor(id) {
        super(`Entity ${id} does not exists`);
    }
}
class AkitaNoActiveError extends AkitaError {
    constructor() {
        super(`Active is null/undefined`);
    }
}
class AkitaInvalidEntityState extends AkitaError {
    constructor() {
        super(`Entity state is invalid`);
    }
}
class AkitaUpdateIdKeyError extends AkitaError {
    constructor() {
        super(`Updating entity id is not permitted when updating many entities`);
    }
}
/**
 * @param {?} id
 * @param {?} entities
 * @return {?}
 */
function assertEntityExists(id, entities) {
    if (!entityExists(id, entities)) {
        throw new AkitaEntityNotExistsError(id);
    }
}
/**
 * @param {?} store
 * @return {?}
 */
function assertActive(store) {
    if (!toBoolean(store.active)) {
        throw new AkitaNoActiveError();
    }
}
/**
 * @param {?} state
 * @return {?}
 */
function assertEntityState(state) {
    /** @type {?} */
    const assertEntities = isObject(state);
    if (!assertEntities) {
        throw new AkitaInvalidEntityState();
    }
}
/**
 * @param {?} name
 * @param {?} className
 * @return {?}
 */
function assertDecorator(name, className) {
    if (!name) {
        console.error(`@StoreConfig({ name }) is missing in ${className}`);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CRUD {
    /**
     * @template S, E
     * @param {?} state
     * @param {?} entities
     * @param {?} entityClass
     * @param {?} idKey
     * @return {?}
     */
    _set(state, entities, entityClass, idKey) {
        /** @type {?} */
        let ids;
        /** @type {?} */
        let normalized;
        if ((/** @type {?} */ (entities)).ids && (/** @type {?} */ (entities)).entities) {
            ids = (/** @type {?} */ (entities)).ids;
            normalized = (/** @type {?} */ (entities)).entities;
        }
        else {
            /** @type {?} */
            const isArray = Array.isArray(entities);
            normalized = entities;
            if (isArray) {
                normalized = /** @type {?} */ (this.keyBy(/** @type {?} */ (entities), entityClass, idKey));
            }
            else {
                assertEntityState(entities);
            }
            ids = isArray ? (/** @type {?} */ (entities)).map(entity => entity[idKey]) : Object.keys(/** @type {?} */ (normalized)).map(id => entities[id][idKey]);
        }
        /** @type {?} */
        const newState = Object.assign({}, (/** @type {?} */ (state)), { entities: normalized, ids, loading: false });
        if (resetActive(newState)) {
            newState.active = null;
        }
        return newState;
    }
    /**
     * @template T
     * @param {?} state
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    _replaceEntity(state, id, entity) {
        return Object.assign({}, (/** @type {?} */ (state)), { entities: Object.assign({}, state.entities, { [id]: entity }) });
    }
    /**
     * @template S, E
     * @param {?} state
     * @param {?} entities
     * @param {?} idKey
     * @return {?}
     */
    _add(state, entities, idKey) {
        /** @type {?} */
        let addedEntities = {};
        /** @type {?} */
        let addedIds = [];
        for (let i = 0; i < entities.length; i++) {
            /** @type {?} */
            const entity = entities[i];
            /** @type {?} */
            const entityId = entity[idKey];
            if (!entityExists(entityId, state.entities)) {
                addedEntities[entityId] = entity;
                addedIds.push(entityId);
            }
        }
        return Object.assign({}, (/** @type {?} */ (state)), { entities: Object.assign({}, state.entities, addedEntities), ids: [...state.ids, ...addedIds] });
    }
    /**
     * @template T
     * @param {?} state
     * @param {?} ids
     * @param {?} newStateOrFn
     * @param {?} idKey
     * @return {?}
     */
    _update(state, ids, newStateOrFn, idKey) {
        /** @type {?} */
        const updatedEntities = {};
        /** @type {?} */
        let isUpdatingIdKey = false;
        /** @type {?} */
        let idToUpdate;
        for (let i = 0; i < ids.length; i++) {
            /** @type {?} */
            const id = ids[i];
            idToUpdate = id;
            assertEntityExists(id, state.entities);
            /** @type {?} */
            const oldEntity = state.entities[id];
            /** @type {?} */
            const newState = isFunction(newStateOrFn) ? newStateOrFn(oldEntity) : newStateOrFn;
            if (newState.hasOwnProperty(idKey) && newState[idKey] !== oldEntity[idKey]) {
                if (ids.length > 1) {
                    throw new AkitaUpdateIdKeyError();
                }
                isUpdatingIdKey = true;
                idToUpdate = newState[idKey];
            }
            /** @type {?} */
            let newEntity;
            /** @type {?} */
            const merged = Object.assign({}, oldEntity, newState);
            if (isPlainObject(oldEntity)) {
                newEntity = merged;
            }
            else {
                newEntity = new oldEntity.constructor(merged);
            }
            updatedEntities[idToUpdate] = newEntity;
        }
        /** @type {?} */
        let updatedIds = state.ids;
        /** @type {?} */
        let stateEntities = state.entities;
        if (isUpdatingIdKey) {
            const [id] = ids;
            const _a = state.entities, _b = id, deletedEntity = _a[_b], rest = __rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);
            stateEntities = rest;
            updatedIds = state.ids.map(current => (current === id ? idToUpdate : current));
        }
        return Object.assign({}, (/** @type {?} */ (state)), { entities: Object.assign({}, stateEntities, updatedEntities), ids: updatedIds });
    }
    /**
     * @template T
     * @param {?} state
     * @param {?} ids
     * @return {?}
     */
    _remove(state, ids) {
        if (!ids)
            return this._removeAll(state);
        /** @type {?} */
        const removed = ids.reduce((acc, id) => {
            const _a = id, entity = acc[_a], rest = __rest(acc, [typeof _a === "symbol" ? _a : _a + ""]);
            return rest;
        }, state.entities);
        /** @type {?} */
        const newState = Object.assign({}, (/** @type {?} */ (state)), { entities: removed, ids: state.ids.filter(current => ids.indexOf(current) === -1) });
        if (resetActive(newState)) {
            newState.active = null;
        }
        return newState;
    }
    /**
     * @template T
     * @param {?} state
     * @return {?}
     */
    _removeAll(state) {
        /** @type {?} */
        const newState = Object.assign({}, (/** @type {?} */ (state)), { entities: {}, ids: [], active: null });
        return newState;
    }
    /**
     * @param {?} entities
     * @param {?=} entityClass
     * @param {?=} id
     * @return {?}
     */
    keyBy(entities, entityClass, id = 'id') {
        /** @type {?} */
        const acc = {};
        for (let i = 0, len = entities.length; i < len; i++) {
            /** @type {?} */
            const entity = entities[i];
            acc[entity[id]] = entityClass ? new entityClass(entity) : entity;
        }
        return acc;
    }
}
/** @type {?} */
const _crud = new CRUD();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AkitaGlobals {
    constructor() {
        this.skipAction = false;
        this.skipTransactionMsg = false;
        this.currentT = [];
        this.activeTransactions = 0;
    }
    /**
     * @param {?} _action
     * @return {?}
     */
    setAction(_action) {
        if (this.customAction) {
            this.currentAction = this.customAction;
            this.customAction = null;
            this.skipTransactionMsg = false;
        }
        else {
            if (this.activeTransactions === 0) {
                this.currentAction = _action;
            }
        }
        if (this.activeTransactions > 0) {
            this.currentT.push(_action);
        }
    }
    /**
     * @param {?} action
     * @param {?=} skipTransactionMsg
     * @return {?}
     */
    setCustomAction(action, skipTransactionMsg = false) {
        this.currentAction = this.customAction = action;
        this.skipTransactionMsg = skipTransactionMsg;
    }
    /**
     * @param {?=} skip
     * @return {?}
     */
    setSkipAction(skip$$1 = true) {
        this.skipAction = skip$$1;
    }
}
/** @type {?} */
const __globalState = new AkitaGlobals();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Start a new transaction batch
 * @return {?}
 */
function startBatch() {
    if (!isTransactionInProcess()) {
        __globalState.batchTransaction = new Subject();
    }
    __globalState.activeTransactions++;
}
/**
 * End the transaction
 * @return {?}
 */
function endBatch() {
    if (--__globalState.activeTransactions === 0) {
        __globalState.batchTransaction.next(true);
        __globalState.batchTransaction.complete();
    }
}
/**
 * Whether we're inside batch
 * @return {?}
 */
function isTransactionInProcess() {
    return __globalState.activeTransactions > 0;
}
/**
 *
 * @return {?}
 */
function commit() {
    return __globalState.batchTransaction ? __globalState.batchTransaction.asObservable() : of(true);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} o
 * @return {?}
 */
function deepFreeze(o) {
    Object.freeze(o);
    Object.getOwnPropertyNames(o).forEach(function (prop) {
        if (o.hasOwnProperty(prop) && o[prop] !== null && (typeof o[prop] === 'object' || typeof o[prop] === 'function') && !Object.isFrozen(o[prop])) {
            deepFreeze(o[prop]);
        }
    });
    return o;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @type {?} */
const configKey = 'akitaConfig';
/**
 * @param {?} metadata
 * @return {?}
 */
function StoreConfig(metadata) {
    return function (constructor) {
        constructor[configKey] = { idKey: 'id' };
        for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {
            /** @type {?} */
            const key = keys[i];
            /* name is preserved read only key */
            if (key === 'name') {
                constructor[configKey]['storeName'] = metadata[key];
            }
            else {
                constructor[configKey][key] = metadata[key];
            }
        }
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** *
 * Whether we are in dev mode
  @type {?} */
let __DEV__ = true;
/** @type {?} */
const __stores__ = {};
/** @type {?} */
const rootDispatcher = new ReplaySubject();
/**
 * @param {?} storeName
 * @param {?=} initialState
 * @return {?}
 */
function nextState(storeName, initialState = false) {
    return {
        type: 1 /* NEW_STATE */,
        payload: {
            name: storeName,
            initialState
        }
    };
}
/**
 * Enable production mode to disable objectFreeze
 * @return {?}
 */
function enableAkitaProdMode() {
    __DEV__ = false;
}
/**
 * @return {?}
 */
function isDev() {
    return __DEV__;
}
/**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S
 */
class Store {
    /**
     *
     * Initial the store with the state
     * @param {?} initialState
     */
    constructor(initialState) {
        /**
         * Whether we are inside transaction *
         */
        this.inTransaction = false;
        this._isPristine = true;
        __globalState.setAction({ type: '@@INIT' });
        __stores__[this.storeName] = this;
        this.setState(() => initialState);
        rootDispatcher.next({
            type: 0 /* NEW_STORE */,
            payload: { store: this }
        });
        isDev() && assertDecorator(this.storeName, this.constructor.name);
    }
    /**
     * @param {?=} loading
     * @return {?}
     */
    setLoading(loading = false) {
        if (loading !== (/** @type {?} */ (this._value())).loading) {
            isDev() && __globalState.setAction({ type: 'Set Loading' });
            this.setState(s => (/** @type {?} */ (Object.assign({}, (/** @type {?} */ (s)), { loading }))));
        }
    }
    /**
     * Update the store's error state.
     * @template T
     * @param {?} error
     * @return {?}
     */
    setError(error) {
        if (error !== (/** @type {?} */ (this._value())).error) {
            isDev() && __globalState.setAction({ type: 'Set Error' });
            this.setState(s => (/** @type {?} */ (Object.assign({}, (/** @type {?} */ (s)), { error }))));
        }
    }
    /**
     * Select a slice from the store
     *
     * \@example
     * this.store.select(state => state.entities)
     *
     * @template R
     * @param {?} project
     * @return {?}
     */
    _select(project) {
        return this.store$.pipe(map(project), distinctUntilChanged());
    }
    /**
     * @return {?}
     */
    _value() {
        return this.storeValue;
    }
    /**
     * @return {?}
     */
    get config() {
        return this.constructor[configKey];
    }
    /**
     * Get the store name
     * @return {?}
     */
    get storeName() {
        return this.config && this.config['storeName'];
    }
    /**
     * @return {?}
     */
    get isPristine() {
        return this._isPristine;
    }
    /**
     * `setState()` is the only way to update a store; It receives a callback function,
     * which gets the current state, and returns a new immutable state,
     * which will be the new value of the store.
     * @param {?} newStateFn
     * @param {?=} _rootDispatcher
     * @return {?}
     */
    setState(newStateFn, _rootDispatcher = true) {
        /** @type {?} */
        const prevState = this._value();
        this.storeValue = __DEV__ ? deepFreeze(newStateFn(this._value())) : newStateFn(this._value());
        if (prevState === this.storeValue) {
            throw new AkitaImmutabilityError(this.storeName);
        }
        if (!this.store) {
            this.store = new BehaviorSubject(this.storeValue);
            rootDispatcher.next(nextState(this.storeName, true));
            return;
        }
        if (isTransactionInProcess()) {
            this.handleTransaction();
            return;
        }
        this.dispatch(this.storeValue, _rootDispatcher);
    }
    /**
     * @param {?} newStateOrId
     * @param {?=} newState
     * @return {?}
     */
    update(newStateOrId, newState) {
        __globalState.setAction({ type: 'Update Store' });
        this.setState(state => {
            /** @type {?} */
            let value = isFunction(newStateOrId) ? newStateOrId(state) : newStateOrId;
            /** @type {?} */
            let merged = Object.assign({}, state, value);
            return isPlainObject(state) ? merged : new (/** @type {?} */ (state)).constructor(merged);
        });
        this.setDirty();
    }
    /**
     * Sets the store to a pristine state.
     * @return {?}
     */
    setPristine() {
        this._isPristine = true;
    }
    /**
     * Sets the store to a dirty state, indicating that it is not pristine.
     * @return {?}
     */
    setDirty() {
        this._isPristine = false;
    }
    /**
     * @param {?} state
     * @param {?=} _rootDispatcher
     * @return {?}
     */
    dispatch(state, _rootDispatcher = true) {
        this.store.next(state);
        if (_rootDispatcher) {
            rootDispatcher.next(nextState(this.storeName));
            isDev() && __globalState.setAction({ type: 'Set State' });
        }
    }
    /**
     * @return {?}
     */
    get store$() {
        return this.store.asObservable();
    }
    /**
     * When the transaction ends dispatch the final value once
     * @return {?}
     */
    watchTransaction() {
        commit().subscribe(() => {
            this.inTransaction = false;
            if (isDev() && !__globalState.skipTransactionMsg) {
                __globalState.setAction({ type: '@Transaction' });
            }
            this.dispatch(this._value());
            __globalState.currentT = [];
            __globalState.skipTransactionMsg = false;
        });
    }
    /**
     * Listen to the transaction stream
     * @return {?}
     */
    handleTransaction() {
        if (!this.inTransaction) {
            this.watchTransaction();
            this.inTransaction = true;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this === __stores__[this.storeName]) {
            delete __stores__[this.storeName];
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
// unsupported: template constraints.
/**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S, E
 */
class EntityStore extends Store {
    /**
     *
     * Initiate the store with the state
     * @param {?=} initialState
     * @param {?=} options
     */
    constructor(initialState = {}, options = {}) {
        super(Object.assign({}, getInitialEntitiesState(), initialState));
        this.options = options;
    }
    /**
     * @return {?}
     */
    get entities() {
        return this._value().entities;
    }
    /**
     * @return {?}
     */
    get idKey() {
        /** *
         * backward compatibility
          @type {?} */
        const newIdKey = this.config && this.config.idKey;
        if (!newIdKey) {
            return this.options.idKey || 'id';
        }
        return newIdKey;
    }
    /**
     *
     * Replace current collection with provided collection
     *
     * \@example
     * this.store.set([Entity, Entity]);
     * this.store.set({1: Entity, 2: Entity});
     * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });
     *
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    set(entities, options = {}) {
        isDev() && __globalState.setAction({ type: 'Set Entities' });
        this.setState(state => _crud._set(state, entities, options.entityClass, this.idKey));
        this.setDirty();
    }
    /**
     * Create or replace an entity in the store.
     *
     * \@example
     * this.store.createOrReplace(3, Entity);
     *
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    createOrReplace(id, entity) {
        if (!entityExists(id, this._value().entities)) {
            if (!entity[this.idKey]) {
                entity[this.idKey] = id;
            }
            return this.add(entity);
        }
        isDev() && __globalState.setAction({ type: 'Upsert Entity', entityId: [id] });
        this.setState(state => _crud._replaceEntity(state, id, entity));
    }
    /**
     * Add an entity or entities to the store.
     *
     * \@example
     * this.store.add([Entity, Entity]);
     * this.store.add(Entity);
     * @param {?} entities
     * @return {?}
     */
    add(entities) {
        /** @type {?} */
        const toArray = coerceArray(entities);
        if (toArray.length === 0)
            return;
        isDev() && __globalState.setAction({ type: 'Add Entity' });
        this.setState(state => _crud._add(state, toArray, this.idKey));
    }
    /**
     * @param {?} idsOrFn
     * @param {?=} newStateOrFn
     * @return {?}
     */
    update(idsOrFn, newStateOrFn) {
        /** @type {?} */
        let ids = [];
        /** @type {?} */
        const storeIds = this._value().ids;
        if (isFunction(idsOrFn)) {
            for (let i = 0, len = storeIds.length; i < len; i++) {
                /** @type {?} */
                const id = storeIds[i];
                /** @type {?} */
                const entity = this._value().entities[id];
                if (entity && (/** @type {?} */ (idsOrFn))(entity)) {
                    ids.push(id);
                }
            }
        }
        else {
            ids = toBoolean(idsOrFn) ? coerceArray(idsOrFn) : storeIds;
        }
        if (ids.length === 0)
            return;
        isDev() && __globalState.setAction({ type: 'Update Entity', entityId: ids });
        this.setState(state => {
            return _crud._update(state, ids, newStateOrFn, this.idKey);
        });
    }
    /**
     * An alias to update all.
     * @param {?} state
     * @return {?}
     */
    updateAll(state) {
        if (this._value().ids.length === 0)
            return;
        this.update(null, state);
    }
    /**
     * Update the root state (data which is external to the entities).
     *
     * \@example
     * this.store.updateRoot({
     *   metadata: 'new metadata
     * });
     *
     *  this.store.updateRoot(state => {
     *    return {
     *      metadata: {
     *        ...state.metadata,
     *        key: 'new value'
     *      }
     *    }
     *  });
     * @param {?} newStateFn
     * @param {?=} action
     * @return {?}
     */
    updateRoot(newStateFn, action) {
        /** @type {?} */
        const newState = isFunction(newStateFn) ? newStateFn(this._value()) : newStateFn;
        if (newState === this._value()) {
            throw new AkitaImmutabilityError(this.storeName);
        }
        isDev() && __globalState.setAction(action || { type: 'Update Root' });
        this.setState(state => {
            return Object.assign({}, (/** @type {?} */ (state)), (/** @type {?} */ (newState)));
        });
    }
    /**
     * @param {?=} idsOrFn
     * @return {?}
     */
    remove(idsOrFn) {
        /** @type {?} */
        const storeIds = this._value().ids;
        if (storeIds.length === 0)
            return;
        /** @type {?} */
        const idPassed = toBoolean(idsOrFn);
        if (!idPassed)
            this.setPristine();
        /** @type {?} */
        let ids = [];
        if (isFunction(idsOrFn)) {
            for (let i = 0, len = storeIds.length; i < len; i++) {
                /** @type {?} */
                const id = storeIds[i];
                /** @type {?} */
                const entity = this._value().entities[id];
                if (entity && idsOrFn(entity)) {
                    ids.push(id);
                }
            }
        }
        else {
            ids = idPassed ? coerceArray(idsOrFn) : null;
        }
        if (ids && ids.length === 0)
            return;
        isDev() && __globalState.setAction({ type: 'Remove Entity', entityId: ids });
        this.setState(state => {
            return _crud._remove(state, ids);
        });
    }
    /**
     *
     * Update the active entity.
     *
     * \@example
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     * @param {?} newStateFn
     * @return {?}
     */
    updateActive(newStateFn) {
        assertActive(this._value());
        isDev() && __globalState.setAction({ type: 'Update Active Entity', entityId: this._value()["active"] });
        this.setState(state => {
            /** @type {?} */
            const activeId = state["active"];
            /** @type {?} */
            const newState = isFunction(newStateFn) ? newStateFn(state.entities[activeId]) : newStateFn;
            if (newState === state) {
                throw new AkitaImmutabilityError(this.storeName);
            }
            return _crud._update(state, [activeId], newState, this.idKey);
        });
    }
    /**
     * Set the given entity as active.
     * @param {?} id
     * @return {?}
     */
    setActive(id) {
        if (id === this._value()["active"])
            return;
        isDev() && __globalState.setAction({ type: 'Set Active Entity', entityId: id });
        this.setState(state => {
            return Object.assign({}, (/** @type {?} */ (state)), { active: id });
        });
    }
}
/** @type {?} */
const getInitialEntitiesState = () => (/** @type {?} */ ({
    entities: {},
    ids: [],
    loading: true,
    error: null
}));
/** @type {?} */
const getInitialActiveState = () => (/** @type {?} */ ({
    active: null
}));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {string} */
const Order = {
    ASC: 'asc',
    DESC: 'desc',
};
/**
 * @param {?} key
 * @param {?=} order
 * @return {?}
 */
function compareValues(key, order = Order.ASC) {
    return function (a, b) {
        if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {
            return 0;
        }
        /** @type {?} */
        const varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];
        /** @type {?} */
        const varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];
        /** @type {?} */
        let comparison = 0;
        if (varA > varB) {
            comparison = 1;
        }
        else if (varA < varB) {
            comparison = -1;
        }
        return order == Order.DESC ? comparison * -1 : comparison;
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} fn
 * @return {?}
 */
function memoizeOne(fn) {
    /** @type {?} */
    let lastArgs;
    /** @type {?} */
    let changed = false;
    /** @type {?} */
    let firstInit = true;
    /** @type {?} */
    let lastResult;
    return function (...args) {
        if (lastArgs) {
            /** If entities nor ids doesn't change return the last value */
            changed = lastArgs[1] !== args[1] || lastArgs[0] !== args[0];
        }
        if (firstInit || (changed && !firstInit)) {
            lastResult = fn.apply(this, args);
        }
        firstInit = false;
        lastArgs = args;
        return lastResult;
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @type {?} */
const queryConfigKey = 'akitaQueryConfig';
/**
 * @template E
 * @param {?} metadata
 * @return {?}
 */
function QueryConfig(metadata) {
    return function (constructor) {
        constructor[queryConfigKey] = {};
        for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {
            /** @type {?} */
            const key = keys[i];
            constructor[queryConfigKey][key] = metadata[key];
        }
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template S
 */
class Query {
    /**
     * @param {?} store
     */
    constructor(store) {
        this.store = store;
        this.__store__ = store;
    }
    /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    select(project) {
        /** @type {?} */
        let state = project ? project : state => state;
        return this.store._select(state);
    }
    /**
     * Select once and complete.
     * @template R
     * @param {?} project
     * @return {?}
     */
    selectOnce(project) {
        return this.select(project).pipe(take(1));
    }
    /**
     * Select the store's loading state.
     * @return {?}
     */
    selectLoading() {
        return this.select(state => (/** @type {?} */ (state)).loading);
    }
    /**
     * Select the store's error state.
     * @return {?}
     */
    selectError() {
        return this.select(state => (/** @type {?} */ (state)).error);
    }
    /**
     * Get the raw value of the store.
     * @return {?}
     */
    getSnapshot() {
        return this.store._value();
    }
    /**
     *  Returns whether the state of the store is pristine (the set() method hasn't been explicitly called
     *  since the store creation, or the last time setPristine()was called).
     * @return {?}
     */
    get isPristine() {
        return this.store.isPristine;
    }
    /**
     * Returns whether the state of the store is dirty (the set() method
     * or the setDirty() method has been explicitly called since the store creation,
     * or the last time setPristine() was called).
     * @return {?}
     */
    get isDirty() {
        return !this.store.isPristine;
    }
    /**
     * @return {?}
     */
    get config() {
        return this.constructor[queryConfigKey];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
// unsupported: template constraints.
/**
 *  An abstraction for querying the entities from the store
 * @template S, E
 */
class QueryEntity extends Query {
    /**
     * @param {?} store
     */
    constructor(store) {
        super(store);
        this.__store__ = store;
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    selectAll(options = {
        asObject: false
    }) {
        /** @type {?} */
        const selectState$ = this.select(state => state);
        /** @type {?} */
        const selectEntities$ = this.select(state => state.entities);
        options.sortBy = options.sortBy || (this.config && (/** @type {?} */ (this.config.sortBy)));
        options.sortByOrder = options.sortByOrder || (this.config && this.config.sortByOrder);
        return selectEntities$.pipe(withLatestFrom(selectState$, (entities, state) => {
            const { ids } = state;
            if (options.asObject) {
                return toMap(ids, entities, options);
            }
            else {
                if (!options.filterBy && !options.sortBy) {
                    if (!this.memoized) {
                        this.memoized = memoizeOne(toArray);
                    }
                    return this.memoized(state, options);
                }
                return toArray(state, options);
            }
        }));
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    getAll(options = { asObject: false, filterBy: undefined, limitTo: undefined }) {
        /** @type {?} */
        const state = this.getSnapshot();
        if (options.asObject) {
            return toMap(state.ids, state.entities, options, true);
        }
        return toArray(state, options);
    }
    /**
     * Select multiple entities from the store.
     *
     * \@example
     * this.store.selectMany([1,2]);
     * @param {?} ids
     * @param {?=} options
     * @return {?}
     */
    selectMany(ids, options = {}) {
        /** @type {?} */
        const filterUndefined = isUndefined(options.filterUndefined) ? true : options.filterUndefined;
        /** @type {?} */
        const entities = ids.map(id => this.selectEntity(id));
        return combineLatest(entities).pipe(map(entities => {
            return filterUndefined ? entities.filter(val => !isUndefined(val)) : entities;
        }), auditTime(0));
    }
    /**
     * @template R
     * @param {?} id
     * @param {?=} project
     * @return {?}
     */
    selectEntity(id, project) {
        if (!project) {
            return this._byId(id);
        }
        return this.select(state => {
            if (this.hasEntity(id)) {
                return project(this.getEntity(id));
            }
            return undefined;
        });
    }
    /**
     * Get an entity by id
     *
     * \@example
     * this.store.getEntity(1);
     * @param {?} id
     * @return {?}
     */
    getEntity(id) {
        return this.getSnapshot().entities[id];
    }
    /**
     * Select the active entity's id.
     * @return {?}
     */
    selectActiveId() {
        return this.select(state => (/** @type {?} */ (state)).active);
    }
    /**
     * Get the active id
     * @return {?}
     */
    getActiveId() {
        return (/** @type {?} */ (this.getSnapshot())).active;
    }
    /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    selectActive(project) {
        return this.selectActiveId().pipe(switchMap(activeId => this.selectEntity(activeId, project)));
    }
    /**
     * Get the active entity.
     * @return {?}
     */
    getActive() {
        /** @type {?} */
        const activeId = this.getActiveId();
        return toBoolean(activeId) ? this.getEntity(activeId) : undefined;
    }
    /**
     * Select the store's entity collection length.
     * @param {?=} predicate
     * @return {?}
     */
    selectCount(predicate) {
        if (isFunction(predicate)) {
            return this.selectAll({
                filterBy: predicate
            }).pipe(map(entities => entities.length));
        }
        return this.select(store => store.ids.length);
    }
    /**
     * Get the store's entity collection length.
     * @param {?=} predicate
     * @return {?}
     */
    getCount(predicate) {
        if (isFunction(predicate)) {
            return this.getAll().filter(predicate).length;
        }
        return this.getSnapshot().ids.length;
    }
    /**
     * @param {?} projectOrId
     * @return {?}
     */
    hasEntity(projectOrId) {
        if (isFunction(projectOrId)) {
            return this.getAll().some(projectOrId);
        }
        return projectOrId in this.store.entities;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return this.getSnapshot().ids.length === 0;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    _byId(id) {
        return this.select(state => this.getEntity(id));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.memoized = null;
    }
}
/**
 * @template E, S
 * @param {?} state
 * @param {?} options
 * @return {?}
 */
function toArray(state, options) {
    /** @type {?} */
    let arr = [];
    const { ids, entities } = state;
    const { filterBy, limitTo, sortBy, sortByOrder } = options;
    for (let i = 0; i < ids.length; i++) {
        /** @type {?} */
        const id = ids[i];
        if (!entityExists(id, entities)) {
            continue;
        }
        if (!filterBy) {
            arr.push(entities[id]);
            continue;
        }
        if (filterBy(entities[id])) {
            arr.push(entities[id]);
        }
    }
    if (sortBy) {
        /** @type {?} */
        let _sortBy = isFunction(sortBy) ? sortBy : compareValues(sortBy, sortByOrder);
        arr = arr.sort((a, b) => _sortBy(a, b, state));
    }
    /** @type {?} */
    const length = Math.min(limitTo || arr.length, arr.length);
    return length === arr.length ? arr : arr.slice(0, length);
}
/**
 * @template E
 * @param {?} ids
 * @param {?} entities
 * @param {?} options
 * @param {?=} get
 * @return {?}
 */
function toMap(ids, entities, options, get = false) {
    /** @type {?} */
    const map$$1 = {};
    const { filterBy, limitTo } = options;
    if (get && !filterBy && !limitTo) {
        return entities;
    }
    /** @type {?} */
    const length = Math.min(limitTo || ids.length, ids.length);
    if (filterBy && isUndefined(limitTo) === false) {
        /** @type {?} */
        let count = 0;
        for (let i = 0, length = ids.length; i < length; i++) {
            if (count === limitTo)
                break;
            /** @type {?} */
            const id = ids[i];
            if (!entityExists(id, entities)) {
                continue;
            }
            if (filterBy(entities[id])) {
                map$$1[id] = entities[id];
                count++;
            }
        }
    }
    else {
        for (let i = 0; i < length; i++) {
            /** @type {?} */
            const id = ids[i];
            if (!entityExists(id, entities)) {
                continue;
            }
            if (!filterBy) {
                map$$1[id] = entities[id];
                continue;
            }
            if (toBoolean(filterBy(entities[id]))) {
                map$$1[id] = entities[id];
            }
        }
    }
    return map$$1;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *  A logical transaction.
 *  Use this transaction to optimize the dispatch of all the stores.
 *  The following code will update the store, BUT  emits only once
 *
 * \@example
 *  applyTransaction(() => {
 *    this.todosStore.add(new Todo(1, title));
 *    this.todosStore.add(new Todo(2, title));
 *  });
 *
 * @template T
 * @param {?} action
 * @param {?=} thisArg
 * @return {?}
 */
function applyTransaction(action, thisArg = undefined) {
    startBatch();
    try {
        return action.apply(thisArg);
    }
    finally {
        endBatch();
    }
}
/**
 *  A logical transaction.
 *  Use this transaction to optimize the dispatch of all the stores.
 *
 *  The following code will update the store, BUT  emits only once.
 *
 * \@example
 * \@transaction
 *  addTodos() {
 *    this.todosStore.add(new Todo(1, title));
 *    this.todosStore.add(new Todo(2, title));
 *  }
 *
 *
 * @return {?}
 */
function transaction() {
    return function (target, propertyKey, descriptor) {
        /** @type {?} */
        const originalMethod = descriptor.value;
        descriptor.value = function (...args) {
            return applyTransaction(() => {
                return originalMethod.apply(this, args);
            }, this);
        };
        return descriptor;
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Adds one or more elements to the end of an array by returning
 * a new array instead of mutating the original one.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = push(originalArray, 'f', 'g');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'f', 'g']
 * @template T
 * @param {?} array
 * @param {...?} elementN
 * @return {?}
 */
function push(array, ...elementN) {
    return [...array, ...elementN];
}
/**
 * Deletes an element from an array by its index in the array.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = remove(originalArray, 2);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'd', 'e']
 * @template T
 * @param {?} array
 * @param {?} index
 * @return {?}
 */
function remove(array, index) {
    return index >= 0 ? [...array.slice(0, index), ...array.slice(index + 1)] : [...array];
}
/**
 * Removes the last element from an array by returning
 * a new array instead of mutating the original one.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = pop(originalArray);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'c', 'd']
 * @template T
 * @param {?} array
 * @return {?}
 */
function pop(array) {
    return array.slice(0, -1);
}
/**
 * Adds one or more elements to the beginning of an array.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = unshift(originalArray, 'f', 'g');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['f', 'g', 'a', 'b', 'c', 'd', 'e']
 * @template T
 * @param {?} array
 * @param {...?} elementN
 * @return {?}
 */
function unshift(array, ...elementN) {
    return [...elementN, ...array];
}
/**
 * Sorts the elements of an array (not in place) and returns a sorted array.
 *
 * \@example
 * const numberArray = [20, 3, 4, 10, -3, 1, 0, 5];
 * const stringArray = ['Blue', 'Humpback', 'Beluga'];
 *
 * const resultArray = sort(numberArray, (a, b) => a - b);
 * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]
 * // -> resultArray [-3, 0, 1, 3, 4, 5, 10, 20]
 *
 * const resultArray = sort(numberArray, (a, b) => b - a);
 * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]
 * // -> resultArray [20, 10, 5, 4, 3, 1, 0, -3]
 *
 * const resultArray = sort(stringArray);
 * // -> stringArray ['Blue', 'Humpback', 'Beluga']
 * // -> resultArray ['Beluga', 'Blue', 'Humpback']
 *
 * const resultArray = sort(stringArray, (a, b) => a.toLowerCase() < b.toLowerCase());
 * // -> stringArray ['Blue', 'Humpback', 'Beluga']
 * // -> resultArray ['Humpback', 'Blue', 'Beluga']
 * @template T
 * @param {?} array
 * @param {?=} compareFunction
 * @return {?}
 */
function sort(array, compareFunction) {
    return [...array].sort(compareFunction);
}
/**
 * Reverses an array (not in place).
 * The first array element becomes the last, and the last array element becomes the first.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = reverse(originalArray);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['e', 'd', 'c', 'b', 'a']
 * @template T
 * @param {?} array
 * @return {?}
 */
function reverse(array) {
    return [...array].reverse();
}
/**
 * Swap items in the array
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = swap(originalArray, 1, 4);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'e', 'c', 'd', 'b']
 * @template T
 * @param {?} array
 * @param {?} firstIndex
 * @param {?} secondIndex
 * @return {?}
 */
function swap(array, firstIndex, secondIndex) {
    /** @type {?} */
    const results = array.slice();
    /** @type {?} */
    const firstItem = array[firstIndex];
    results[firstIndex] = array[secondIndex];
    results[secondIndex] = firstItem;
    return results;
}
/**
 * Update item in the array
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = update(originalArray, 1, 'newItem');
 * // -> resultArray ['a', 'newItem', 'c', 'd', 'b']
 *
 * const originalArray = [{title: 1}, {title: 2}];
 * const resultArray = update(originalArray, originalArray[0], {title: 3});
 * // -> resultArray  [{title: 3}, {title: 2}];
 * @template T
 * @param {?} array
 * @param {?} indexOrItem
 * @param {?} updated
 * @return {?}
 */
function update(array, indexOrItem, updated) {
    return array.map((current, idx) => {
        if (typeof indexOrItem === 'number' && idx === indexOrItem) {
            return updated;
        }
        if (isObject(indexOrItem) && (/** @type {?} */ (indexOrItem)) === current) {
            return Object.assign({}, (/** @type {?} */ (indexOrItem)), (/** @type {?} */ (updated)));
        }
        return current;
    });
}
/**
 * Removes existing elements and/or adds new elements to an array.
 *
 * \@example
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray []
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, 1);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['b', 'c', 'd', 'e']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, 3);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['d', 'e']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, originalArray.length);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray []
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, -3);
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'c', 'd', 'e']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, 0, 'lorem', 'ipsum');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['lorem', 'ipsum', 'a', 'b', 'c', 'd', 'e']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, originalArray.length, 0, 'lorem', 'ipsum');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'lorem', 'ipsum']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, 0, 2, 'lorem', 'ipsum');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['lorem', 'ipsum', 'c', 'd', 'e']
 *
 * const originalArray = ['a', 'b', 'c', 'd', 'e'];
 * const resultArray = splice(originalArray, originalArray.length - 2, 2, 'lorem', 'ipsum');
 * // -> originalArray ['a', 'b', 'c', 'd', 'e']
 * // -> resultArray ['a', 'b', 'c', 'lorem', 'ipsum']
 * @template T
 * @param {?} array
 * @param {?=} start
 * @param {?=} deleteCount
 * @param {...?} elementN
 * @return {?}
 */
function splice(array, start = array.length, deleteCount = array.length - start, ...elementN) {
    return [...array.slice(0, start), ...elementN, ...array.slice(start + (deleteCount < 0 ? 0 : deleteCount))];
}
/**
 * @template T
 * @param {?} arr
 * @param {?} item
 * @return {?}
 */
function toggle(arr, item) {
    return arr.indexOf(item) > -1 ? arr.filter(current => item !== current) : push(arr, item);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @type {?} */
const filterNil = (source) => source.pipe(filter(value => value !== null && typeof value !== 'undefined'));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 * @param {?} func
 * @param {?} action
 * @param {?=} thisArg
 * @return {?}
 */
function applyAction(func, action, thisArg = undefined) {
    __globalState.setCustomAction(action, true);
    return func.apply(thisArg);
}
/**
 * @param {?} action
 * @param {?=} skipTransactionMsg
 * @return {?}
 */
function action(action, skipTransactionMsg = true) {
    return function (target, propertyKey, descriptor) {
        /** @type {?} */
        const originalMethod = descriptor.value;
        descriptor.value = function (...args) {
            __globalState.setCustomAction(action, skipTransactionMsg);
            return originalMethod.apply(this, args);
        };
        return descriptor;
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} object
 * @return {?}
 */
function serialize(object) {
    return JSON.stringify(object, function (key, value) {
        if (typeof value === 'function') {
            return value.toString();
        }
        return value;
    });
}
/**
 * @return {?}
 */
function createWorker() {
    /** @type {?} */
    const blob = new Blob([
        `self.onmessage = function(e) {

      function deserialize(str) {
        return JSON.parse(str || '', function(key, value) {
          if (value &&
            typeof value === "string" &&
            value.substr(0, 8) == "function") {
            var startBody = value.indexOf('{') + 1;
            var endBody = value.lastIndexOf('}');
            var startArgs = value.indexOf('(') + 1;
            var endArgs = value.indexOf(')');
            return new Function(value.substring(startArgs, endArgs), value.substring(startBody, endBody));
          }
          return value;
        });
      }

      var deserialized = deserialize(e.data);
      var mapped = deserialized.data.map(function(d) {
        return deserialized.factory(d);
      });

      self.postMessage(mapped);
    }`
    ], {
        type: 'text/javascript'
    });
    /** @type {?} */
    const url = URL.createObjectURL(blob);
    return new Worker(url);
}
/**
 * \@example
 *   const mockTodos = Array.from({length: 10000}, (_, x) => ({id: x}));
 *
 *   of(mockTodos).pipe(mapInWorker<Todo>(createTodo))
 *   .subscribe(res => console.log(res));
 * @template T
 * @param {?} factoryFn
 * @return {?}
 */
function mapInWorker(factoryFn) {
    return function (source) {
        return new Observable(observer => {
            /** @type {?} */
            const worker = createWorker();
            worker.onmessage = function (e) {
                observer.next(e.data);
                observer.complete();
                worker.terminate();
            };
            worker.onerror = function (err) {
                observer.error(err);
                observer.complete();
                worker.terminate();
            };
            return source.subscribe(value => {
                /** @type {?} */
                const input = {
                    factory: factoryFn,
                    data: value
                };
                /** @type {?} */
                const serialized = serialize(input);
                worker.postMessage(serialized);
            });
        });
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SnapshotManager {
    /**
     * Get a snapshot of the whole state or a specific stores
     * Use it ONLY for things like saving the state in the server
     * @param {?=} stores
     * @return {?}
     */
    getStoresSnapshot(stores = []) {
        /** @type {?} */
        let acc = {};
        /** @type {?} */
        const hasInclude = stores.length > 0;
        /** @type {?} */
        const keys = hasInclude ? stores : Object.keys(__stores__);
        for (let i = 0; i < keys.length; i++) {
            /** @type {?} */
            let storeName = keys[i];
            acc[storeName] = __stores__[storeName]._value();
        }
        return acc;
    }
    /**
     * Set snapshot we get from the server
     * @param {?} stores
     * @return {?}
     */
    setStoresSnapshot(stores) {
        /** @type {?} */
        let normalizedStores = stores;
        if (isString(stores)) {
            normalizedStores = JSON.parse(/** @type {?} */ (normalizedStores));
        }
        for (let i = 0, keys = Object.keys(normalizedStores); i < keys.length; i++) {
            /** @type {?} */
            const storeName = keys[i];
            if (__stores__[storeName]) {
                __stores__[storeName].setState(() => normalizedStores[storeName]);
            }
        }
    }
}
/** @type {?} */
const snapshotManager = new SnapshotManager();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 * @template E, S
 */
class AkitaPlugin {
    /**
     * @param {?} query
     */
    constructor(query) {
        this.query = query;
    }
    /**
     * This method is responsible for getting access to the query.
     * @return {?}
     */
    getQuery() {
        return this.query;
    }
    /**
     * This method is responsible for getting access to the store.
     * @return {?}
     */
    getStore() {
        return this.getQuery().__store__;
    }
    /**
     * This method is responsible tells whether the plugin is entityBased or not.
     * @param {?} entityId
     * @return {?}
     */
    isEntityBased(entityId) {
        return toBoolean(entityId);
    }
    /**
     * This method is responsible for selecting the source; it can be the whole store or one entity.
     * @param {?} entityId
     * @return {?}
     */
    selectSource(entityId) {
        if (this.isEntityBased(entityId)) {
            return (/** @type {?} */ (this.getQuery())).selectEntity(entityId).pipe(filterNil);
        }
        return (/** @type {?} */ (this.getQuery())).select(state => state);
    }
    /**
     * @param {?} entityId
     * @return {?}
     */
    getSource(entityId) {
        if (this.isEntityBased(entityId)) {
            return (/** @type {?} */ (this.getQuery())).getEntity(entityId);
        }
        return this.getQuery().getSnapshot();
    }
    /**
     * This method is responsible for updating the store or one entity; it can be the whole store or one entity.
     * @param {?} newState
     * @param {?=} entityId
     * @return {?}
     */
    updateStore(newState, entityId) {
        if (this.isEntityBased(entityId)) {
            this.getStore().update(entityId, newState);
        }
        else {
            this.getStore().setState((state) => (Object.assign({}, state, newState)));
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @type {?} */
const paginatorDefaults = {
    pagesControls: false,
    range: false,
    startWith: 1,
    cacheTimeout: undefined
};
/**
 * @template E
 */
class PaginatorPlugin extends AkitaPlugin {
    /**
     * @param {?} query
     * @param {?=} config
     */
    constructor(query, config = {}) {
        super(query);
        this.query = query;
        this.config = config;
        /**
         * Save current filters, sorting, etc. in cache
         */
        this.metadata = new Map();
        this.pages = new Map();
        this.pagination = {
            currentPage: 1,
            perPage: 0,
            total: 0,
            lastPage: 0,
            data: []
        };
        /**
         * When the user navigates to a different page and return
         * we don't want to call `clearCache` on first time.
         */
        this.initial = false;
        /**
         * Proxy to the query loading
         */
        this.isLoading$ = this.query.selectLoading().pipe(delay(0));
        this.config = Object.assign(paginatorDefaults, config);
        const { startWith, cacheTimeout } = this.config;
        this.page = new BehaviorSubject(startWith);
        if (isObservable(cacheTimeout)) {
            this.clearCacheSubscription = cacheTimeout.subscribe(_ => this.clearCache());
        }
    }
    /**
     * Listen to page changes
     * @return {?}
     */
    get pageChanges() {
        return this.page.asObservable();
    }
    /**
     * Get the current page number
     * @return {?}
     */
    get currentPage() {
        return this.pagination.currentPage;
    }
    /**
     * Check if current page is the first one
     * @return {?}
     */
    get isFirst() {
        return this.currentPage === 1;
    }
    /**
     * Check if current page is the last one
     * @return {?}
     */
    get isLast() {
        return this.currentPage === this.pagination.lastPage;
    }
    /**
     * Whether to generate an array of pages for *ngFor
     * [1, 2, 3, 4]
     * @return {?}
     */
    withControls() {
        this.config.pagesControls = true;
        return this;
    }
    /**
     * Whether to generate the `from` and `to` keys
     * [1, 2, 3, 4]
     * @return {?}
     */
    withRange() {
        this.config.range = true;
        return this;
    }
    /**
     * Set the loading state
     * @param {?=} value
     * @return {?}
     */
    setLoading(value = true) {
        this.getStore().setLoading(value);
    }
    /**
     * Update the pagination object and add the page
     * @param {?} response
     * @return {?}
     */
    update(response) {
        this.pagination = response;
        this.addPage(response.data);
    }
    /**
     *
     * Set the ids and add the page to store
     * @param {?} data
     * @return {?}
     */
    addPage(data) {
        this.pages.set(this.currentPage, { ids: data.map(entity => entity[this.getStore().idKey]) });
        this.getStore().add(data);
    }
    /**
     * Clear the cache.
     * @return {?}
     */
    clearCache() {
        if (!this.initial) {
            applyAction(() => {
                this.getStore().remove();
            }, { type: '@Pagination - Clear Cache' });
            this.pages = new Map();
        }
        this.initial = false;
    }
    /**
     * @param {?} page
     * @return {?}
     */
    clearPage(page) {
        this.pages.delete(page);
    }
    /**
     * Clear the cache timeout and optionally the pages
     * @param {?=} __0
     * @return {?}
     */
    destroy({ clearCache, currentPage } = {}) {
        if (this.clearCacheSubscription) {
            this.clearCacheSubscription.unsubscribe();
        }
        if (clearCache) {
            this.clearCache();
        }
        if (!isUndefined(currentPage)) {
            this.setPage(currentPage);
        }
        this.initial = true;
    }
    /**
     * Whether the provided page is active
     * @param {?} page
     * @return {?}
     */
    isPageActive(page) {
        return this.currentPage === page;
    }
    /**
     * Set the current page
     * @param {?} page
     * @return {?}
     */
    setPage(page) {
        if (page !== this.currentPage || !this.hasPage(page)) {
            this.page.next((this.pagination.currentPage = page));
        }
    }
    /**
     * Increment current page
     * @return {?}
     */
    nextPage() {
        if (this.currentPage !== this.pagination.lastPage) {
            this.setPage(this.pagination.currentPage + 1);
        }
    }
    /**
     * Decrement current page
     * @return {?}
     */
    prevPage() {
        if (this.pagination.currentPage > 1) {
            this.setPage(this.pagination.currentPage - 1);
        }
    }
    /**
     * Set current page to last
     * @return {?}
     */
    setLastPage() {
        this.setPage(this.pagination.lastPage);
    }
    /**
     * Set current page to first
     * @return {?}
     */
    setFirstPage() {
        this.setPage(1);
    }
    /**
     * Check if page exists in cache
     * @param {?} page
     * @return {?}
     */
    hasPage(page) {
        return this.pages.has(page);
    }
    /**
     * Get the current page if it's in cache, otherwise invoke the request
     * @param {?} req
     * @return {?}
     */
    getPage(req) {
        /** @type {?} */
        const page = this.pagination.currentPage;
        if (this.hasPage(page)) {
            return this.selectPage(page);
        }
        else {
            this.setLoading(true);
            return from(req()).pipe(switchMap((config) => {
                applyTransaction(() => {
                    this.setLoading(false);
                    this.update(config);
                });
                return this.selectPage(page);
            }));
        }
    }
    /**
     * @return {?}
     */
    getQuery() {
        return this.query;
    }
    /**
     * @return {?}
     */
    getFrom() {
        if (this.isFirst) {
            return 1;
        }
        return (this.currentPage - 1) * this.pagination.perPage + 1;
    }
    /**
     * @return {?}
     */
    getTo() {
        return this.currentPage * this.pagination.perPage;
    }
    /**
     * Select the page
     * @param {?} page
     * @return {?}
     */
    selectPage(page) {
        return this.query.selectAll({ asObject: true }).pipe(take(1), map(entities => {
            /** @type {?} */
            let response = Object.assign({}, this.pagination, { data: this.pages.get(page).ids.map(id => entities[id]) });
            const { range, pagesControls } = this.config;
            if (!this.pagination.total) {
                response.total = response.perPage * response.lastPage;
                this.pagination.total = response.total;
            }
            if (range) {
                response.from = this.getFrom();
                response.to = this.getTo();
            }
            if (pagesControls) {
                response.pageControls = generatePages(this.pagination.total, this.pagination.perPage);
            }
            return response;
        }));
    }
}
__decorate([
    action({ type: '@Pagination - New Page' }, true),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], PaginatorPlugin.prototype, "update", null);
/**
 * Generate an array so we can ngFor them to navigate between pages
 * @param {?} total
 * @param {?} perPage
 * @return {?}
 */
function generatePages(total, perPage) {
    /** @type {?} */
    const len = Math.ceil(total / perPage);
    /** @type {?} */
    let arr = [];
    for (let i = 0; i < len; i++) {
        arr.push(i + 1);
    }
    return arr;
}
/** *
 * backward compatibility
  @type {?} */
const Paginator = PaginatorPlugin;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class PersistNgFormPlugin extends AkitaPlugin {
    /**
     * @param {?} query
     * @param {?} factoryFnOrPath
     * @param {?=} params
     */
    constructor(query, factoryFnOrPath, params = {}) {
        super(query);
        this.query = query;
        this.factoryFnOrPath = factoryFnOrPath;
        this.params = params;
        this.params = Object.assign({ debounceTime: 300, formKey: 'akitaForm', emitEvent: false }, params);
        this.isKeyBased = isString(factoryFnOrPath);
    }
    /**
     * @param {?} form
     * @return {?}
     */
    setForm(form) {
        this.form = form;
        this.activate();
        return this;
    }
    /**
     * @param {?=} initialState
     * @return {?}
     */
    reset(initialState) {
        /** @type {?} */
        let value;
        if (initialState) {
            value = initialState;
        }
        else {
            value = this.isKeyBased ? this.initialValue : (/** @type {?} */ (this)).factoryFnOrPath();
        }
        this.form.patchValue(value);
        /** @type {?} */
        const storeValue = this.isKeyBased ? setValue(this.getStore()._value(), `${this.getStore().storeName}.${this.factoryFnOrPath}`, value) : { [this.params.formKey]: value };
        this.updateStore(storeValue);
    }
    /**
     * @return {?}
     */
    activate() {
        /** @type {?} */
        let path;
        if (this.isKeyBased) {
            path = `${this.getStore().storeName}.${this.factoryFnOrPath}`;
            this.initialValue = getValue(this.getStore()._value(), path);
            this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });
        }
        else {
            if (!(/** @type {?} */ (this.getQuery().getSnapshot()))[this.params.formKey]) {
                __globalState.setAction({ type: '@PersistNgFormPlugin activate' });
                this.updateStore({ [this.params.formKey]: (/** @type {?} */ (this)).factoryFnOrPath() });
            }
            this.query.selectOnce(state => (/** @type {?} */ (state))[this.params.formKey]).subscribe(formValue => this.form.patchValue(formValue));
        }
        this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe(value => {
            __globalState.setAction({ type: '@PersistForm - Update' });
            /** @type {?} */
            let newState;
            if (this.isKeyBased) {
                newState = state => setValue(state, path, value);
            }
            else {
                newState = () => ({ [this.params.formKey]: value });
            }
            this.updateStore(newState(this.getStore()._value()));
        });
    }
    /**
     * @return {?}
     */
    destroy() {
        this.formChanges && this.formChanges.unsubscribe();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @type {?} */
const notBs = typeof localStorage === 'undefined';
/**
 * @param {?=} params
 * @return {?}
 */
function persistState(params) {
    if (notBs)
        return;
    /** @type {?} */
    const defaults = {
        key: 'AkitaStores',
        storage: localStorage,
        deserialize: JSON.parse,
        serialize: JSON.stringify,
        include: [],
        exclude: []
    };
    const { storage, deserialize, serialize, include, exclude, key } = Object.assign({}, defaults, params);
    /** @type {?} */
    const hasInclude = include.length > 0;
    /** @type {?} */
    const hasExclude = exclude.length > 0;
    if (hasInclude && hasExclude) {
        throw new AkitaError("You can't use both include and exclude");
    }
    /** @type {?} */
    const storageState = deserialize(storage.getItem(key) || '{}');
    /** @type {?} */
    let stores = {};
    /** @type {?} */
    let acc = {};
    /**
     * @return {?}
     */
    function save() {
        storage.setItem(key, serialize(Object.assign({}, storageState, acc)));
    }
    /**
     * @param {?} storeName
     * @param {?} path
     * @return {?}
     */
    function subscribe(storeName, path) {
        stores[storeName] = __stores__[storeName]
            ._select(state => getValue(state, path))
            .pipe(skip(1))
            .subscribe(data => {
            acc[storeName] = data;
            save();
        });
    }
    /**
     * @param {?} storeName
     * @param {?} store
     * @param {?} path
     * @return {?}
     */
    function setInitial(storeName, store, path) {
        if (storageState[storeName]) {
            __globalState.setAction({ type: '@PersistState' });
            store.setState(state => {
                return setValue(state, path, storageState[storeName]);
            });
            if (store.setDirty) {
                store.setDirty();
            }
        }
    }
    /** @type {?} */
    const subscription = rootDispatcher.subscribe(action => {
        if (action.type === 0 /* NEW_STORE */) {
            /** @type {?} */
            let currentStoreName = action.payload["store"].storeName;
            if (hasExclude && exclude.indexOf(currentStoreName) > -1 === true) {
                return;
            }
            if (hasInclude) {
                /** @type {?} */
                const path = include.find(name => name.indexOf(currentStoreName) > -1);
                if (!path) {
                    return;
                }
                else {
                    currentStoreName = path.split('.')[0];
                    setInitial(currentStoreName, action.payload["store"], path);
                    subscribe(currentStoreName, path);
                }
            }
            else {
                setInitial(currentStoreName, action.payload["store"], currentStoreName);
                subscribe(currentStoreName, currentStoreName);
            }
        }
    });
    return {
        /**
         * @return {?}
         */
        destroy() {
            subscription.unsubscribe();
            for (let i = 0, keys = Object.keys(stores); i < keys.length; i++) {
                /** @type {?} */
                const storeName = keys[i];
                stores[storeName].unsubscribe();
            }
            stores = {};
        },
        /**
         * @return {?}
         */
        clear() {
            storage.clear();
        },
        /**
         * @param {?} storeName
         * @return {?}
         */
        clearStore(storeName) {
            /** @type {?} */
            const storageState = deserialize(storage.getItem(key) || '{}');
            if (storageState[storeName]) {
                delete storageState[storeName];
                storage.setItem(key, serialize(storageState));
            }
        }
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?=} ngZoneOrOptions
 * @param {?=} options
 * @return {?}
 */
function akitaDevtools(ngZoneOrOptions, options = {}) {
    if (!(/** @type {?} */ (window)).__REDUX_DEVTOOLS_EXTENSION__) {
        return;
    }
    /** @type {?} */
    const isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];
    if (!isAngular) {
        ngZoneOrOptions = ngZoneOrOptions || {};
        (/** @type {?} */ (ngZoneOrOptions)).run = cb => cb();
        options = /** @type {?} */ (ngZoneOrOptions);
    }
    /** @type {?} */
    const defaultOptions = { name: 'Akita' };
    /** @type {?} */
    const merged = Object.assign({}, defaultOptions, options);
    /** @type {?} */
    const devTools = (/** @type {?} */ (window)).__REDUX_DEVTOOLS_EXTENSION__.connect(merged);
    /** @type {?} */
    let appState = {};
    rootDispatcher.subscribe(action => {
        if (action.type === 1 /* NEW_STATE */) {
            if (__globalState.skipAction) {
                __globalState.setSkipAction(false);
                return;
            }
            appState = Object.assign({}, appState, { [action.payload["name"]]: __stores__[action.payload["name"]]._value() });
            const { type, entityId } = __globalState.currentAction;
            /** @type {?} */
            const storeName = capitalize(action.payload["name"]);
            /** @type {?} */
            let msg = isDefined(entityId) ? `[${storeName}] - ${type} (ids: ${entityId})` : `[${storeName}] - ${type}`;
            if (options.logTrace) {
                console.group(msg);
                console.trace();
                console.groupEnd();
            }
            devTools.send({ type: msg, transaction: __globalState.currentT.map(t => t.type) }, appState);
        }
    });
    devTools.subscribe(message => {
        if (message.type === 'ACTION') {
            const [storeName] = message.payload.split('.');
            if (__stores__[storeName]) {
                (/** @type {?} */ (ngZoneOrOptions)).run(() => {
                    /** @type {?} */
                    const funcCall = message.payload.replace(storeName, `this['${storeName}']`);
                    try {
                        new Function(`${funcCall}`).call(__stores__);
                    }
                    catch (e) {
                        console.warn('Unknown Method ☹️');
                    }
                });
            }
        }
        if (message.type === 'DISPATCH') {
            /** @type {?} */
            const payloadType = message.payload.type;
            if (payloadType === 'COMMIT') {
                devTools.init(appState);
                return;
            }
            if (message.state) {
                /** @type {?} */
                const rootState = JSON.parse(message.state);
                for (let i = 0, keys = Object.keys(rootState); i < keys.length; i++) {
                    /** @type {?} */
                    const storeName = keys[i];
                    if (__stores__[storeName]) {
                        (/** @type {?} */ (ngZoneOrOptions)).run(() => {
                            __stores__[storeName].setState(() => rootState[storeName], false);
                        });
                    }
                }
            }
        }
    });
}
/**
 * @param {?} string
 * @return {?}
 */
function capitalize(string) {
    return string && string.charAt(0).toUpperCase() + string.slice(1);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const ɵ0 = plugin => plugin.destroy();
/** @type {?} */
const defaultActions = { beforeRemove: ɵ0 };
/**
 * @abstract
 * @template E, P
 */
class EntityCollectionPlugin {
    /**
     * @param {?} query
     * @param {?} entityIds
     */
    constructor(query, entityIds) {
        this.query = query;
        this.entityIds = entityIds;
        this.entities = new Map();
    }
    /**
     * Get the entity plugin instance.
     * @param {?} id
     * @return {?}
     */
    getEntity(id) {
        return this.entities.get(id);
    }
    /**
     * Whether the entity plugin exist.
     * @param {?} id
     * @return {?}
     */
    hasEntity(id) {
        return this.entities.has(id);
    }
    /**
     * Remove the entity plugin instance.
     * @param {?} id
     * @return {?}
     */
    removeEntity(id) {
        return this.entities.delete(id);
    }
    /**
     * Set the entity plugin instance.
     * @param {?} id
     * @param {?} plugin
     * @return {?}
     */
    createEntity(id, plugin) {
        return this.entities.set(id, plugin);
    }
    /**
     * If the user passes `entityIds` we take them; otherwise, we take all.
     * @return {?}
     */
    getIds() {
        return isUndefined(this.entityIds) ? this.query.getSnapshot().ids : coerceArray(this.entityIds);
    }
    /**
     * When you call one of the plugin methods, you can pass id/ids or undefined which means all.
     * @param {?=} ids
     * @return {?}
     */
    resolvedIds(ids) {
        return isUndefined(ids) ? this.getIds() : coerceArray(ids);
    }
    /**
     * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.
     *
     * For example in your plugin you may do the following:
     *
     * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));
     * @param {?} ids
     * @param {?=} actions
     * @return {?}
     */
    rebase(ids, actions = defaultActions) {
        /**
             *
             * If the user passes `entityIds` & we have new ids check if we need to add/remove instances.
             *
             * This phase will be called only upon update.
             */
        if (toBoolean(ids)) {
            /**
                   * Which means all
                   */
            if (isUndefined(this.entityIds)) {
                for (let i = 0, len = ids.length; i < len; i++) {
                    /** @type {?} */
                    const entityId = ids[i];
                    if (this.hasEntity(entityId) === false) {
                        isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);
                        /** @type {?} */
                        const plugin = this.instantiatePlugin(entityId);
                        this.entities.set(entityId, plugin);
                        isFunction(actions.afterAdd) && actions.afterAdd(plugin);
                    }
                }
                this.entities.forEach((plugin, entityId) => {
                    if (ids.indexOf(entityId) === -1) {
                        isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);
                        this.removeEntity(entityId);
                    }
                });
            }
            else {
                /** *
                 * Which means the user passes specific ids
                  @type {?} */
                const _ids = coerceArray(this.entityIds);
                for (let i = 0, len = _ids.length; i < len; i++) {
                    /** @type {?} */
                    const entityId = _ids[i];
                    /** The Entity in current ids and doesn't exist, add it. */
                    if (ids.indexOf(entityId) > -1 && this.hasEntity(entityId) === false) {
                        isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);
                        /** @type {?} */
                        const plugin = this.instantiatePlugin(entityId);
                        this.entities.set(entityId, plugin);
                        isFunction(actions.afterAdd) && actions.afterAdd(plugin);
                    }
                    else {
                        this.entities.forEach((plugin, entityId) => {
                            /** The Entity not in current ids and exists, remove it. */
                            if (ids.indexOf(entityId) === -1 && this.hasEntity(entityId) === true) {
                                isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);
                                this.removeEntity(entityId);
                            }
                        });
                    }
                }
            }
        }
        else {
            /**
                   * Otherwise, start with the provided ids or all.
                   */
            this.getIds().forEach(id => {
                if (!this.hasEntity(id))
                    this.createEntity(id, this.instantiatePlugin(id));
            });
        }
    }
    /**
     * Listen for add/remove entities.
     * @return {?}
     */
    selectIds() {
        return this.query.select(state => state.ids);
    }
    /**
     * Base method for activation, you can override it if you need to.
     * @param {?=} ids
     * @return {?}
     */
    activate(ids) {
        this.rebase(ids);
    }
    /**
     * Loop over each id and invoke the plugin method.
     * @param {?} ids
     * @param {?} cb
     * @return {?}
     */
    forEachId(ids, cb) {
        /** @type {?} */
        const _ids = this.resolvedIds(ids);
        for (let i = 0, len = _ids.length; i < len; i++) {
            /** @type {?} */
            const id = _ids[i];
            if (this.hasEntity(id)) {
                cb(this.getEntity(id));
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template E, S
 */
class StateHistoryPlugin extends AkitaPlugin {
    /**
     * @param {?} query
     * @param {?=} params
     * @param {?=} _entityId
     */
    constructor(query, params = {}, _entityId) {
        super(query);
        this.query = query;
        this.params = params;
        this._entityId = _entityId;
        /**
         * Allow skipping an update from outside
         */
        this.skip = false;
        this.history = {
            past: [],
            present: null,
            future: []
        };
        /**
         * Skip the update when redo/undo
         */
        this.skipUpdate = false;
        params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;
        this.activate();
    }
    /**
     * @return {?}
     */
    get hasPast() {
        return this.history.past.length > 0;
    }
    /**
     * @return {?}
     */
    get hasFuture() {
        return this.history.future.length > 0;
    }
    /**
     * @return {?}
     */
    activate() {
        this.history.present = this.getSource(this._entityId);
        this.subscription = this.selectSource(this._entityId)
            .pipe(pairwise())
            .subscribe(([past, present]) => {
            if (this.skip) {
                this.skip = false;
                return;
            }
            if (!this.skipUpdate) {
                if (this.history.past.length === this.params.maxAge) {
                    this.history.past = this.history.past.slice(1);
                }
                this.history.past = [...this.history.past, past];
                this.history.present = present;
            }
        });
    }
    /**
     * @return {?}
     */
    undo() {
        if (this.history.past.length > 0) {
            const { past, present, future } = this.history;
            /** @type {?} */
            const previous = past[past.length - 1];
            /** @type {?} */
            const newPast = past.slice(0, past.length - 1);
            this.history.past = newPast;
            this.history.present = previous;
            this.history.future = [present, ...this.history.future];
            this.update();
        }
    }
    /**
     * @return {?}
     */
    redo() {
        if (this.history.future.length > 0) {
            const { past, present, future } = this.history;
            /** @type {?} */
            const next = this.history.future[0];
            /** @type {?} */
            const newFuture = this.history.future.slice(1);
            this.history.past = [...past, present];
            this.history.present = next;
            this.history.future = newFuture;
            this.update('Redo');
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    jumpToPast(index) {
        if (index < 0 || index >= this.history.past.length)
            return;
        const { past, future } = this.history;
        /** *
         *
         * const past = [1, 2, 3, 4, 5];
         *
         * newPast = past.slice(0, 2) = [1, 2];
         * present = past[index] = 3;
         * [...past.slice(2 + 1), ...future] = [4, 5];
         *
          @type {?} */
        const newPast = past.slice(0, index);
        /** @type {?} */
        const newFuture = [...past.slice(index + 1), ...future];
        /** @type {?} */
        const newPresent = past[index];
        this.history.past = newPast;
        this.history.present = newPresent;
        this.history.future = newFuture;
        this.update();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    jumpToFuture(index) {
        if (index < 0 || index >= this.history.future.length)
            return;
        const { past, future } = this.history;
        /** @type {?} */
        const newPast = [...past, ...future.slice(0, index)];
        /** @type {?} */
        const newPresent = future[index];
        /** @type {?} */
        const newFuture = future.slice(index + 1);
        this.history.past = newPast;
        this.history.present = newPresent;
        this.history.future = newFuture;
        this.update('Redo');
    }
    /**
     * @return {?}
     */
    clear() {
        this.history = {
            past: [],
            present: null,
            future: []
        };
    }
    /**
     * @param {?=} clearHistory
     * @return {?}
     */
    destroy(clearHistory = false) {
        if (clearHistory) {
            this.clear();
        }
        this.subscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    ignoreNext() {
        this.skip = true;
    }
    /**
     * @param {?=} action
     * @return {?}
     */
    update(action = 'Undo') {
        this.skipUpdate = true;
        __globalState.setCustomAction({ type: `@StateHistory - ${action}` });
        this.updateStore(this.history.present, this._entityId);
        this.skipUpdate = false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
// unsupported: template constraints.
/**
 * @template E, P
 */
class EntityStateHistoryPlugin extends EntityCollectionPlugin {
    /**
     * @param {?} query
     * @param {?=} params
     */
    constructor(query, params = {}) {
        super(query, params.entityIds);
        this.query = query;
        this.params = params;
        params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;
        this.activate();
        this.selectIds()
            .pipe(skip(1))
            .subscribe(ids => this.activate(ids));
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    redo(ids) {
        this.forEachId(ids, e => e.redo());
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    undo(ids) {
        this.forEachId(ids, e => e.undo());
    }
    /**
     * @param {?} id
     * @return {?}
     */
    hasPast(id) {
        if (this.hasEntity(id)) {
            return this.getEntity(id).hasPast;
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    hasFuture(id) {
        if (this.hasEntity(id)) {
            return this.getEntity(id).hasFuture;
        }
    }
    /**
     * @param {?} ids
     * @param {?} index
     * @return {?}
     */
    jumpToFuture(ids, index) {
        this.forEachId(ids, e => e.jumpToFuture(index));
    }
    /**
     * @param {?} ids
     * @param {?} index
     * @return {?}
     */
    jumpToPast(ids, index) {
        this.forEachId(ids, e => e.jumpToPast(index));
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    clear(ids) {
        this.forEachId(ids, e => e.clear());
    }
    /**
     * @param {?=} ids
     * @param {?=} clearHistory
     * @return {?}
     */
    destroy(ids, clearHistory = false) {
        this.forEachId(ids, e => e.destroy(clearHistory));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    instantiatePlugin(id) {
        return /** @type {?} */ (new StateHistoryPlugin(this.query, this.params, id));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @type {?} */
const dirtyCheckDefaultParams = {
    comparator: (head, current) => JSON.stringify(head) !== JSON.stringify(current)
};
/**
 * @template Entity, StoreState
 */
class DirtyCheckPlugin extends AkitaPlugin {
    /**
     * @param {?} query
     * @param {?=} params
     * @param {?=} _entityId
     */
    constructor(query, params, _entityId) {
        super(query);
        this.query = query;
        this.params = params;
        this._entityId = _entityId;
        this.dirty = new BehaviorSubject(false);
        this.active = false;
        this.isDirty$ = this.dirty.asObservable().pipe(distinctUntilChanged());
        this.params = Object.assign({}, dirtyCheckDefaultParams, params);
        if (this.params.watchProperty) {
            /** @type {?} */
            let watchProp = this.params.watchProperty;
            watchProp = coerceArray(watchProp);
            if (watchProp.includes('entities') && !watchProp.includes('ids') && query instanceof QueryEntity) {
                watchProp.push('ids');
            }
            this.params.watchProperty = watchProp;
        }
    }
    /**
     * @return {?}
     */
    getHead() {
        return this.head;
    }
    /**
     * @return {?}
     */
    activate() {
        this.head = this._getHead();
        /** *
         * if we are tracking specific properties select only the relevant ones
          @type {?} */
        const source = this.params.watchProperty
            ? (/** @type {?} */ (this.params.watchProperty)).map(prop => this.query.select(state => state[prop]).pipe(map(val => ({ val, __akitaKey: prop }))))
            : [this.selectSource(this._entityId)];
        this.subscription = merge(...source)
            .pipe(skip(1))
            .subscribe((currentState) => {
            if (isUndefined(this.head))
                return;
            /** *
             * __akitaKey is used to determine if we are tracking a specific property or a store change
              @type {?} */
            const head = currentState.__akitaKey ? this.head[/** @type {?} */ (currentState.__akitaKey)] : this.head;
            /** @type {?} */
            const compareTo = currentState.__akitaKey ? currentState.val : currentState;
            /** @type {?} */
            const isChange = this.params.comparator(head, compareTo);
            this.updateDirtiness(isChange);
        });
    }
    /**
     * @param {?=} params
     * @return {?}
     */
    reset(params = {}) {
        /** @type {?} */
        let currentValue = this.head;
        if (isFunction(params.updateFn)) {
            if (this.isEntityBased(this._entityId)) {
                currentValue = params.updateFn(this.head, (/** @type {?} */ (this.getQuery())).getEntity(this._entityId));
            }
            else {
                currentValue = params.updateFn(this.head, (/** @type {?} */ (this.getQuery())).getSnapshot());
            }
        }
        /** *
         * If we are watching specific props compare them, if not compare the entire store
          @type {?} */
        const update = this.params.watchProperty ? this.compareProp(currentValue) : this._getHead() !== currentValue;
        if (update) {
            __globalState.setCustomAction({ type: `@DirtyCheck - Revert` });
            this.updateStore(currentValue, this._entityId);
        }
    }
    /**
     * @return {?}
     */
    setHead() {
        if (!this.active) {
            this.activate();
            this.active = true;
        }
        else {
            this.head = this._getHead();
        }
        this.updateDirtiness(false);
        return this;
    }
    /**
     * @return {?}
     */
    isDirty() {
        return toBoolean(this.dirty.value);
    }
    /**
     * @return {?}
     */
    hasHead() {
        return toBoolean(this.getHead());
    }
    /**
     * @return {?}
     */
    destroy() {
        this.head = null;
        this.subscription && this.subscription.unsubscribe();
    }
    /**
     * @param {?} isDirty
     * @return {?}
     */
    updateDirtiness(isDirty) {
        this.dirty.next(isDirty);
    }
    /**
     * @return {?}
     */
    _getHead() {
        /** @type {?} */
        let head = /** @type {?} */ (this.getSource(this._entityId));
        if (this.params.watchProperty) {
            head = (/** @type {?} */ (this.params.watchProperty)).reduce((_head, prop) => {
                _head[prop] = (/** @type {?} */ (head))[prop];
                return _head;
            }, /** @type {?} */ ({}));
        }
        return head;
    }
    /**
     * @param {?} currentState
     * @return {?}
     */
    compareProp(currentState) {
        /** @type {?} */
        const propKeys = Object.keys(currentState);
        /** @type {?} */
        const head = this._getHead();
        return propKeys.some(propKey => currentState[propKey] !== head[propKey]);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
// unsupported: template constraints.
/**
 * @template E, P
 */
class EntityDirtyCheckPlugin extends EntityCollectionPlugin {
    /**
     * @param {?} query
     * @param {?=} params
     */
    constructor(query, params = {}) {
        super(query, params.entityIds);
        this.query = query;
        this.params = params;
        this.isSomeDirty$ = this.query.select(state => state.entities)
            .pipe(map((entities) => this.checkSomeDirty(entities)));
        this.params = Object.assign({}, dirtyCheckDefaultParams, params);
        this.activate();
        this.selectIds().pipe(skip(1)).subscribe(ids => {
            this.rebase(ids, { afterAdd: plugin => plugin.setHead() });
        });
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    setHead(ids) {
        this.forEachId(ids, e => e.setHead());
        return this;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    hasHead(id) {
        if (this.entities.has(id)) {
            /** @type {?} */
            const entity = this.getEntity(id);
            return entity.hasHead();
        }
        return false;
    }
    /**
     * @param {?=} ids
     * @param {?=} params
     * @return {?}
     */
    reset(ids, params = {}) {
        this.forEachId(ids, e => e.reset(params));
    }
    /**
     * @param {?} id
     * @param {?=} asObservable
     * @return {?}
     */
    isDirty(id, asObservable = true) {
        if (this.entities.has(id)) {
            /** @type {?} */
            const entity = this.getEntity(id);
            return asObservable ? entity.isDirty$ : entity.isDirty();
        }
        return false;
    }
    /**
     * @return {?}
     */
    isSomeDirty() {
        /** @type {?} */
        const entities = this.query.getAll({ asObject: true });
        return this.checkSomeDirty(entities);
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    destroy(ids) {
        this.forEachId(ids, e => e.destroy());
    }
    /**
     * @param {?} id
     * @return {?}
     */
    instantiatePlugin(id) {
        return /** @type {?} */ (new DirtyCheckPlugin(this.query, this.params, id));
    }
    /**
     * @param {?} entities
     * @return {?}
     */
    checkSomeDirty(entities) {
        /** @type {?} */
        const entitiesIds = this.resolvedIds();
        for (const id of entitiesIds) {
            /** @type {?} */
            const dirty = this.params.comparator((/** @type {?} */ (this.getEntity(id))).getHead(), entities[id]);
            if (dirty) {
                return true;
            }
        }
        return false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * \@example
 *
 * this.peopleStore.update(id, person => ({
 *   guests: increment(person.guests)
 * }));
 * @param {?} value
 * @param {?=} params
 * @return {?}
 */
function increment(value, params = { maxValue: undefined }) {
    if (isNumber(value) === false)
        return;
    if (params.maxValue && value === params.maxValue)
        return value;
    return value + 1;
}
/**
 * \@example
 *
 * this.peopleStore.update(id, person => ({
 *   guests: decrement(person.guests)
 * }));
 * @param {?} value
 * @param {?=} params
 * @return {?}
 */
function decrement(value, params = { allowNegative: false }) {
    if (isNumber(value) === false)
        return;
    if (params.allowNegative === false && value === 0) {
        return value;
    }
    return value - 1;
}
/**
 * Generate random guid
 * @return {?}
 */
function guid() {
    return 'xxxxxx4xyx'.replace(/[xy]/g, c => {
        /** @type {?} */
        const r = (Math.random() * 16) | 0;
        /** @type {?} */
        const v = c == 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { __globalState, EntityStore, getInitialEntitiesState, getInitialActiveState, QueryEntity, Query, enableAkitaProdMode, isDev, __stores__, rootDispatcher, Store, applyTransaction, transaction, push, remove, pop, unshift, sort, reverse, swap, update, splice, toggle, filterNil, coerceArray, isObject, isPlainObject, isFunction, toBoolean, isUndefined, entityExists, noop, isObservable, isString, isNumber, isDefined, resetActive, isActiveState, setValue, getValue, applyAction, action, mapInWorker, memoizeOne, SnapshotManager, snapshotManager, StoreConfig, configKey, QueryConfig, queryConfigKey, compareValues, Order, AkitaPlugin, PaginatorPlugin, Paginator, PersistNgFormPlugin, persistState, akitaDevtools, EntityCollectionPlugin, StateHistoryPlugin, EntityStateHistoryPlugin, dirtyCheckDefaultParams, DirtyCheckPlugin, EntityDirtyCheckPlugin, increment, decrement, guid, AkitaGlobals as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,