{"version":3,"file":"datorama-akita.js.map","sources":["ng://@datorama/akita/src/internal/utils.ts","ng://@datorama/akita/src/internal/error.ts","ng://@datorama/akita/src/internal/crud.ts","ng://@datorama/akita/src/internal/global-state.ts","ng://@datorama/akita/src/internal/transaction.internal.ts","ng://@datorama/akita/src/internal/deep-freeze.ts","ng://@datorama/akita/src/api/store-config.ts","ng://@datorama/akita/src/api/store.ts","ng://@datorama/akita/src/api/entity-store.ts","ng://@datorama/akita/src/internal/sort.ts","ng://@datorama/akita/src/api/memoize.ts","ng://@datorama/akita/src/api/query-config.ts","ng://@datorama/akita/src/api/query.ts","ng://@datorama/akita/src/api/query-entity.ts","ng://@datorama/akita/src/api/transaction.ts","ng://@datorama/akita/src/api/arrays.ts","ng://@datorama/akita/src/api/operators.ts","ng://@datorama/akita/src/internal/action.ts","ng://@datorama/akita/src/api/worker.ts","ng://@datorama/akita/src/api/snapshot-manager.ts","ng://@datorama/akita/src/plugins/plugin.ts","ng://@datorama/akita/src/plugins/paginator/paginator-plugin.ts","ng://@datorama/akita/src/plugins/persist-form/persist-ng-form-plugin.ts","ng://@datorama/akita/src/enhancers/persist-state.ts","ng://@datorama/akita/src/enhancers/devtools.ts","ng://@datorama/akita/src/plugins/entity-collection-plugin.ts","ng://@datorama/akita/src/plugins/state-history/state-history-plugin.ts","ng://@datorama/akita/src/plugins/state-history/entity-state-history-plugin.ts","ng://@datorama/akita/src/plugins/dirty-check/dirty-check-plugin.ts","ng://@datorama/akita/src/plugins/dirty-check/entity-dirty-check-plugin.ts","ng://@datorama/akita/src/api/store-utils.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport { ActiveState, EntityState, HashMap, ID } from '../api/types';\n\n/** Wraps the provided value in an array, unless the provided _value is an array. */\nexport function coerceArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n\n/** Check if a value is an object */\nexport function isObject(value: any) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n}\n\nexport function isPlainObject(value) {\n  return toBoolean(value) && value.constructor.name === 'Object';\n}\n\nexport function isFunction(value): value is Function {\n  return typeof value === 'function';\n}\n\nexport function toBoolean(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport function isUndefined(value) {\n  return typeof value === 'undefined';\n}\n\n/**\n * Check if entity exists\n */\nexport function entityExists<E>(id: ID, entities: HashMap<E>) {\n  return entities.hasOwnProperty(id);\n}\n\n/**\n * Observable that emits empty value and complete\n */\nexport function noop<T>(): Observable<T> {\n  return new Observable(observer => {\n    observer.next();\n    observer.complete();\n  });\n}\n\nexport function isObservable(value) {\n  return toBoolean(value) && isFunction(value.subscribe);\n}\n\nexport function isString(val: string | any): val is string {\n  return typeof val === 'string';\n}\n\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\n\nexport function isDefined(val) {\n  return val !== null && typeof val !== 'undefined';\n}\n\n/**\n * Check if the active entity exist\n */\nexport function resetActive<E>(state: EntityState<E>) {\n  return isActiveState(state) && entityExists((state as ActiveState).active, state.entities) === false;\n}\n\n/**\n * Check if the store supports active entity\n */\nexport function isActiveState<E>(state: EntityState<E>) {\n  return (state as ActiveState).hasOwnProperty('active');\n}\n\n/**\n * setValue(state, 'todos.ui', { filter: {}})\n */\nexport const setValue = (obj: any, prop: string, val: any) => {\n  const split = prop.split('.');\n\n  if (split.length === 1) return val;\n\n  obj = { ...obj };\n\n  const lastIndex = split.length - 2;\n  const removeStoreName = prop.split('.').slice(1);\n\n  removeStoreName.reduce((acc, part, index) => {\n    if (index === lastIndex) {\n      acc[part] = val;\n    } else {\n      acc[part] = { ...acc[part] };\n    }\n\n    return acc && acc[part];\n  }, obj);\n\n  return obj;\n};\n\n/**\n * getValue(state, 'todos.ui')\n */\nexport const getValue = (obj: any, prop: string) => {\n  /** return the whole state  */\n  if (prop.split('.').length === 1) {\n    return obj;\n  }\n  const removeStoreName = prop\n    .split('.')\n    .slice(1)\n    .join('.');\n  return removeStoreName.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\n};\n","import { entityExists, isObject, toBoolean } from './utils';\nimport { EntityState, ID } from '../api/types';\n\nexport class AkitaError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class AkitaImmutabilityError extends AkitaError {\n  constructor(storeName) {\n    super(`The new state should be immutable. Make sure to return a new immutable state. \\n store: \\n ${storeName}`);\n  }\n}\n\nexport class AkitaEntityNotExistsError extends AkitaError {\n  constructor(id) {\n    super(`Entity ${id} does not exists`);\n  }\n}\n\nexport class AkitaNoActiveError extends AkitaError {\n  constructor() {\n    super(`Active is null/undefined`);\n  }\n}\n\nexport class AkitaInvalidEntityState extends AkitaError {\n  constructor() {\n    super(`Entity state is invalid`);\n  }\n}\n\nexport class AkitaUpdateIdKeyError extends AkitaError {\n  constructor() {\n    super(`Updating entity id is not permitted when updating many entities`);\n  }\n}\n\nexport function assertEntityExists(id: ID, entities) {\n  if (!entityExists(id, entities)) {\n    throw new AkitaEntityNotExistsError(id);\n  }\n}\n\nexport function assertActive(store) {\n  if (!toBoolean(store.active)) {\n    throw new AkitaNoActiveError();\n  }\n}\n\nexport function assertEntityState(state: EntityState<any>) {\n  const assertEntities = isObject(state);\n\n  if (!assertEntities) {\n    throw new AkitaInvalidEntityState();\n  }\n}\n\nexport function assertDecorator(name: string, className: string) {\n  if (!name) {\n    console.error(`@StoreConfig({ name }) is missing in ${className}`);\n  }\n}\n","import { Entities, EntityState, HashMap, ID, Newable } from '../api/types';\nimport { AkitaUpdateIdKeyError, assertEntityExists, assertEntityState } from './error';\nimport { entityExists, isFunction, isPlainObject, resetActive } from './utils';\n\nexport class CRUD {\n  _set<S, E>(state: S, entities: E[] | HashMap<E> | Entities<E>, entityClass: Newable<E>, idKey): S {\n    let ids, normalized;\n\n    if ((entities as Entities<E>).ids && (entities as Entities<E>).entities) {\n      ids = (entities as Entities<E>).ids;\n      normalized = (entities as Entities<E>).entities;\n    } else {\n      const isArray = Array.isArray(entities);\n      normalized = entities;\n\n      if (isArray) {\n        normalized = this.keyBy(entities as E[], entityClass, idKey) as E[];\n      } else {\n        assertEntityState(entities);\n      }\n\n      ids = isArray ? (entities as E[]).map(entity => entity[idKey]) : Object.keys(normalized as HashMap<E>).map(id => entities[id][idKey]);\n    }\n\n    const newState = {\n      ...(state as any),\n      entities: normalized,\n      ids,\n      loading: false\n    };\n\n    if (resetActive(newState)) {\n      newState.active = null;\n    }\n\n    return newState;\n  }\n\n  _replaceEntity<T extends EntityState>(state: T, id: ID, entity): T {\n    return {\n      ...(state as any),\n      entities: {\n        ...state.entities,\n        [id]: entity\n      }\n    };\n  }\n\n  _add<S extends EntityState, E>(state: S, entities: E[], idKey): S {\n    let addedEntities = {};\n    let addedIds = [];\n\n    for (let i = 0; i < entities.length; i++) {\n      const entity = entities[i];\n      const entityId = entity[idKey];\n\n      if (!entityExists(entityId, state.entities)) {\n        addedEntities[entityId] = entity;\n        addedIds.push(entityId);\n      }\n    }\n\n    return {\n      ...(state as any),\n      entities: {\n        ...state.entities,\n        ...addedEntities\n      },\n      ids: [...state.ids, ...addedIds]\n    };\n  }\n\n  _update<T extends EntityState>(state: T, ids: ID[], newStateOrFn: object | ((e: Readonly<any>) => object), idKey: string): T {\n    const updatedEntities = {};\n\n    let isUpdatingIdKey = false;\n    let idToUpdate: ID;\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      idToUpdate = id;\n      assertEntityExists(id, state.entities);\n\n      const oldEntity = state.entities[id];\n      const newState = isFunction(newStateOrFn) ? newStateOrFn(oldEntity) : newStateOrFn;\n\n      if (newState.hasOwnProperty(idKey) && newState[idKey] !== oldEntity[idKey]) {\n        if (ids.length > 1) {\n          throw new AkitaUpdateIdKeyError();\n        }\n        isUpdatingIdKey = true;\n        idToUpdate = newState[idKey];\n      }\n\n      let newEntity;\n\n      const merged = {\n        ...oldEntity,\n        ...newState\n      };\n\n      if (isPlainObject(oldEntity)) {\n        newEntity = merged;\n      } else {\n        newEntity = new oldEntity.constructor(merged);\n      }\n\n      updatedEntities[idToUpdate] = newEntity;\n    }\n\n    let updatedIds = state.ids;\n    let stateEntities = state.entities;\n    if (isUpdatingIdKey) {\n      const [id] = ids;\n      const { [id]: deletedEntity, ...rest } = state.entities;\n      stateEntities = rest;\n      updatedIds = state.ids.map(current => (current === id ? idToUpdate : current));\n    }\n\n    return {\n      ...(state as any),\n      entities: {\n        ...stateEntities,\n        ...updatedEntities\n      },\n      ids: updatedIds\n    };\n  }\n\n  _remove<T extends EntityState>(state: T, ids: ID[] | null): T {\n    if (!ids) return this._removeAll(state);\n\n    const removed = ids.reduce((acc, id) => {\n      const { [id]: entity, ...rest } = acc;\n      return rest;\n    }, state.entities);\n    const newState = {\n      ...(state as any),\n      entities: removed,\n      ids: state.ids.filter(current => ids.indexOf(current) === -1)\n    };\n\n    if (resetActive(newState)) {\n      newState.active = null;\n    }\n\n    return newState;\n  }\n\n  private _removeAll<T extends EntityState>(state: T): T {\n    const newState = {\n      ...(state as any),\n      entities: {},\n      ids: [],\n      active: null\n    };\n\n    return newState;\n  }\n\n  private keyBy(entities: any[], entityClass?: Newable<any>, id = 'id') {\n    const acc = {};\n\n    for (let i = 0, len = entities.length; i < len; i++) {\n      const entity = entities[i];\n      acc[entity[id]] = entityClass ? new entityClass(entity) : entity;\n    }\n\n    return acc;\n  }\n}\n\nexport const _crud = new CRUD();\n","import { Subject } from 'rxjs';\nimport { ID } from '../api/types';\n\nexport type Action = {\n  type: string;\n  entityId?: ID[] | ID;\n  payload?: any;\n};\n\nexport class AkitaGlobals {\n  private customAction;\n  currentAction: Action;\n  skipAction = false;\n  skipTransactionMsg = false;\n  currentT = [];\n  activeTransactions = 0;\n  batchTransaction: Subject<boolean>;\n\n  setAction(_action: Action) {\n    if (this.customAction) {\n      this.currentAction = this.customAction;\n      this.customAction = null;\n      this.skipTransactionMsg = false;\n    } else {\n      if (this.activeTransactions === 0) {\n        this.currentAction = _action;\n      }\n    }\n\n    if (this.activeTransactions > 0) {\n      this.currentT.push(_action);\n    }\n  }\n\n  setCustomAction(action: Action, skipTransactionMsg = false) {\n    this.currentAction = this.customAction = action;\n    this.skipTransactionMsg = skipTransactionMsg;\n  }\n\n  setSkipAction(skip = true) {\n    this.skipAction = skip;\n  }\n}\n\nexport const __globalState = new AkitaGlobals();\n","import { __globalState } from './global-state';\nimport { Observable, Subject, of } from 'rxjs';\n\n/**\n * Start a new transaction batch\n */\nexport function startBatch() {\n  if (!isTransactionInProcess()) {\n    __globalState.batchTransaction = new Subject();\n  }\n  __globalState.activeTransactions++;\n}\n\n/**\n * End the transaction\n */\nexport function endBatch() {\n  if (--__globalState.activeTransactions === 0) {\n    __globalState.batchTransaction.next(true);\n    __globalState.batchTransaction.complete();\n  }\n}\n\n/**\n * Whether we're inside batch\n */\nexport function isTransactionInProcess() {\n  return __globalState.activeTransactions > 0;\n}\n\n/**\n */\nexport function commit(): Observable<boolean> {\n  return __globalState.batchTransaction ? __globalState.batchTransaction.asObservable() : of(true);\n}\n","export function deepFreeze(o) {\n  Object.freeze(o);\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (o.hasOwnProperty(prop) && o[prop] !== null && (typeof o[prop] === 'object' || typeof o[prop] === 'function') && !Object.isFrozen(o[prop])) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n}\n","export type StoreConfigOptions = {\n  name: string;\n  idKey?: string;\n};\n\nexport const configKey = 'akitaConfig';\n\nexport function StoreConfig(metadata: StoreConfigOptions) {\n  return function(constructor: Function) {\n    constructor[configKey] = { idKey: 'id' };\n\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      /* name is preserved read only key */\n      if (key === 'name') {\n        constructor[configKey]['storeName'] = metadata[key];\n      } else {\n        constructor[configKey][key] = metadata[key];\n      }\n    }\n  };\n}\n","import { HashMap, ID } from './types';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { AkitaImmutabilityError, assertDecorator } from '../internal/error';\nimport { commit, isTransactionInProcess } from '../internal/transaction.internal';\nimport { isFunction, isPlainObject } from '../internal/utils';\nimport { deepFreeze } from '../internal/deep-freeze';\nimport { configKey, StoreConfigOptions } from './store-config';\nimport { __globalState } from '../internal/global-state';\n\n/** Whether we are in dev mode */\nlet __DEV__ = true;\n\nexport const __stores__: { [storeName: string]: Store<any> } = {};\n\nexport const enum Actions {\n  NEW_STORE,\n  NEW_STATE\n}\n\nexport type Action = {\n  type: Actions;\n  payload: HashMap<any>;\n};\n\nexport const rootDispatcher = new ReplaySubject<Action>();\n\nfunction nextState(storeName, initialState = false) {\n  return {\n    type: Actions.NEW_STATE,\n    payload: {\n      name: storeName,\n      initialState\n    }\n  };\n}\n\n/**\n * Enable production mode to disable objectFreeze\n */\nexport function enableAkitaProdMode() {\n  __DEV__ = false;\n}\n\nexport function isDev() {\n  return __DEV__;\n}\n\n/**\n * The Root Store that every sub store needs to inherit and\n * invoke `super` with the initial state.\n */\nexport class Store<S> {\n  /** Manage the store with BehaviorSubject */\n  private store: BehaviorSubject<Readonly<S>>;\n\n  /** The current state value */\n  private storeValue: S;\n\n  /** Whether we are inside transaction **/\n  private inTransaction = false;\n\n  private _isPristine = true;\n\n  /**\n   *\n   * Initial the store with the state\n   */\n  constructor(initialState) {\n    __globalState.setAction({ type: '@@INIT' });\n    __stores__[this.storeName] = this;\n    this.setState(() => initialState);\n    rootDispatcher.next({\n      type: Actions.NEW_STORE,\n      payload: { store: this }\n    });\n    isDev() && assertDecorator(this.storeName, this.constructor.name);\n  }\n\n  setLoading(loading = false) {\n    if (loading !== (this._value() as S & { loading: boolean }).loading) {\n      isDev() && __globalState.setAction({ type: 'Set Loading' });\n      this.setState(s => ({ ...(s as object), loading } as any));\n    }\n  }\n\n  /**\n   * Update the store's error state.\n   */\n  setError<T>(error: T) {\n    if (error !== (this._value() as S & { error: any }).error) {\n      isDev() && __globalState.setAction({ type: 'Set Error' });\n      this.setState(s => ({ ...(s as object), error } as any));\n    }\n  }\n\n  /**\n   * Select a slice from the store\n   *\n   * @example\n   * this.store.select(state => state.entities)\n   *\n   */\n  _select<R>(project: (store: S) => R): Observable<R> {\n    return this.store$.pipe(\n      map(project),\n      distinctUntilChanged()\n    );\n  }\n\n  _value(): S {\n    return this.storeValue;\n  }\n\n  get config(): StoreConfigOptions {\n    return this.constructor[configKey];\n  }\n\n  /**\n   * Get the store name\n   */\n  get storeName() {\n    return this.config && this.config['storeName'];\n  }\n\n  get isPristine() {\n    return this._isPristine;\n  }\n\n  /**\n   * `setState()` is the only way to update a store; It receives a callback function,\n   * which gets the current state, and returns a new immutable state,\n   * which will be the new value of the store.\n   */\n  setState(newStateFn: (state: Readonly<S>) => S, _rootDispatcher = true) {\n    const prevState = this._value();\n    this.storeValue = __DEV__ ? deepFreeze(newStateFn(this._value())) : newStateFn(this._value());\n\n    if (prevState === this.storeValue) {\n      throw new AkitaImmutabilityError(this.storeName);\n    }\n\n    if (!this.store) {\n      this.store = new BehaviorSubject(this.storeValue);\n      rootDispatcher.next(nextState(this.storeName, true));\n      return;\n    }\n\n    if (isTransactionInProcess()) {\n      this.handleTransaction();\n      return;\n    }\n\n    this.dispatch(this.storeValue, _rootDispatcher);\n  }\n\n  /**\n   * This method is a shortcut for `setState()`.\n   * It can be useful when you want to pass the whole state object instead of merging a partial state.\n   *\n   * @example\n   * this.store.update(newState)\n   */\n  update(newState: Partial<S>);\n  update(newState: (state: Readonly<S>) => Partial<S>);\n  update(id: ID | ID[] | null, newState: Partial<S>);\n  update(newStateOrId: Partial<S> | ID | ID[] | null | ((state: Readonly<S>) => Partial<S>), newState?: Partial<S>) {\n    __globalState.setAction({ type: 'Update Store' });\n    this.setState(state => {\n      let value = isFunction(newStateOrId) ? newStateOrId(state) : newStateOrId;\n      let merged = Object.assign({}, state, value);\n      return isPlainObject(state) ? merged : new (state as any).constructor(merged);\n    });\n    this.setDirty();\n  }\n\n  /**\n   * Sets the store to a pristine state.\n   */\n  setPristine() {\n    this._isPristine = true;\n  }\n\n  /**\n   * Sets the store to a dirty state, indicating that it is not pristine.\n   */\n  setDirty() {\n    this._isPristine = false;\n  }\n\n  private dispatch(state: S, _rootDispatcher = true) {\n    this.store.next(state);\n    if (_rootDispatcher) {\n      rootDispatcher.next(nextState(this.storeName));\n      isDev() && __globalState.setAction({ type: 'Set State' });\n    }\n  }\n\n  private get store$() {\n    return this.store.asObservable();\n  }\n\n  /**\n   * When the transaction ends dispatch the final value once\n   */\n  private watchTransaction() {\n    commit().subscribe(() => {\n      this.inTransaction = false;\n      if (isDev() && !__globalState.skipTransactionMsg) {\n        __globalState.setAction({ type: '@Transaction' });\n      }\n      this.dispatch(this._value());\n      __globalState.currentT = [];\n      __globalState.skipTransactionMsg = false;\n    });\n  }\n\n  /**\n   * Listen to the transaction stream\n   */\n  private handleTransaction() {\n    if (!this.inTransaction) {\n      this.watchTransaction();\n      this.inTransaction = true;\n    }\n  }\n\n  private ngOnDestroy() {\n    if (this === __stores__[this.storeName]) {\n      delete __stores__[this.storeName];\n    }\n  }\n}\n","import { _crud } from '../internal/crud';\nimport { AkitaImmutabilityError, assertActive } from '../internal/error';\nimport { Action, __globalState } from '../internal/global-state';\nimport { coerceArray, entityExists, isFunction, toBoolean } from '../internal/utils';\nimport { isDev, Store } from './store';\nimport { ActiveState, Entities, EntityState, HashMap, ID, Newable } from './types';\n\n/**\n * The Root Store that every sub store needs to inherit and\n * invoke `super` with the initial state.\n */\nexport class EntityStore<S extends EntityState<E>, E> extends Store<S> {\n  /**\n   *\n   * Initiate the store with the state\n   */\n  constructor(initialState = {}, private options: { idKey?: string } = {}) {\n    super({ ...getInitialEntitiesState(), ...initialState });\n  }\n\n  get entities() {\n    return this._value().entities;\n  }\n\n  get idKey() {\n    /** backward compatibility */\n    const newIdKey = this.config && this.config.idKey;\n    if (!newIdKey) {\n      return this.options.idKey || 'id';\n    }\n    return newIdKey;\n  }\n\n  /**\n   *\n   * Replace current collection with provided collection\n   *\n   * @example\n   * this.store.set([Entity, Entity]);\n   * this.store.set({1: Entity, 2: Entity});\n   * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });\n   *\n   */\n  set(entities: E[] | HashMap<E> | Entities<E>, options: { entityClass?: Newable<E> } = {}) {\n    isDev() && __globalState.setAction({ type: 'Set Entities' });\n    this.setState(state => _crud._set(state, entities, options.entityClass, this.idKey));\n    this.setDirty();\n  }\n\n  /**\n   * Create or replace an entity in the store.\n   *\n   * @example\n   * this.store.createOrReplace(3, Entity);\n   *\n   */\n  createOrReplace(id: ID, entity: E) {\n    if (!entityExists(id, this._value().entities)) {\n      if (!entity[this.idKey]) {\n        entity[this.idKey] = id;\n      }\n      return this.add(entity);\n    }\n    isDev() && __globalState.setAction({ type: 'Upsert Entity', entityId: [id] });\n    this.setState(state => _crud._replaceEntity(state, id, entity));\n  }\n\n  /**\n   * Add an entity or entities to the store.\n   *\n   * @example\n   * this.store.add([Entity, Entity]);\n   * this.store.add(Entity);\n   */\n  add(entities: E[] | E) {\n    const toArray = coerceArray(entities);\n    if (toArray.length === 0) return;\n    isDev() && __globalState.setAction({ type: 'Add Entity' });\n    this.setState(state => _crud._add<S, E>(state, toArray, this.idKey));\n  }\n\n  /**\n   *\n   * Update an entity or entities in the store.\n   *\n   * @example\n   * this.store.update(3, {\n   *   name: 'New Name'\n   * });\n   *\n   *  this.store.update(3, entity => {\n   *    return {\n   *      config: {\n   *        ...entity.filter,\n   *        date\n   *      }\n   *    }\n   *  });\n   *\n   * this.store.update([1,2,3], {\n   *   name: 'New Name'\n   * });\n   *\n   * this.store.update(e => e.name === 'value', {\n   *   name: 'New Name'\n   * });\n   *\n   * this.store.update(null, {\n   *   name: 'New Name'\n   * });\n   *\n   */\n  update(id: ID | ID[] | null, newStateFn: ((entity: Readonly<E>) => Partial<E>));\n  update(id: ID | ID[] | null, newState: Partial<E>);\n  update(id: ID | ID[] | null, newState: Partial<S>);\n  update(newState: (state: Readonly<S>) => Partial<S>);\n  update(predicate: ((entity: Readonly<E>) => boolean), newStateFn: ((entity: Readonly<E>) => Partial<E>));\n  update(predicate: ((entity: Readonly<E>) => boolean), newState: Partial<E>);\n  update(predicate: ((entity: Readonly<E>) => boolean), newState: Partial<S>);\n  update(newState: Partial<S>);\n  update(\n    idsOrFn: ID | ID[] | null | Partial<S> | ((state: Readonly<S>) => Partial<S>) | ((entity: Readonly<E>) => boolean),\n    newStateOrFn?: ((entity: Readonly<E>) => Partial<E>) | Partial<E> | Partial<S>\n  ) {\n    let ids: ID[] = [];\n    const storeIds = this._value().ids;\n\n    if (isFunction(idsOrFn)) {\n      for (let i = 0, len = storeIds.length; i < len; i++) {\n        const id = storeIds[i];\n        const entity = this._value().entities[id];\n        if (entity && (idsOrFn as Function)(entity)) {\n          ids.push(id);\n        }\n      }\n    } else {\n      ids = toBoolean(idsOrFn) ? coerceArray(idsOrFn) : storeIds;\n    }\n\n    if (ids.length === 0) return;\n    isDev() && __globalState.setAction({ type: 'Update Entity', entityId: ids });\n\n    this.setState(state => {\n      return _crud._update(state, ids, newStateOrFn, this.idKey);\n    });\n  }\n\n  /**\n   * An alias to update all.\n   */\n  updateAll(state: Partial<E>) {\n    if (this._value().ids.length === 0) return;\n    this.update(null, state);\n  }\n\n  /**\n   * Update the root state (data which is external to the entities).\n   *\n   * @example\n   * this.store.updateRoot({\n   *   metadata: 'new metadata\n   * });\n   *\n   *  this.store.updateRoot(state => {\n   *    return {\n   *      metadata: {\n   *        ...state.metadata,\n   *        key: 'new value'\n   *      }\n   *    }\n   *  });\n   */\n  updateRoot(newStateFn: ((state: Readonly<S>) => Partial<S>) | Partial<S>, action?: Action) {\n    const newState = isFunction(newStateFn) ? newStateFn(this._value()) : newStateFn;\n\n    if (newState === this._value()) {\n      throw new AkitaImmutabilityError(this.storeName);\n    }\n\n    isDev() && __globalState.setAction(action || { type: 'Update Root' });\n\n    this.setState(state => {\n      return {\n        ...(state as any),\n        ...(newState as any)\n      };\n    });\n  }\n\n  /**\n   *\n   * Remove one or more entities from the store:\n   *\n   * @example\n   * this.store.remove(5);\n   * this.store.remove([1,2,3]);\n   * this.store.remove(entity => entity.id === 1);\n   * this.store.remove();\n   */\n  remove(id?: ID | ID[]);\n  remove(predicate: (entity: Readonly<E>) => boolean);\n  remove(idsOrFn?: ID | ID[] | ((entity: Readonly<E>) => boolean)) {\n    const storeIds = this._value().ids;\n\n    if (storeIds.length === 0) return;\n    const idPassed = toBoolean(idsOrFn);\n    if (!idPassed) this.setPristine();\n\n    let ids: ID[] = [];\n    if (isFunction(idsOrFn)) {\n      for (let i = 0, len = storeIds.length; i < len; i++) {\n        const id = storeIds[i];\n        const entity = this._value().entities[id];\n        if (entity && idsOrFn(entity)) {\n          ids.push(id);\n        }\n      }\n    } else {\n      ids = idPassed ? coerceArray(idsOrFn) : null;\n    }\n\n    if (ids && ids.length === 0) return;\n    isDev() && __globalState.setAction({ type: 'Remove Entity', entityId: ids });\n\n    this.setState(state => {\n      return _crud._remove(state, ids);\n    });\n  }\n\n  /**\n   *\n   * Update the active entity.\n   *\n   * @example\n   * this.store.updateActive(active => {\n   *   return {\n   *     config: {\n   *      ..active.config,\n   *      date\n   *     }\n   *   }\n   * })\n   */\n  updateActive(newStateFn: ((entity: Readonly<E>) => Partial<E>) | Partial<E>) {\n    assertActive(this._value());\n    isDev() && __globalState.setAction({ type: 'Update Active Entity', entityId: this._value().active });\n    this.setState(state => {\n      const activeId = state.active;\n      const newState = isFunction(newStateFn) ? newStateFn(state.entities[activeId]) : newStateFn;\n      if (newState === state) {\n        throw new AkitaImmutabilityError(this.storeName);\n      }\n      return _crud._update(state, [activeId], newState, this.idKey);\n    });\n  }\n\n  /**\n   * Set the given entity as active.\n   */\n  setActive(id: ID) {\n    if (id === this._value().active) return;\n    isDev() && __globalState.setAction({ type: 'Set Active Entity', entityId: id });\n    this.setState(state => {\n      return {\n        ...(state as any),\n        active: id\n      };\n    });\n  }\n}\n\nexport const getInitialEntitiesState = () =>\n  ({\n    entities: {},\n    ids: [],\n    loading: true,\n    error: null\n  } as EntityState);\n\nexport const getInitialActiveState = () =>\n  ({\n    active: null\n  } as ActiveState);\n","export enum Order {\n  ASC = 'asc',\n  DESC = 'desc'\n}\n\nexport function compareValues(key, order: Order = Order.ASC) {\n  return function(a, b) {\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n      return 0;\n    }\n\n    const varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n    const varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n\n    let comparison = 0;\n    if (varA > varB) {\n      comparison = 1;\n    } else if (varA < varB) {\n      comparison = -1;\n    }\n    return order == Order.DESC ? comparison * -1 : comparison;\n  };\n}\n","export function memoizeOne(fn: Function) {\n  let lastArgs;\n  let changed = false;\n  let firstInit = true;\n  let lastResult;\n\n  return function(...args) {\n    if (lastArgs) {\n      /** If entities nor ids doesn't change return the last value */\n      changed = lastArgs[1] !== args[1] || lastArgs[0] !== args[0];\n    }\n\n    if (firstInit || (changed && !firstInit)) {\n      lastResult = fn.apply(this, args);\n    }\n\n    firstInit = false;\n    lastArgs = args;\n    return lastResult;\n  };\n}\n","import { Order } from '../internal/sort';\n\nexport type SortBy<E, S = any> = ((a: E, b: E, state?: S) => number) | keyof E;\n\nexport interface SortByOptions<E> {\n  sortBy?: SortBy<E>;\n  sortByOrder?: Order;\n}\n\nexport interface QueryConfigOptions<E = any> extends SortByOptions<E> {}\n\nexport const queryConfigKey = 'akitaQueryConfig';\n\nexport function QueryConfig<E>(metadata: QueryConfigOptions<E>) {\n  return function(constructor: Function) {\n    constructor[queryConfigKey] = {};\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      constructor[queryConfigKey][key] = metadata[key];\n    }\n  };\n}\n","import { Store } from './store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { queryConfigKey, QueryConfigOptions } from './query-config';\n\nexport class Query<S> {\n  /** Use only for internal plugins like Pagination - don't use this property **/\n  __store__: Store<S>;\n\n  constructor(protected store: Store<S>) {\n    this.__store__ = store;\n  }\n\n  /**\n   * Select a slice from the store.\n   *\n   * @example\n   * this.query.select()\n   * this.query.select(state => state.entities)\n   */\n  select<R>(project?: (store: S) => R): Observable<R>;\n  select(): Observable<S>;\n  select<R>(project?: (store: S) => R): Observable<R | S> {\n    let state = project ? project : state => state;\n    return this.store._select(state);\n  }\n\n  /**\n   * Select once and complete.\n   */\n  selectOnce<R>(project: (store: S) => R): Observable<R> {\n    return this.select(project).pipe(take(1));\n  }\n\n  /**\n   * Select the store's loading state.\n   */\n  selectLoading() {\n    return this.select(state => (state as S & { loading: boolean }).loading);\n  }\n\n  /**\n   * Select the store's error state.\n   */\n  selectError() {\n    return this.select(state => (state as S & { error: any }).error);\n  }\n\n  /**\n   * Get the raw value of the store.\n   */\n  getSnapshot(): S {\n    return this.store._value();\n  }\n\n  /**\n   *  Returns whether the state of the store is pristine (the set() method hasn't been explicitly called\n   *  since the store creation, or the last time setPristine()was called).\n   */\n  get isPristine() {\n    return this.store.isPristine;\n  }\n\n  /**\n   * Returns whether the state of the store is dirty (the set() method\n   * or the setDirty() method has been explicitly called since the store creation,\n   * or the last time setPristine() was called).\n   */\n  get isDirty() {\n    return !this.store.isPristine;\n  }\n\n  get config(): QueryConfigOptions {\n    return this.constructor[queryConfigKey];\n  }\n}\n","import { combineLatest, Observable } from 'rxjs';\nimport { auditTime, map, switchMap, withLatestFrom } from 'rxjs/operators';\n\nimport { compareValues, Order } from '../internal/sort';\nimport { entityExists, isFunction, isUndefined, toBoolean } from '../internal/utils';\nimport { EntityStore } from './entity-store';\nimport { memoizeOne } from './memoize';\nimport { Query } from './query';\nimport { SortBy, SortByOptions } from './query-config';\nimport { ActiveState, EntityState, HashMap, ID } from './types';\n\nexport interface SelectOptions<E> extends SortByOptions<E> {\n  asObject?: boolean;\n  filterBy?: ((entity: E) => boolean) | undefined;\n  limitTo?: number;\n}\n\n/**\n *  An abstraction for querying the entities from the store\n */\nexport class QueryEntity<S extends EntityState, E> extends Query<S> {\n  protected store: EntityStore<S, E>;\n  private memoized;\n\n  /** Use only for internal plugins like Pagination - don't use this property **/\n  __store__;\n\n  constructor(store: EntityStore<S, E>) {\n    super(store);\n    this.__store__ = store;\n  }\n\n  /**\n   * Select the entire store's entity collection.\n   *\n   * @example\n   * this.store.selectAll();\n   */\n  selectAll(options: { asObject: true; filterBy?: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: undefined; sortByOrder?: undefined }): Observable<HashMap<E>>;\n  selectAll(options: { filterBy: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): Observable<E[]>;\n  selectAll(options: { asObject: true; limitTo?: number; sortBy?: undefined; sortByOrder?: undefined }): Observable<HashMap<E>>;\n  selectAll(options: { limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): Observable<E[]>;\n  selectAll(options: { asObject: false; filterBy?: SelectOptions<E>['filterBy']; limitTo?: number; sortBy?: SortBy<E>; sortByOrder?: Order }): Observable<E[]>;\n  selectAll(): Observable<E[]>;\n  selectAll(\n    options: SelectOptions<E> = {\n      asObject: false\n    }\n  ): Observable<E[] | HashMap<E>> {\n    const selectState$ = this.select(state => state);\n    const selectEntities$ = this.select(state => state.entities);\n\n    options.sortBy = options.sortBy || (this.config && (this.config.sortBy as SortBy<E>));\n    options.sortByOrder = options.sortByOrder || (this.config && this.config.sortByOrder);\n\n    return selectEntities$.pipe(\n      withLatestFrom(selectState$, (entities: HashMap<E>, state: S) => {\n        const { ids } = state;\n        if (options.asObject) {\n          return toMap(ids, entities, options);\n        } else {\n          if (!options.filterBy && !options.sortBy) {\n            if (!this.memoized) {\n              this.memoized = memoizeOne(toArray);\n            }\n            return this.memoized(state, options);\n          }\n\n          return toArray(state, options);\n        }\n      })\n    );\n  }\n\n  /**\n   * Get the entire store's entity collection.\n   *\n   * @example\n   * this.store.getAll();\n   */\n  getAll(options: { asObject: true; filterBy?: SelectOptions<E>['filterBy']; limitTo?: number }): HashMap<E>;\n  getAll(options: { filterBy: SelectOptions<E>['filterBy']; limitTo?: number }): E[];\n  getAll(options: { asObject: true; limitTo?: number }): HashMap<E>;\n  getAll(options: { limitTo?: number }): E[];\n  getAll(options: { asObject: false; filterBy?: SelectOptions<E>['filterBy']; limitTo?: number }): E[];\n  getAll(): E[];\n  getAll(options: SelectOptions<E> = { asObject: false, filterBy: undefined, limitTo: undefined }): E[] | HashMap<E> {\n    const state = this.getSnapshot();\n\n    if (options.asObject) {\n      return toMap(state.ids, state.entities, options, true);\n    }\n\n    return toArray(state, options);\n  }\n\n  /**\n   * Select multiple entities from the store.\n   *\n   * @example\n   * this.store.selectMany([1,2]);\n   */\n  selectMany(ids: ID[], options: { filterUndefined?: boolean } = {}): Observable<E[]> {\n    const filterUndefined = isUndefined(options.filterUndefined) ? true : options.filterUndefined;\n    const entities = ids.map(id => this.selectEntity(id));\n\n    return combineLatest(entities).pipe(\n      map(entities => {\n        return filterUndefined ? entities.filter(val => !isUndefined(val)) : entities;\n      }),\n      auditTime(0)\n    );\n  }\n\n  /**\n   * Select an entity or a slice of an entity.\n   *\n   * @example\n   * this.pagesStore.selectEntity(1)\n   * this.pagesStore.selectEntity(1, entity => entity.config.date)\n   *\n   */\n  selectEntity<R>(id: ID): Observable<E>;\n  selectEntity<R>(id: ID, project: (entity: E) => R): Observable<R>;\n  selectEntity<R>(id: ID, project?: (entity: E) => R): Observable<R | E> {\n    if (!project) {\n      return this._byId(id);\n    }\n\n    return this.select(state => {\n      if (this.hasEntity(id)) {\n        return project(this.getEntity(id));\n      }\n\n      return undefined;\n    });\n  }\n\n  /**\n   * Get an entity by id\n   *\n   * @example\n   * this.store.getEntity(1);\n   */\n  getEntity(id: ID): E {\n    return this.getSnapshot().entities[id];\n  }\n\n  /**\n   * Select the active entity's id.\n   */\n  selectActiveId(): Observable<ID> {\n    return this.select(state => (state as S & ActiveState).active);\n  }\n\n  /**\n   * Get the active id\n   */\n  getActiveId(): ID {\n    return (this.getSnapshot() as S & ActiveState).active;\n  }\n\n  /**\n   * Select the active entity.\n   */\n  selectActive<R>(): Observable<E>;\n  selectActive<R>(project: (entity: E) => R): Observable<R>;\n  selectActive<R>(project?: (entity: E) => R): Observable<R | E> {\n    return this.selectActiveId().pipe(switchMap(activeId => this.selectEntity(activeId, project)));\n  }\n\n  /**\n   * Get the active entity.\n   */\n  getActive(): E {\n    const activeId: ID = this.getActiveId();\n    return toBoolean(activeId) ? this.getEntity(activeId) : undefined;\n  }\n\n  /**\n   * Select the store's entity collection length.\n   */\n  selectCount(predicate?: (entity: E) => boolean): Observable<number> {\n    if (isFunction(predicate)) {\n      return this.selectAll({\n        filterBy: predicate\n      }).pipe(map(entities => entities.length));\n    }\n\n    return this.select(store => store.ids.length);\n  }\n\n  /**\n   * Get the store's entity collection length.\n   */\n  getCount(predicate?: (entity: E) => boolean): number {\n    if (isFunction(predicate)) {\n      return this.getAll().filter(predicate).length;\n    }\n    return this.getSnapshot().ids.length;\n  }\n\n  /**\n   * Returns whether entity exists.\n   */\n  hasEntity(id: ID): boolean;\n  hasEntity(project: (entity: E) => boolean): boolean;\n  hasEntity(projectOrId: any): boolean {\n    if (isFunction(projectOrId)) {\n      return this.getAll().some(projectOrId);\n    }\n    return projectOrId in this.store.entities;\n  }\n\n  isEmpty() {\n    return this.getSnapshot().ids.length === 0;\n  }\n\n  private _byId(id: ID): Observable<E> {\n    return this.select(state => this.getEntity(id));\n  }\n\n  ngOnDestroy() {\n    this.memoized = null;\n  }\n}\n\nfunction toArray<E, S extends EntityState>(state: S, options: SelectOptions<E>): E[] {\n  let arr = [];\n  const { ids, entities } = state;\n  const { filterBy, limitTo, sortBy, sortByOrder } = options;\n\n  for (let i = 0; i < ids.length; i++) {\n    const id = ids[i];\n\n    if (!entityExists(id, entities)) {\n      continue;\n    }\n\n    if (!filterBy) {\n      arr.push(entities[id]);\n      continue;\n    }\n\n    if (filterBy(entities[id])) {\n      arr.push(entities[id]);\n    }\n  }\n\n  if (sortBy) {\n    let _sortBy: any = isFunction(sortBy) ? sortBy : compareValues(sortBy, sortByOrder);\n    arr = arr.sort((a, b) => _sortBy(a, b, state));\n  }\n  const length = Math.min(limitTo || arr.length, arr.length);\n\n  return length === arr.length ? arr : arr.slice(0, length);\n}\n\nfunction toMap<E>(ids: ID[], entities: HashMap<E>, options: SelectOptions<E>, get = false): HashMap<E> {\n  const map = {};\n  const { filterBy, limitTo } = options;\n\n  if (get && !filterBy && !limitTo) {\n    return entities;\n  }\n\n  const length = Math.min(limitTo || ids.length, ids.length);\n\n  if (filterBy && isUndefined(limitTo) === false) {\n    let count = 0;\n    for (let i = 0, length = ids.length; i < length; i++) {\n      if (count === limitTo) break;\n      const id = ids[i];\n      if (!entityExists(id, entities)) {\n        continue;\n      }\n      if (filterBy(entities[id])) {\n        map[id] = entities[id];\n        count++;\n      }\n    }\n  } else {\n    for (let i = 0; i < length; i++) {\n      const id = ids[i];\n\n      if (!entityExists(id, entities)) {\n        continue;\n      }\n\n      if (!filterBy) {\n        map[id] = entities[id];\n        continue;\n      }\n\n      if (toBoolean(filterBy(entities[id]))) {\n        map[id] = entities[id];\n      }\n    }\n  }\n\n  return map;\n}\n","import { endBatch, startBatch } from '../internal/transaction.internal';\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *  The following code will update the store, BUT  emits only once\n *\n *  @example\n *  applyTransaction(() => {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  });\n *\n */\nexport function applyTransaction<T>(action: () => T, thisArg = undefined): T {\n  startBatch();\n  try {\n    return action.apply(thisArg);\n  } finally {\n    endBatch();\n  }\n}\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *\n *  The following code will update the store, BUT  emits only once.\n *\n *  @example\n *  @transaction\n *  addTodos() {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  }\n *\n *\n */\nexport function transaction() {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function(...args) {\n      return applyTransaction(() => {\n        return originalMethod.apply(this, args);\n      }, this);\n    };\n\n    return descriptor;\n  };\n}\n","import { isObject } from '../internal/utils';\n\n// https://github.com/georapbox/immutable-arrays\n\n/**\n * Adds one or more elements to the end of an array by returning\n * a new array instead of mutating the original one.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = push(originalArray, 'f', 'g');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nexport function push<T>(array: T[], ...elementN: T[]): T[] {\n  return [...array, ...elementN];\n}\n\n/**\n * Deletes an element from an array by its index in the array.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = remove(originalArray, 2);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'd', 'e']\n */\nexport function remove<T>(array: T[], index: number): T[] {\n  return index >= 0 ? [...array.slice(0, index), ...array.slice(index + 1)] : [...array];\n}\n\n/**\n * Removes the last element from an array by returning\n * a new array instead of mutating the original one.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = pop(originalArray);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd']\n */\nexport function pop<T>(array: T[]): T[] {\n  return array.slice(0, -1);\n}\n\n/**\n * Adds one or more elements to the beginning of an array.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = unshift(originalArray, 'f', 'g');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['f', 'g', 'a', 'b', 'c', 'd', 'e']\n */\nexport function unshift<T>(array: T[], ...elementN: T[]): T[] {\n  return [...elementN, ...array];\n}\n\n/**\n * Sorts the elements of an array (not in place) and returns a sorted array.\n *\n * @example\n * const numberArray = [20, 3, 4, 10, -3, 1, 0, 5];\n * const stringArray = ['Blue', 'Humpback', 'Beluga'];\n *\n * const resultArray = sort(numberArray, (a, b) => a - b);\n * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]\n * // -> resultArray [-3, 0, 1, 3, 4, 5, 10, 20]\n *\n * const resultArray = sort(numberArray, (a, b) => b - a);\n * // -> numberArray [20, 3, 4, 10, -3, 1, 0, 5]\n * // -> resultArray [20, 10, 5, 4, 3, 1, 0, -3]\n *\n * const resultArray = sort(stringArray);\n * // -> stringArray ['Blue', 'Humpback', 'Beluga']\n * // -> resultArray ['Beluga', 'Blue', 'Humpback']\n *\n * const resultArray = sort(stringArray, (a, b) => a.toLowerCase() < b.toLowerCase());\n * // -> stringArray ['Blue', 'Humpback', 'Beluga']\n * // -> resultArray ['Humpback', 'Blue', 'Beluga']\n */\nexport function sort<T>(array: T[], compareFunction?: (a: T, b: T) => number): T[] {\n  return [...array].sort(compareFunction);\n}\n\n/**\n * Reverses an array (not in place).\n * The first array element becomes the last, and the last array element becomes the first.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = reverse(originalArray);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['e', 'd', 'c', 'b', 'a']\n */\nexport function reverse<T>(array: T[]): T[] {\n  return [...array].reverse();\n}\n\n/**\n * Swap items in the array\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = swap(originalArray, 1, 4);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'e', 'c', 'd', 'b']\n */\nexport function swap<T>(array: T[], firstIndex: number, secondIndex: number): T[] {\n  const results = array.slice();\n  const firstItem = array[firstIndex];\n  results[firstIndex] = array[secondIndex];\n  results[secondIndex] = firstItem;\n\n  return results;\n}\n\n/**\n * Update item in the array\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = update(originalArray, 1, 'newItem');\n * // -> resultArray ['a', 'newItem', 'c', 'd', 'b']\n *\n * const originalArray = [{title: 1}, {title: 2}];\n * const resultArray = update(originalArray, originalArray[0], {title: 3});\n * // -> resultArray  [{title: 3}, {title: 2}];\n */\nexport function update<T>(array: T[], indexOrItem: number | object, updated: T): T[] {\n  return array.map((current, idx) => {\n    if (typeof indexOrItem === 'number' && idx === indexOrItem) {\n      return updated;\n    }\n\n    if (isObject(indexOrItem) && (indexOrItem as any) === current) {\n      return {\n        ...(indexOrItem as object),\n        ...(updated as any)\n      };\n    }\n\n    return current;\n  });\n}\n\n/**\n * Removes existing elements and/or adds new elements to an array.\n *\n * @example\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray []\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, 1);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['b', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, 3);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['d', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, originalArray.length);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray []\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, -3);\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, 0, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['lorem', 'ipsum', 'a', 'b', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, originalArray.length, 0, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'd', 'e', 'lorem', 'ipsum']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, 0, 2, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['lorem', 'ipsum', 'c', 'd', 'e']\n *\n * const originalArray = ['a', 'b', 'c', 'd', 'e'];\n * const resultArray = splice(originalArray, originalArray.length - 2, 2, 'lorem', 'ipsum');\n * // -> originalArray ['a', 'b', 'c', 'd', 'e']\n * // -> resultArray ['a', 'b', 'c', 'lorem', 'ipsum']\n */\nexport function splice<T>(array: T[], start = array.length, deleteCount = array.length - start, ...elementN: T[]): T[] {\n  return [...array.slice(0, start), ...elementN, ...array.slice(start + (deleteCount < 0 ? 0 : deleteCount))];\n}\n\nexport function toggle<T>(arr: T[], item: T) {\n  return arr.indexOf(item) > -1 ? arr.filter(current => item !== current) : push(arr, item);\n}\n","/** Checks if value is null or undefined */\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nexport const filterNil = <T>(source: Observable<T>) => source.pipe(filter(value => value !== null && typeof value !== 'undefined'));\n","import { Action, __globalState } from './global-state';\n\nexport function applyAction<T>(func: () => T, action: Action, thisArg = undefined): T {\n  __globalState.setCustomAction(action, true);\n  return func.apply(thisArg);\n}\n\nexport function action(action: Action, skipTransactionMsg = true) {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function(...args) {\n      __globalState.setCustomAction(action, skipTransactionMsg);\n      return originalMethod.apply(this, args);\n    };\n\n    return descriptor;\n  };\n}\n","import { Observable } from 'rxjs';\n\nfunction serialize(object) {\n  return JSON.stringify(object, function(key, value) {\n    if (typeof value === 'function') {\n      return value.toString();\n    }\n    return value;\n  });\n}\n\nfunction createWorker() {\n  const blob = new Blob(\n    [\n      `self.onmessage = function(e) {\n\n      function deserialize(str) {\n        return JSON.parse(str || '', function(key, value) {\n          if (value &&\n            typeof value === \"string\" &&\n            value.substr(0, 8) == \"function\") {\n            var startBody = value.indexOf('{') + 1;\n            var endBody = value.lastIndexOf('}');\n            var startArgs = value.indexOf('(') + 1;\n            var endArgs = value.indexOf(')');\n            return new Function(value.substring(startArgs, endArgs), value.substring(startBody, endBody));\n          }\n          return value;\n        });\n      }\n\n      var deserialized = deserialize(e.data);\n      var mapped = deserialized.data.map(function(d) {\n        return deserialized.factory(d);\n      });\n\n      self.postMessage(mapped);\n    }`\n    ],\n    {\n      type: 'text/javascript'\n    }\n  );\n\n  const url = URL.createObjectURL(blob);\n  return new Worker(url);\n}\n\n/**\n *  @example\n *   const mockTodos = Array.from({length: 10000}, (_, x) => ({id: x}));\n *\n *   of(mockTodos).pipe(mapInWorker<Todo>(createTodo))\n *   .subscribe(res => console.log(res));\n */\nexport function mapInWorker<T>(factoryFn: Function) {\n  return function(source): Observable<T[]> {\n    return new Observable(observer => {\n      const worker = createWorker();\n\n      worker.onmessage = function(e) {\n        observer.next(e.data);\n        observer.complete();\n        worker.terminate();\n      };\n\n      worker.onerror = function(err) {\n        observer.error(err);\n        observer.complete();\n        worker.terminate();\n      };\n\n      return source.subscribe(value => {\n        const input = {\n          factory: factoryFn,\n          data: value\n        };\n        const serialized = serialize(input);\n\n        worker.postMessage(serialized);\n      });\n    });\n  };\n}\n","import { __stores__ } from './store';\nimport { isString } from '../internal/utils';\n\nexport class SnapshotManager {\n  /**\n   * Get a snapshot of the whole state or a specific stores\n   * Use it ONLY for things like saving the state in the server\n   */\n  getStoresSnapshot(stores: string[] = []) {\n    let acc = {};\n    const hasInclude = stores.length > 0;\n    const keys = hasInclude ? stores : Object.keys(__stores__);\n    for (let i = 0; i < keys.length; i++) {\n      let storeName = keys[i];\n      acc[storeName] = __stores__[storeName]._value();\n    }\n\n    return acc;\n  }\n\n  /**\n   * Set snapshot we get from the server\n   */\n  setStoresSnapshot(stores: { [storeName: string]: any } | string) {\n    let normalizedStores = stores;\n    if (isString(stores)) {\n      normalizedStores = JSON.parse(normalizedStores as string);\n    }\n\n    for (let i = 0, keys = Object.keys(normalizedStores); i < keys.length; i++) {\n      const storeName = keys[i];\n      if (__stores__[storeName]) {\n        __stores__[storeName].setState(() => normalizedStores[storeName]);\n      }\n    }\n  }\n}\n\nexport const snapshotManager = new SnapshotManager();\n","import { QueryEntity } from '../api/query-entity';\nimport { Query } from '../api/query';\nimport { Observable } from 'rxjs';\nimport { filterNil } from '../api/operators';\nimport { toBoolean } from '../internal/utils';\nimport { ID } from '../api/types';\n\nexport type Queries<E, S> = Query<S> | QueryEntity<S, E>;\n\nexport abstract class AkitaPlugin<E = any, S = any> {\n  protected constructor(protected query: Queries<E, S>) {}\n\n  /** This method is responsible for getting access to the query. */\n  protected getQuery(): Queries<E, S> {\n    return this.query;\n  }\n\n  /** This method is responsible for getting access to the store. */\n  protected getStore() {\n    return this.getQuery().__store__;\n  }\n\n  /** This method is responsible for cleaning. */\n  public abstract destroy();\n\n  /** This method is responsible tells whether the plugin is entityBased or not.  */\n  protected isEntityBased(entityId: ID) {\n    return toBoolean(entityId);\n  }\n\n  /** This method is responsible for selecting the source; it can be the whole store or one entity. */\n  protected selectSource(entityId: ID): Observable<S | E> {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<S, E>).selectEntity(entityId).pipe(filterNil);\n    }\n\n    return (this.getQuery() as Query<S>).select(state => state);\n  }\n\n  protected getSource(entityId: ID): S | E {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<S, E>).getEntity(entityId);\n    }\n\n    return this.getQuery().getSnapshot();\n  }\n\n  /** This method is responsible for updating the store or one entity; it can be the whole store or one entity. */\n  protected updateStore(newState, entityId?) {\n    if (this.isEntityBased(entityId)) {\n      this.getStore().update(entityId, newState);\n    } else {\n      this.getStore().setState((state) => ({...state, ...newState}));\n    }\n  }\n}\n","import { QueryEntity } from '../../api/query-entity';\nimport { delay, map, switchMap, take } from 'rxjs/operators';\nimport { BehaviorSubject, from, Observable, Subscription } from 'rxjs';\nimport { isObservable, isUndefined } from '../../internal/utils';\nimport { ID } from '../../api/types';\nimport { AkitaPlugin } from '../plugin';\nimport { applyTransaction } from '../../api/transaction';\nimport { action, applyAction } from '../../internal/action';\n\nexport interface PaginationResponse<E> {\n  currentPage: number;\n  perPage: number;\n  lastPage: number;\n  data: E[];\n  total?: number;\n  from?: number;\n  to?: number;\n  pageControls?: number[];\n}\n\nexport type PaginatorConfig = {\n  pagesControls?: boolean;\n  range?: boolean;\n  startWith?: number;\n  cacheTimeout?: Observable<number>;\n};\n\nconst paginatorDefaults: PaginatorConfig = {\n  pagesControls: false,\n  range: false,\n  startWith: 1,\n  cacheTimeout: undefined\n};\n\nexport class PaginatorPlugin<E> extends AkitaPlugin<E> {\n  /** Save current filters, sorting, etc. in cache */\n  metadata = new Map();\n\n  private page: BehaviorSubject<number>;\n  private pages = new Map<number, { ids: ID[] }>();\n  private readonly clearCacheSubscription: Subscription;\n\n  private pagination: PaginationResponse<E> = {\n    currentPage: 1,\n    perPage: 0,\n    total: 0,\n    lastPage: 0,\n    data: []\n  };\n\n  /**\n   * When the user navigates to a different page and return\n   * we don't want to call `clearCache` on first time.\n   */\n  private initial = false;\n\n  constructor(protected query: QueryEntity<any, E>, public config: PaginatorConfig = {}) {\n    super(query);\n    this.config = Object.assign(paginatorDefaults, config);\n    const { startWith, cacheTimeout } = this.config;\n    this.page = new BehaviorSubject(startWith);\n    if (isObservable(cacheTimeout)) {\n      this.clearCacheSubscription = cacheTimeout.subscribe(_ => this.clearCache());\n    }\n  }\n\n  /**\n   * Proxy to the query loading\n   */\n  isLoading$ = this.query.selectLoading().pipe(delay(0));\n\n  /**\n   * Listen to page changes\n   */\n  get pageChanges() {\n    return this.page.asObservable();\n  }\n\n  /**\n   * Get the current page number\n   */\n  get currentPage() {\n    return this.pagination.currentPage;\n  }\n\n  /**\n   * Check if current page is the first one\n   */\n  get isFirst() {\n    return this.currentPage === 1;\n  }\n\n  /**\n   * Check if current page is the last one\n   */\n  get isLast() {\n    return this.currentPage === this.pagination.lastPage;\n  }\n\n  /**\n   * Whether to generate an array of pages for *ngFor\n   * [1, 2, 3, 4]\n   */\n  withControls() {\n    this.config.pagesControls = true;\n    return this;\n  }\n\n  /**\n   * Whether to generate the `from` and `to` keys\n   * [1, 2, 3, 4]\n   */\n  withRange() {\n    this.config.range = true;\n    return this;\n  }\n\n  /**\n   * Set the loading state\n   */\n  setLoading(value = true) {\n    this.getStore().setLoading(value);\n  }\n\n  /**\n   * Update the pagination object and add the page\n   */\n  @action({ type: '@Pagination - New Page' }, true)\n  update(response: PaginationResponse<E>) {\n    this.pagination = response;\n    this.addPage(response.data);\n  }\n\n  /**\n   *\n   * Set the ids and add the page to store\n   */\n  addPage(data: E[]) {\n    this.pages.set(this.currentPage, { ids: data.map(entity => entity[this.getStore().idKey]) });\n    this.getStore().add(data);\n  }\n\n  /**\n   * Clear the cache.\n   */\n  clearCache() {\n    if (!this.initial) {\n      applyAction(\n        () => {\n          this.getStore().remove();\n        },\n        { type: '@Pagination - Clear Cache' }\n      );\n      this.pages = new Map();\n    }\n    this.initial = false;\n  }\n\n  clearPage(page: number) {\n    this.pages.delete(page);\n  }\n\n  /**\n   * Clear the cache timeout and optionally the pages\n   */\n  destroy({ clearCache, currentPage }: { clearCache?: boolean; currentPage?: number } = {}) {\n    if (this.clearCacheSubscription) {\n      this.clearCacheSubscription.unsubscribe();\n    }\n    if (clearCache) {\n      this.clearCache();\n    }\n    if (!isUndefined(currentPage)) {\n      this.setPage(currentPage);\n    }\n    this.initial = true;\n  }\n\n  /**\n   * Whether the provided page is active\n   */\n  isPageActive(page: number) {\n    return this.currentPage === page;\n  }\n\n  /**\n   * Set the current page\n   */\n  setPage(page: number) {\n    if (page !== this.currentPage || !this.hasPage(page)) {\n      this.page.next((this.pagination.currentPage = page));\n    }\n  }\n\n  /**\n   * Increment current page\n   */\n  nextPage() {\n    if (this.currentPage !== this.pagination.lastPage) {\n      this.setPage(this.pagination.currentPage + 1);\n    }\n  }\n\n  /**\n   * Decrement current page\n   */\n  prevPage() {\n    if (this.pagination.currentPage > 1) {\n      this.setPage(this.pagination.currentPage - 1);\n    }\n  }\n\n  /**\n   * Set current page to last\n   */\n  setLastPage() {\n    this.setPage(this.pagination.lastPage);\n  }\n\n  /**\n   * Set current page to first\n   */\n  setFirstPage() {\n    this.setPage(1);\n  }\n\n  /**\n   * Check if page exists in cache\n   */\n  hasPage(page: number) {\n    return this.pages.has(page);\n  }\n\n  /**\n   * Get the current page if it's in cache, otherwise invoke the request\n   */\n  getPage(req: () => Observable<PaginationResponse<E>>) {\n    const page = this.pagination.currentPage;\n    if (this.hasPage(page)) {\n      return this.selectPage(page);\n    } else {\n      this.setLoading(true);\n      return from(req()).pipe(\n        switchMap((config: PaginationResponse<E>) => {\n          applyTransaction(() => {\n            this.setLoading(false);\n            this.update(config);\n          });\n          return this.selectPage(page);\n        })\n      );\n    }\n  }\n\n  getQuery(): QueryEntity<any, E> {\n    return this.query;\n  }\n\n  private getFrom() {\n    if (this.isFirst) {\n      return 1;\n    }\n    return (this.currentPage - 1) * this.pagination.perPage + 1;\n  }\n\n  private getTo() {\n    return this.currentPage * this.pagination.perPage;\n  }\n\n  /**\n   * Select the page\n   */\n  private selectPage(page: number): Observable<PaginationResponse<E>> {\n    return this.query.selectAll({ asObject: true }).pipe(\n      take(1),\n      map(entities => {\n        let response: PaginationResponse<E> = {\n          ...this.pagination,\n          data: this.pages.get(page).ids.map(id => entities[id])\n        };\n\n        const { range, pagesControls } = this.config;\n\n        if (!this.pagination.total) {\n          response.total = response.perPage * response.lastPage;\n          this.pagination.total = response.total;\n        }\n\n        if (range) {\n          response.from = this.getFrom();\n          response.to = this.getTo();\n        }\n\n        if (pagesControls) {\n          response.pageControls = generatePages(this.pagination.total, this.pagination.perPage);\n        }\n\n        return response;\n      })\n    );\n  }\n}\n\n/**\n * Generate an array so we can ngFor them to navigate between pages\n */\nfunction generatePages(total: number, perPage: number) {\n  const len = Math.ceil(total / perPage);\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i + 1);\n  }\n  return arr;\n}\n\n/** backward compatibility */\nexport const Paginator = PaginatorPlugin;\n","import { AkitaPlugin } from '../plugin';\nimport { Query } from '../../api/query';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { __globalState } from '../../internal/global-state';\nimport { getValue, isString, setValue } from '../../internal/utils';\n\nexport type FormGroupLike = {\n  patchValue: Function;\n  setValue: Function;\n  valueChanges: Observable<any>;\n};\n\nexport type AkitaFormProp<T> = {\n  [key: string]: T;\n};\n\nexport type PersistFormParams = {\n  debounceTime?: number;\n  formKey?: string;\n  emitEvent?: boolean;\n};\n\nexport class PersistNgFormPlugin<T = any> extends AkitaPlugin {\n  formChanges: Subscription;\n  private form: FormGroupLike;\n  private isKeyBased: boolean;\n  private initialValue;\n\n  constructor(protected query: Query<any>, private factoryFnOrPath: Function | string, private params: PersistFormParams = {}) {\n    super(query);\n    this.params = { ...{ debounceTime: 300, formKey: 'akitaForm', emitEvent: false }, ...params };\n    this.isKeyBased = isString(factoryFnOrPath);\n  }\n\n  setForm(form: FormGroupLike) {\n    this.form = form;\n    this.activate();\n    return this;\n  }\n\n  reset(initialState?: T) {\n    let value;\n    if (initialState) {\n      value = initialState;\n    } else {\n      value = this.isKeyBased ? this.initialValue : (this as any).factoryFnOrPath();\n    }\n\n    this.form.patchValue(value);\n\n    const storeValue = this.isKeyBased ? setValue(this.getStore()._value(), `${this.getStore().storeName}.${this.factoryFnOrPath}`, value) : { [this.params.formKey]: value };\n    this.updateStore(storeValue);\n  }\n\n  private activate() {\n    let path;\n\n    if (this.isKeyBased) {\n      path = `${this.getStore().storeName}.${this.factoryFnOrPath}`;\n      this.initialValue = getValue(this.getStore()._value(), path);\n      this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });\n    } else {\n      if (!(this.getQuery().getSnapshot() as AkitaFormProp<T>)[this.params.formKey]) {\n        __globalState.setAction({ type: '@PersistNgFormPlugin activate' });\n        this.updateStore({ [this.params.formKey]: (this as any).factoryFnOrPath() });\n      }\n\n      this.query.selectOnce(state => (state as AkitaFormProp<T>)[this.params.formKey]).subscribe(formValue => this.form.patchValue(formValue));\n    }\n\n    this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe(value => {\n      __globalState.setAction({ type: '@PersistForm - Update' });\n      let newState;\n      if (this.isKeyBased) {\n        newState = state => setValue(state, path, value);\n      } else {\n        newState = () => ({ [this.params.formKey]: value });\n      }\n      this.updateStore(newState(this.getStore()._value()));\n    });\n  }\n\n  destroy() {\n    this.formChanges && this.formChanges.unsubscribe();\n  }\n}\n","import { AkitaError } from '../internal/error';\nimport { __stores__, Actions, rootDispatcher } from '../api/store';\nimport { skip } from 'rxjs/operators';\nimport { getValue, setValue } from '../internal/utils';\nimport { __globalState } from '../internal/global-state';\n\nconst notBs = typeof localStorage === 'undefined';\n\nexport interface PersistStateParams {\n  /** The storage key */\n  key: string;\n  /** Storage strategy to use. This defaults to LocalStorage but you can pass SessionStorage or anything that implements the StorageEngine API. */\n  storage: Storage;\n  /** Custom deserializer. Defaults to JSON.parse */\n  deserialize: Function;\n  /** Custom serializer, defaults to JSON.stringify */\n  serialize: Function;\n  /**\n   * By default the whole state is saved to storage, use this param to include only the stores you need.\n   * Pay attention that you can't use both include and exclude\n   */\n  include: string[];\n  /**\n   *  By default the whole state is saved to storage, use this param to exclude stores that you don't need.\n   *  Pay attention that you can't use both include and exclude\n   */\n  exclude: string[];\n}\n\nexport function persistState(params?: Partial<PersistStateParams>) {\n  if (notBs) return;\n\n  const defaults: PersistStateParams = {\n    key: 'AkitaStores',\n    storage: localStorage,\n    deserialize: JSON.parse,\n    serialize: JSON.stringify,\n    include: [],\n    exclude: []\n  };\n  const { storage, deserialize, serialize, include, exclude, key } = Object.assign({}, defaults, params);\n\n  const hasInclude = include.length > 0;\n  const hasExclude = exclude.length > 0;\n\n  if (hasInclude && hasExclude) {\n    throw new AkitaError(\"You can't use both include and exclude\");\n  }\n\n  const storageState = deserialize(storage.getItem(key) || '{}');\n\n  let stores = {};\n  let acc = {};\n\n  function save() {\n    storage.setItem(key, serialize(Object.assign({}, storageState, acc)));\n  }\n\n  function subscribe(storeName, path) {\n    stores[storeName] = __stores__[storeName]\n      ._select(state => getValue(state, path))\n      .pipe(skip(1))\n      .subscribe(data => {\n        acc[storeName] = data;\n        save();\n      });\n  }\n\n  function setInitial(storeName, store, path) {\n    if (storageState[storeName]) {\n      __globalState.setAction({ type: '@PersistState' });\n      store.setState(state => {\n        return setValue(state, path, storageState[storeName]);\n      });\n      if (store.setDirty) {\n        store.setDirty();\n      }\n    }\n  }\n\n  const subscription = rootDispatcher.subscribe(action => {\n    if (action.type === Actions.NEW_STORE) {\n      let currentStoreName = action.payload.store.storeName;\n\n      if (hasExclude && exclude.indexOf(currentStoreName) > -1 === true) {\n        return;\n      }\n\n      if (hasInclude) {\n        const path = include.find(name => name.indexOf(currentStoreName) > -1);\n        if (!path) {\n          return;\n        } else {\n          currentStoreName = path.split('.')[0];\n          setInitial(currentStoreName, action.payload.store, path);\n          subscribe(currentStoreName, path);\n        }\n      } else {\n        setInitial(currentStoreName, action.payload.store, currentStoreName);\n        subscribe(currentStoreName, currentStoreName);\n      }\n    }\n  });\n\n  return {\n    destroy() {\n      subscription.unsubscribe();\n      for (let i = 0, keys = Object.keys(stores); i < keys.length; i++) {\n        const storeName = keys[i];\n        stores[storeName].unsubscribe();\n      }\n      stores = {};\n    },\n    clear() {\n      storage.clear();\n    },\n    clearStore(storeName: string) {\n      const storageState = deserialize(storage.getItem(key) || '{}');\n\n      if (storageState[storeName]) {\n        delete storageState[storeName];\n        storage.setItem(key, serialize(storageState));\n      }\n    }\n  };\n}\n","import { __stores__, Actions, rootDispatcher } from '../api/store';\nimport { __globalState } from '../internal/global-state';\nimport { isDefined } from '../internal/utils';\n\nexport type DevtoolsOptions = {\n  /**  maximum allowed actions to be stored in the history tree */\n  maxAge: number;\n  latency: number;\n  actionsBlacklist: string[];\n  actionsWhitelist: string[];\n  shouldCatchErrors: boolean;\n  logTrace: boolean;\n  predicate: (state: any, action: any) => boolean;\n};\n\nexport type NgZoneLike = { run: any };\n\nexport function akitaDevtools(ngZone: NgZoneLike, options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(ngZoneOrOptions?: NgZoneLike | Partial<DevtoolsOptions>, options: Partial<DevtoolsOptions> = {}) {\n  if (!(window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n    return;\n  }\n\n  const isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];\n\n  if (!isAngular) {\n    ngZoneOrOptions = ngZoneOrOptions || {};\n    (ngZoneOrOptions as any).run = cb => cb();\n    options = ngZoneOrOptions as Partial<DevtoolsOptions>;\n  }\n\n  const defaultOptions: Partial<DevtoolsOptions> & { name: string } = { name: 'Akita' };\n  const merged = Object.assign({}, defaultOptions, options);\n\n  const devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__.connect(merged);\n  let appState = {};\n\n  rootDispatcher.subscribe(action => {\n    if (action.type === Actions.NEW_STATE) {\n      if (__globalState.skipAction) {\n        __globalState.setSkipAction(false);\n        return;\n      }\n\n      appState = {\n        ...appState,\n        [action.payload.name]: __stores__[action.payload.name]._value()\n      };\n\n      const { type, entityId } = __globalState.currentAction;\n      const storeName = capitalize(action.payload.name);\n      let msg = isDefined(entityId) ? `[${storeName}] - ${type} (ids: ${entityId})` : `[${storeName}] - ${type}`;\n\n      if (options.logTrace) {\n        console.group(msg);\n        console.trace();\n        console.groupEnd();\n      }\n\n      devTools.send({ type: msg, transaction: __globalState.currentT.map(t => t.type) }, appState);\n    }\n  });\n\n  devTools.subscribe(message => {\n    if (message.type === 'ACTION') {\n      const [storeName] = message.payload.split('.');\n\n      if (__stores__[storeName]) {\n        (ngZoneOrOptions as NgZoneLike).run(() => {\n          const funcCall = message.payload.replace(storeName, `this['${storeName}']`);\n          try {\n            new Function(`${funcCall}`).call(__stores__);\n          } catch (e) {\n            console.warn('Unknown Method â¹ï¸');\n          }\n        });\n      }\n    }\n\n    if (message.type === 'DISPATCH') {\n      const payloadType = message.payload.type;\n\n      if (payloadType === 'COMMIT') {\n        devTools.init(appState);\n        return;\n      }\n\n      if (message.state) {\n        const rootState = JSON.parse(message.state);\n        for (let i = 0, keys = Object.keys(rootState); i < keys.length; i++) {\n          const storeName = keys[i];\n          if (__stores__[storeName]) {\n            (ngZoneOrOptions as NgZoneLike).run(() => {\n              __stores__[storeName].setState(() => rootState[storeName], false);\n            });\n          }\n        }\n      }\n    }\n  });\n}\n\nfunction capitalize(string) {\n  return string && string.charAt(0).toUpperCase() + string.slice(1);\n}\n","import {coerceArray, isFunction, isUndefined, toBoolean} from '../internal/utils';\nimport {QueryEntity} from '../api/query-entity';\nimport {ID, IDS} from '../api/types';\nimport {Observable} from 'rxjs';\n\n/**\n * Each plugin that wants to add support for entities should extend this interface.\n */\nexport type EntityParam = ID;\n\nexport type EntityCollectionParams = ID | ID[];\n\nexport type RebaseActions<P = any> = { beforeRemove?: Function; beforeAdd?: Function; afterAdd?: (plugin: P) => any; };\n\nconst defaultActions: RebaseActions = {beforeRemove: plugin => plugin.destroy()};\n\nexport abstract class EntityCollectionPlugin<E, P> {\n  protected entities = new Map<ID, P>();\n\n  protected constructor(protected query: QueryEntity<any, E>, private entityIds: EntityCollectionParams) {}\n\n  /**\n   * Get the entity plugin instance.\n   */\n  protected getEntity(id: ID): P {\n    return this.entities.get(id);\n  }\n\n  /**\n   * Whether the entity plugin exist.\n   */\n  protected hasEntity(id: ID): boolean {\n    return this.entities.has(id);\n  }\n\n  /**\n   * Remove the entity plugin instance.\n   */\n  protected removeEntity(id: ID) {\n    return this.entities.delete(id);\n  }\n\n  /**\n   * Set the entity plugin instance.\n   */\n  protected createEntity(id: ID, plugin: P) {\n    return this.entities.set(id, plugin);\n  }\n\n  /**\n   * If the user passes `entityIds` we take them; otherwise, we take all.\n   */\n  protected getIds(): ID[] {\n    return isUndefined(this.entityIds) ? this.query.getSnapshot().ids : coerceArray(this.entityIds);\n  }\n\n  /**\n   * When you call one of the plugin methods, you can pass id/ids or undefined which means all.\n   */\n  protected resolvedIds(ids?): ID[] {\n    return isUndefined(ids) ? this.getIds() : coerceArray(ids);\n  }\n\n  /**\n   * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.\n   *\n   * For example in your plugin you may do the following:\n   *\n   * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));\n   */\n  protected rebase(ids: ID[], actions: RebaseActions<P> = defaultActions) {\n    /**\n     *\n     * If the user passes `entityIds` & we have new ids check if we need to add/remove instances.\n     *\n     * This phase will be called only upon update.\n     */\n    if (toBoolean(ids)) {\n      /**\n       * Which means all\n       */\n      if (isUndefined(this.entityIds)) {\n        for (let i = 0, len = ids.length; i < len; i++) {\n          const entityId = ids[i];\n          if (this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          }\n        }\n\n        this.entities.forEach((plugin, entityId) => {\n          if (ids.indexOf(entityId) === -1) {\n            isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n            this.removeEntity(entityId);\n          }\n        });\n      } else {\n        /**\n         * Which means the user passes specific ids\n         */\n        const _ids = coerceArray(this.entityIds);\n        for (let i = 0, len = _ids.length; i < len; i++) {\n          const entityId = _ids[i];\n          /** The Entity in current ids and doesn't exist, add it. */\n          if (ids.indexOf(entityId) > -1 && this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          } else {\n            this.entities.forEach((plugin, entityId) => {\n              /** The Entity not in current ids and exists, remove it. */\n              if (ids.indexOf(entityId) === -1 && this.hasEntity(entityId) === true) {\n                isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n                this.removeEntity(entityId);\n              }\n            });\n          }\n        }\n      }\n    } else {\n      /**\n       * Otherwise, start with the provided ids or all.\n       */\n      this.getIds().forEach(id => {\n        if (!this.hasEntity(id)) this.createEntity(id, this.instantiatePlugin(id))\n      });\n    }\n  }\n\n  /**\n   * Listen for add/remove entities.\n   */\n  protected selectIds(): Observable<ID[]> {\n    return this.query.select(state => state.ids);\n  }\n\n  /**\n   * Base method for activation, you can override it if you need to.\n   */\n  protected activate(ids?: ID[]) {\n    this.rebase(ids);\n  }\n\n  /**\n   * This method is responsible for plugin instantiation.\n   *\n   * For example:\n   * return new StateHistory(this.query, this.params, id) as P;\n   */\n  protected abstract instantiatePlugin(id: ID): P;\n\n  /**\n   * This method is responsible for cleaning.\n   */\n  public abstract destroy(id?: ID);\n\n  /**\n   * Loop over each id and invoke the plugin method.\n   */\n  protected forEachId(ids: IDS, cb: (entity: P) => any) {\n    const _ids = this.resolvedIds(ids);\n\n    for (let i = 0, len = _ids.length; i < len; i++) {\n      const id = _ids[i];\n      if (this.hasEntity(id)) {\n        cb(this.getEntity(id));\n      }\n    }\n  }\n}\n","import { filter, pairwise } from 'rxjs/operators';\nimport { __globalState } from '../../internal/global-state';\nimport { toBoolean } from '../../internal/utils';\nimport { AkitaPlugin, Queries } from '../plugin';\nimport { EntityParam } from '../entity-collection-plugin';\n\nexport interface StateHistoryParams {\n  maxAge?: number;\n}\n\nexport class StateHistoryPlugin<E = any, S = any> extends AkitaPlugin<E, S> {\n  /** Allow skipping an update from outside */\n  private skip = false;\n\n  private history = {\n    past: [],\n    present: null,\n    future: []\n  };\n\n  /** Skip the update when redo/undo */\n  private skipUpdate = false;\n  private subscription;\n\n  constructor(protected query: Queries<E, S>, private params: StateHistoryParams = {}, private _entityId?: EntityParam) {\n    super(query);\n    params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;\n    this.activate();\n  }\n\n  get hasPast() {\n    return this.history.past.length > 0;\n  }\n\n  get hasFuture() {\n    return this.history.future.length > 0;\n  }\n\n  activate() {\n    this.history.present = this.getSource(this._entityId);\n    this.subscription = this.selectSource(this._entityId)\n      .pipe(pairwise())\n      .subscribe(([past, present]) => {\n        if (this.skip) {\n          this.skip = false;\n          return;\n        }\n        if (!this.skipUpdate) {\n          if (this.history.past.length === this.params.maxAge) {\n            this.history.past = this.history.past.slice(1);\n          }\n          this.history.past = [...this.history.past, past];\n          this.history.present = present;\n        }\n      });\n  }\n\n  undo() {\n    if (this.history.past.length > 0) {\n      const { past, present, future } = this.history;\n      const previous = past[past.length - 1];\n      const newPast = past.slice(0, past.length - 1);\n\n      this.history.past = newPast;\n      this.history.present = previous;\n      this.history.future = [present, ...this.history.future];\n      this.update();\n    }\n  }\n\n  redo() {\n    if (this.history.future.length > 0) {\n      const { past, present, future } = this.history;\n      const next = this.history.future[0];\n      const newFuture = this.history.future.slice(1);\n      this.history.past = [...past, present];\n      this.history.present = next;\n      this.history.future = newFuture;\n      this.update('Redo');\n    }\n  }\n\n  jumpToPast(index: number) {\n    if (index < 0 || index >= this.history.past.length) return;\n\n    const { past, future } = this.history;\n    /**\n     *\n     * const past = [1, 2, 3, 4, 5];\n     *\n     * newPast = past.slice(0, 2) = [1, 2];\n     * present = past[index] = 3;\n     * [...past.slice(2 + 1), ...future] = [4, 5];\n     *\n     */\n    const newPast = past.slice(0, index);\n    const newFuture = [...past.slice(index + 1), ...future];\n    const newPresent = past[index];\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update();\n  }\n\n  jumpToFuture(index: number) {\n    if (index < 0 || index >= this.history.future.length) return;\n\n    const { past, future } = this.history;\n\n    const newPast = [...past, ...future.slice(0, index)];\n    const newPresent = future[index];\n    const newFuture = future.slice(index + 1);\n\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update('Redo');\n  }\n\n  clear() {\n    this.history = {\n      past: [],\n      present: null,\n      future: []\n    };\n  }\n\n  destroy(clearHistory = false) {\n    if (clearHistory) {\n      this.clear();\n    }\n    this.subscription.unsubscribe();\n  }\n\n  ignoreNext() {\n    this.skip = true;\n  }\n\n  private update(action = 'Undo') {\n    this.skipUpdate = true;\n    __globalState.setCustomAction({ type: `@StateHistory - ${action}` });\n    this.updateStore(this.history.present, this._entityId);\n    this.skipUpdate = false;\n  }\n}\n","import { ID, IDS } from '../../api/types';\nimport { QueryEntity } from '../../api/query-entity';\nimport { StateHistoryPlugin, StateHistoryParams } from './state-history-plugin';\nimport { toBoolean } from '../../internal/utils';\nimport { skip } from 'rxjs/operators';\nimport { EntityCollectionPlugin, EntityCollectionParams } from '../entity-collection-plugin';\n\nexport interface StateHistoryEntityParams extends StateHistoryParams {\n  entityIds?: EntityCollectionParams;\n}\n\nexport class EntityStateHistoryPlugin<E, P extends StateHistoryPlugin<E, any> = StateHistoryPlugin<E, any>> extends EntityCollectionPlugin<E, P> {\n  constructor(protected query: QueryEntity<any, E>, protected readonly params: StateHistoryEntityParams = {}) {\n    super(query, params.entityIds);\n    params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;\n    this.activate();\n    this.selectIds()\n      .pipe(skip(1))\n      .subscribe(ids => this.activate(ids));\n  }\n\n  redo(ids?: IDS) {\n    this.forEachId(ids, e => e.redo());\n  }\n\n  undo(ids?: IDS) {\n    this.forEachId(ids, e => e.undo());\n  }\n\n  hasPast(id: ID) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasPast;\n    }\n  }\n\n  hasFuture(id: ID) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasFuture;\n    }\n  }\n\n  jumpToFuture(ids: IDS, index: number) {\n    this.forEachId(ids, e => e.jumpToFuture(index));\n  }\n\n  jumpToPast(ids: IDS, index: number) {\n    this.forEachId(ids, e => e.jumpToPast(index));\n  }\n\n  clear(ids?: IDS) {\n    this.forEachId(ids, e => e.clear());\n  }\n\n  destroy(ids?: IDS, clearHistory = false) {\n    this.forEachId(ids, e => e.destroy(clearHistory));\n  }\n\n  protected instantiatePlugin(id: ID) {\n    return new StateHistoryPlugin<E, any>(this.query, this.params, id) as P;\n  }\n}\n","import { AkitaPlugin, Queries } from '../plugin';\nimport { QueryEntity } from '../../api/query-entity';\nimport { Observable, BehaviorSubject, Subscription, merge } from 'rxjs';\nimport { distinctUntilChanged, map, skip } from 'rxjs/operators';\nimport { coerceArray, isFunction, isUndefined, toBoolean } from '../../internal/utils';\nimport { EntityParam } from '../entity-collection-plugin';\nimport { __globalState } from '../../internal/global-state';\nimport { Query } from '../../api/query';\n\nexport type DirtyCheckComparator<Entity> = (head: Entity, current: Entity) => boolean;\n\nexport type DirtyCheckParams<StoreState = any> = {\n  comparator?: DirtyCheckComparator<StoreState>;\n  watchProperty?: keyof StoreState | (keyof StoreState)[];\n};\n\nexport const dirtyCheckDefaultParams = {\n  comparator: (head, current) => JSON.stringify(head) !== JSON.stringify(current)\n};\n\nexport type DirtyCheckResetParams<StoreState = any> = {\n  updateFn?: StoreState | ((head: StoreState, current: StoreState) => any);\n};\n\nexport class DirtyCheckPlugin<Entity = any, StoreState = any> extends AkitaPlugin<Entity, StoreState> {\n  private head: StoreState | Partial<StoreState> | Entity;\n  private dirty = new BehaviorSubject(false);\n  private subscription: Subscription;\n  private active = false;\n\n  isDirty$: Observable<boolean> = this.dirty.asObservable().pipe(distinctUntilChanged());\n\n  constructor(protected query: Queries<Entity, StoreState>, private params?: DirtyCheckParams, private _entityId?: EntityParam) {\n    super(query);\n    this.params = { ...dirtyCheckDefaultParams, ...params };\n    if (this.params.watchProperty) {\n      let watchProp = this.params.watchProperty;\n      watchProp = coerceArray(watchProp);\n      if (watchProp.includes('entities') && !watchProp.includes('ids') && query instanceof QueryEntity) {\n        watchProp.push('ids');\n      }\n      this.params.watchProperty = watchProp;\n    }\n  }\n\n  protected getHead() {\n    return this.head;\n  }\n\n  private activate() {\n    this.head = this._getHead();\n    /** if we are tracking specific properties select only the relevant ones */\n    const source = this.params.watchProperty\n      ? (this.params.watchProperty as (keyof StoreState)[]).map(prop => this.query.select(state => state[prop]).pipe(map(val => ({ val, __akitaKey: prop }))))\n      : [this.selectSource(this._entityId)];\n    this.subscription = merge(...source)\n      .pipe(skip(1))\n      .subscribe((currentState: any) => {\n        if (isUndefined(this.head)) return;\n        /** __akitaKey is used to determine if we are tracking a specific property or a store change */\n        const head = currentState.__akitaKey ? this.head[currentState.__akitaKey as any] : this.head;\n        const compareTo = currentState.__akitaKey ? currentState.val : currentState;\n        const isChange = this.params.comparator(head, compareTo);\n\n        this.updateDirtiness(isChange);\n      });\n  }\n\n  reset(params: DirtyCheckResetParams = {}) {\n    let currentValue = this.head;\n    if (isFunction(params.updateFn)) {\n      if (this.isEntityBased(this._entityId)) {\n        currentValue = params.updateFn(this.head, (this.getQuery() as QueryEntity<StoreState, Entity>).getEntity(this._entityId));\n      } else {\n        currentValue = params.updateFn(this.head, (this.getQuery() as Query<StoreState>).getSnapshot());\n      }\n    }\n    /** If we are watching specific props compare them, if not compare the entire store */\n    const update = this.params.watchProperty ? this.compareProp(currentValue) : this._getHead() !== currentValue;\n    if (update) {\n      __globalState.setCustomAction({ type: `@DirtyCheck - Revert` });\n      this.updateStore(currentValue, this._entityId);\n    }\n  }\n\n  setHead() {\n    if (!this.active) {\n      this.activate();\n      this.active = true;\n    } else {\n      this.head = this._getHead();\n    }\n    this.updateDirtiness(false);\n    return this;\n  }\n\n  isDirty(): boolean {\n    return toBoolean(this.dirty.value);\n  }\n\n  hasHead() {\n    return toBoolean(this.getHead());\n  }\n\n  destroy() {\n    this.head = null;\n    this.subscription && this.subscription.unsubscribe();\n  }\n\n  private updateDirtiness(isDirty: boolean) {\n    this.dirty.next(isDirty);\n  }\n\n  private _getHead(): Partial<StoreState> | StoreState {\n    let head: StoreState | Partial<StoreState> = this.getSource(this._entityId) as StoreState;\n    if (this.params.watchProperty) {\n      head = (this.params.watchProperty as (keyof StoreState)[]).reduce(\n        (_head, prop) => {\n          _head[prop] = (head as Partial<StoreState>)[prop];\n          return _head;\n        },\n        {} as Partial<StoreState>\n      );\n    }\n    return head;\n  }\n\n  private compareProp(currentState: Partial<StoreState>): boolean {\n    const propKeys = Object.keys(currentState);\n    const head = this._getHead();\n\n    return propKeys.some(propKey => currentState[propKey] !== head[propKey]);\n  }\n}\n","import {HashMap, ID, IDS} from '../../api/types';\nimport {DirtyCheckComparator, dirtyCheckDefaultParams, DirtyCheckPlugin, DirtyCheckResetParams} from './dirty-check-plugin';\nimport {QueryEntity} from '../../api/query-entity';\nimport {EntityCollectionPlugin} from '../entity-collection-plugin';\nimport {map, skip} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\n\nexport type DirtyCheckCollectionParams<E> = {\n  comparator?: DirtyCheckComparator<E>;\n  entityIds?: ID | ID[];\n};\n\nexport class EntityDirtyCheckPlugin<E, P extends DirtyCheckPlugin<E, any> = DirtyCheckPlugin<E, any>> extends EntityCollectionPlugin<E, P> {\n\n  isSomeDirty$: Observable<boolean> = this.query.select(state => state.entities)\n    .pipe(map((entities: any) => this.checkSomeDirty(entities)));\n\n  constructor(protected query: QueryEntity<any, E>, private readonly params: DirtyCheckCollectionParams<E> = {}) {\n    super(query, params.entityIds);\n    this.params = {...dirtyCheckDefaultParams, ...params};\n    this.activate();\n    this.selectIds().pipe(skip(1)).subscribe(ids => {\n      this.rebase(ids, {afterAdd: plugin => plugin.setHead()});\n    });\n  }\n\n  setHead(ids?: IDS) {\n    this.forEachId(ids, e => e.setHead());\n    return this;\n  }\n\n  hasHead(id: ID): boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return entity.hasHead();\n    }\n\n    return false;\n  }\n\n  reset(ids?: IDS, params: DirtyCheckResetParams = {}) {\n    this.forEachId(ids, e => e.reset(params));\n  }\n\n  isDirty(id: ID): Observable<boolean>;\n  isDirty(id: ID, asObservable: true): Observable<boolean>;\n  isDirty(id: ID, asObservable: false): boolean;\n  isDirty(id: ID, asObservable = true): Observable<boolean> | boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return asObservable ? entity.isDirty$ : entity.isDirty();\n    }\n\n    return false;\n  }\n\n  isSomeDirty(): boolean {\n    const entities = this.query.getAll({asObject: true});\n    return this.checkSomeDirty(entities);\n  }\n\n  destroy(ids?: IDS) {\n    this.forEachId(ids, e => e.destroy());\n  }\n\n  protected instantiatePlugin(id: ID): P {\n    return new DirtyCheckPlugin(this.query, this.params, id) as P;\n  }\n\n  private checkSomeDirty(entities: HashMap<E>): boolean {\n    const entitiesIds = this.resolvedIds();\n    for (const id of entitiesIds) {\n      const dirty = this.params.comparator((this.getEntity(id) as any).getHead(), entities[id]);\n      if (dirty) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import { isNumber } from '../internal/utils';\n\n/**\n * @example\n *\n * this.peopleStore.update(id, person => ({\n *   guests: increment(person.guests)\n * }));\n */\nexport function increment(value: number, params: { maxValue: number | undefined } = { maxValue: undefined }) {\n  if (isNumber(value) === false) return;\n  if (params.maxValue && value === params.maxValue) return value;\n  return value + 1;\n}\n\n/**\n * @example\n *\n * this.peopleStore.update(id, person => ({\n *   guests: decrement(person.guests)\n * }));\n */\nexport function decrement(value, params: { allowNegative: boolean } = { allowNegative: false }) {\n  if (isNumber(value) === false) return;\n  if (params.allowNegative === false && value === 0) {\n    return value;\n  }\n  return value - 1;\n}\n\n/**\n * Generate random guid\n */\nexport function guid() {\n  return 'xxxxxx4xyx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n"],"names":["skip","map"],"mappings":"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"}
