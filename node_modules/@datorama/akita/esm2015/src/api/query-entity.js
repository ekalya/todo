/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { combineLatest } from 'rxjs';
import { auditTime, map, switchMap, withLatestFrom } from 'rxjs/operators';
import { compareValues } from '../internal/sort';
import { entityExists, isFunction, isUndefined, toBoolean } from '../internal/utils';
import { memoizeOne } from './memoize';
import { Query } from './query';
/**
 * @record
 * @template E
 */
export function SelectOptions() { }
function SelectOptions_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    SelectOptions.prototype.asObject;
    /** @type {?|undefined} */
    SelectOptions.prototype.filterBy;
    /** @type {?|undefined} */
    SelectOptions.prototype.limitTo;
}
// unsupported: template constraints.
/**
 *  An abstraction for querying the entities from the store
 * @template S, E
 */
export class QueryEntity extends Query {
    /**
     * @param {?} store
     */
    constructor(store) {
        super(store);
        this.__store__ = store;
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    selectAll(options = {
        asObject: false
    }) {
        /** @type {?} */
        const selectState$ = this.select(state => state);
        /** @type {?} */
        const selectEntities$ = this.select(state => state.entities);
        options.sortBy = options.sortBy || (this.config && (/** @type {?} */ (this.config.sortBy)));
        options.sortByOrder = options.sortByOrder || (this.config && this.config.sortByOrder);
        return selectEntities$.pipe(withLatestFrom(selectState$, (entities, state) => {
            const { ids } = state;
            if (options.asObject) {
                return toMap(ids, entities, options);
            }
            else {
                if (!options.filterBy && !options.sortBy) {
                    if (!this.memoized) {
                        this.memoized = memoizeOne(toArray);
                    }
                    return this.memoized(state, options);
                }
                return toArray(state, options);
            }
        }));
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    getAll(options = { asObject: false, filterBy: undefined, limitTo: undefined }) {
        /** @type {?} */
        const state = this.getSnapshot();
        if (options.asObject) {
            return toMap(state.ids, state.entities, options, true);
        }
        return toArray(state, options);
    }
    /**
     * Select multiple entities from the store.
     *
     * \@example
     * this.store.selectMany([1,2]);
     * @param {?} ids
     * @param {?=} options
     * @return {?}
     */
    selectMany(ids, options = {}) {
        /** @type {?} */
        const filterUndefined = isUndefined(options.filterUndefined) ? true : options.filterUndefined;
        /** @type {?} */
        const entities = ids.map(id => this.selectEntity(id));
        return combineLatest(entities).pipe(map(entities => {
            return filterUndefined ? entities.filter(val => !isUndefined(val)) : entities;
        }), auditTime(0));
    }
    /**
     * @template R
     * @param {?} id
     * @param {?=} project
     * @return {?}
     */
    selectEntity(id, project) {
        if (!project) {
            return this._byId(id);
        }
        return this.select(state => {
            if (this.hasEntity(id)) {
                return project(this.getEntity(id));
            }
            return undefined;
        });
    }
    /**
     * Get an entity by id
     *
     * \@example
     * this.store.getEntity(1);
     * @param {?} id
     * @return {?}
     */
    getEntity(id) {
        return this.getSnapshot().entities[id];
    }
    /**
     * Select the active entity's id.
     * @return {?}
     */
    selectActiveId() {
        return this.select(state => (/** @type {?} */ (state)).active);
    }
    /**
     * Get the active id
     * @return {?}
     */
    getActiveId() {
        return (/** @type {?} */ (this.getSnapshot())).active;
    }
    /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    selectActive(project) {
        return this.selectActiveId().pipe(switchMap(activeId => this.selectEntity(activeId, project)));
    }
    /**
     * Get the active entity.
     * @return {?}
     */
    getActive() {
        /** @type {?} */
        const activeId = this.getActiveId();
        return toBoolean(activeId) ? this.getEntity(activeId) : undefined;
    }
    /**
     * Select the store's entity collection length.
     * @param {?=} predicate
     * @return {?}
     */
    selectCount(predicate) {
        if (isFunction(predicate)) {
            return this.selectAll({
                filterBy: predicate
            }).pipe(map(entities => entities.length));
        }
        return this.select(store => store.ids.length);
    }
    /**
     * Get the store's entity collection length.
     * @param {?=} predicate
     * @return {?}
     */
    getCount(predicate) {
        if (isFunction(predicate)) {
            return this.getAll().filter(predicate).length;
        }
        return this.getSnapshot().ids.length;
    }
    /**
     * @param {?} projectOrId
     * @return {?}
     */
    hasEntity(projectOrId) {
        if (isFunction(projectOrId)) {
            return this.getAll().some(projectOrId);
        }
        return projectOrId in this.store.entities;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return this.getSnapshot().ids.length === 0;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    _byId(id) {
        return this.select(state => this.getEntity(id));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.memoized = null;
    }
}
function QueryEntity_tsickle_Closure_declarations() {
    /** @type {?} */
    QueryEntity.prototype.store;
    /** @type {?} */
    QueryEntity.prototype.memoized;
    /**
     * Use only for internal plugins like Pagination - don't use this property *
     * @type {?}
     */
    QueryEntity.prototype.__store__;
}
/**
 * @template E, S
 * @param {?} state
 * @param {?} options
 * @return {?}
 */
function toArray(state, options) {
    /** @type {?} */
    let arr = [];
    const { ids, entities } = state;
    const { filterBy, limitTo, sortBy, sortByOrder } = options;
    for (let i = 0; i < ids.length; i++) {
        /** @type {?} */
        const id = ids[i];
        if (!entityExists(id, entities)) {
            continue;
        }
        if (!filterBy) {
            arr.push(entities[id]);
            continue;
        }
        if (filterBy(entities[id])) {
            arr.push(entities[id]);
        }
    }
    if (sortBy) {
        /** @type {?} */
        let _sortBy = isFunction(sortBy) ? sortBy : compareValues(sortBy, sortByOrder);
        arr = arr.sort((a, b) => _sortBy(a, b, state));
    }
    /** @type {?} */
    const length = Math.min(limitTo || arr.length, arr.length);
    return length === arr.length ? arr : arr.slice(0, length);
}
/**
 * @template E
 * @param {?} ids
 * @param {?} entities
 * @param {?} options
 * @param {?=} get
 * @return {?}
 */
function toMap(ids, entities, options, get = false) {
    /** @type {?} */
    const map = {};
    const { filterBy, limitTo } = options;
    if (get && !filterBy && !limitTo) {
        return entities;
    }
    /** @type {?} */
    const length = Math.min(limitTo || ids.length, ids.length);
    if (filterBy && isUndefined(limitTo) === false) {
        /** @type {?} */
        let count = 0;
        for (let i = 0, length = ids.length; i < length; i++) {
            if (count === limitTo)
                break;
            /** @type {?} */
            const id = ids[i];
            if (!entityExists(id, entities)) {
                continue;
            }
            if (filterBy(entities[id])) {
                map[id] = entities[id];
                count++;
            }
        }
    }
    else {
        for (let i = 0; i < length; i++) {
            /** @type {?} */
            const id = ids[i];
            if (!entityExists(id, entities)) {
                continue;
            }
            if (!filterBy) {
                map[id] = entities[id];
                continue;
            }
            if (toBoolean(filterBy(entities[id]))) {
                map[id] = entities[id];
            }
        }
    }
    return map;
}

//# sourceMappingURL=data:application/json;base64,