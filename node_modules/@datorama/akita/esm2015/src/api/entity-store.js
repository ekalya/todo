/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { _crud } from '../internal/crud';
import { AkitaImmutabilityError, assertActive } from '../internal/error';
import { __globalState } from '../internal/global-state';
import { coerceArray, entityExists, isFunction, toBoolean } from '../internal/utils';
import { isDev, Store } from './store';
// unsupported: template constraints.
/**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S, E
 */
export class EntityStore extends Store {
    /**
     *
     * Initiate the store with the state
     * @param {?=} initialState
     * @param {?=} options
     */
    constructor(initialState = {}, options = {}) {
        super(Object.assign({}, getInitialEntitiesState(), initialState));
        this.options = options;
    }
    /**
     * @return {?}
     */
    get entities() {
        return this._value().entities;
    }
    /**
     * @return {?}
     */
    get idKey() {
        /** *
         * backward compatibility
          @type {?} */
        const newIdKey = this.config && this.config.idKey;
        if (!newIdKey) {
            return this.options.idKey || 'id';
        }
        return newIdKey;
    }
    /**
     *
     * Replace current collection with provided collection
     *
     * \@example
     * this.store.set([Entity, Entity]);
     * this.store.set({1: Entity, 2: Entity});
     * this.store.set([{id: 1}, {id: 2}], { entityClass: Product });
     *
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    set(entities, options = {}) {
        isDev() && __globalState.setAction({ type: 'Set Entities' });
        this.setState(state => _crud._set(state, entities, options.entityClass, this.idKey));
        this.setDirty();
    }
    /**
     * Create or replace an entity in the store.
     *
     * \@example
     * this.store.createOrReplace(3, Entity);
     *
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    createOrReplace(id, entity) {
        if (!entityExists(id, this._value().entities)) {
            if (!entity[this.idKey]) {
                entity[this.idKey] = id;
            }
            return this.add(entity);
        }
        isDev() && __globalState.setAction({ type: 'Upsert Entity', entityId: [id] });
        this.setState(state => _crud._replaceEntity(state, id, entity));
    }
    /**
     * Add an entity or entities to the store.
     *
     * \@example
     * this.store.add([Entity, Entity]);
     * this.store.add(Entity);
     * @param {?} entities
     * @return {?}
     */
    add(entities) {
        /** @type {?} */
        const toArray = coerceArray(entities);
        if (toArray.length === 0)
            return;
        isDev() && __globalState.setAction({ type: 'Add Entity' });
        this.setState(state => _crud._add(state, toArray, this.idKey));
    }
    /**
     * @param {?} idsOrFn
     * @param {?=} newStateOrFn
     * @return {?}
     */
    update(idsOrFn, newStateOrFn) {
        /** @type {?} */
        let ids = [];
        /** @type {?} */
        const storeIds = this._value().ids;
        if (isFunction(idsOrFn)) {
            for (let i = 0, len = storeIds.length; i < len; i++) {
                /** @type {?} */
                const id = storeIds[i];
                /** @type {?} */
                const entity = this._value().entities[id];
                if (entity && (/** @type {?} */ (idsOrFn))(entity)) {
                    ids.push(id);
                }
            }
        }
        else {
            ids = toBoolean(idsOrFn) ? coerceArray(idsOrFn) : storeIds;
        }
        if (ids.length === 0)
            return;
        isDev() && __globalState.setAction({ type: 'Update Entity', entityId: ids });
        this.setState(state => {
            return _crud._update(state, ids, newStateOrFn, this.idKey);
        });
    }
    /**
     * An alias to update all.
     * @param {?} state
     * @return {?}
     */
    updateAll(state) {
        if (this._value().ids.length === 0)
            return;
        this.update(null, state);
    }
    /**
     * Update the root state (data which is external to the entities).
     *
     * \@example
     * this.store.updateRoot({
     *   metadata: 'new metadata
     * });
     *
     *  this.store.updateRoot(state => {
     *    return {
     *      metadata: {
     *        ...state.metadata,
     *        key: 'new value'
     *      }
     *    }
     *  });
     * @param {?} newStateFn
     * @param {?=} action
     * @return {?}
     */
    updateRoot(newStateFn, action) {
        /** @type {?} */
        const newState = isFunction(newStateFn) ? newStateFn(this._value()) : newStateFn;
        if (newState === this._value()) {
            throw new AkitaImmutabilityError(this.storeName);
        }
        isDev() && __globalState.setAction(action || { type: 'Update Root' });
        this.setState(state => {
            return Object.assign({}, (/** @type {?} */ (state)), (/** @type {?} */ (newState)));
        });
    }
    /**
     * @param {?=} idsOrFn
     * @return {?}
     */
    remove(idsOrFn) {
        /** @type {?} */
        const storeIds = this._value().ids;
        if (storeIds.length === 0)
            return;
        /** @type {?} */
        const idPassed = toBoolean(idsOrFn);
        if (!idPassed)
            this.setPristine();
        /** @type {?} */
        let ids = [];
        if (isFunction(idsOrFn)) {
            for (let i = 0, len = storeIds.length; i < len; i++) {
                /** @type {?} */
                const id = storeIds[i];
                /** @type {?} */
                const entity = this._value().entities[id];
                if (entity && idsOrFn(entity)) {
                    ids.push(id);
                }
            }
        }
        else {
            ids = idPassed ? coerceArray(idsOrFn) : null;
        }
        if (ids && ids.length === 0)
            return;
        isDev() && __globalState.setAction({ type: 'Remove Entity', entityId: ids });
        this.setState(state => {
            return _crud._remove(state, ids);
        });
    }
    /**
     *
     * Update the active entity.
     *
     * \@example
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     * @param {?} newStateFn
     * @return {?}
     */
    updateActive(newStateFn) {
        assertActive(this._value());
        isDev() && __globalState.setAction({ type: 'Update Active Entity', entityId: this._value()["active"] });
        this.setState(state => {
            /** @type {?} */
            const activeId = state["active"];
            /** @type {?} */
            const newState = isFunction(newStateFn) ? newStateFn(state.entities[activeId]) : newStateFn;
            if (newState === state) {
                throw new AkitaImmutabilityError(this.storeName);
            }
            return _crud._update(state, [activeId], newState, this.idKey);
        });
    }
    /**
     * Set the given entity as active.
     * @param {?} id
     * @return {?}
     */
    setActive(id) {
        if (id === this._value()["active"])
            return;
        isDev() && __globalState.setAction({ type: 'Set Active Entity', entityId: id });
        this.setState(state => {
            return Object.assign({}, (/** @type {?} */ (state)), { active: id });
        });
    }
}
function EntityStore_tsickle_Closure_declarations() {
    /** @type {?} */
    EntityStore.prototype.options;
}
/** @type {?} */
export const getInitialEntitiesState = () => (/** @type {?} */ ({
    entities: {},
    ids: [],
    loading: true,
    error: null
}));
/** @type {?} */
export const getInitialActiveState = () => (/** @type {?} */ ({
    active: null
}));

//# sourceMappingURL=data:application/json;base64,