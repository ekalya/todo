/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Observable } from 'rxjs';
/**
 * @param {?} object
 * @return {?}
 */
function serialize(object) {
    return JSON.stringify(object, function (key, value) {
        if (typeof value === 'function') {
            return value.toString();
        }
        return value;
    });
}
/**
 * @return {?}
 */
function createWorker() {
    /** @type {?} */
    const blob = new Blob([
        `self.onmessage = function(e) {

      function deserialize(str) {
        return JSON.parse(str || '', function(key, value) {
          if (value &&
            typeof value === "string" &&
            value.substr(0, 8) == "function") {
            var startBody = value.indexOf('{') + 1;
            var endBody = value.lastIndexOf('}');
            var startArgs = value.indexOf('(') + 1;
            var endArgs = value.indexOf(')');
            return new Function(value.substring(startArgs, endArgs), value.substring(startBody, endBody));
          }
          return value;
        });
      }

      var deserialized = deserialize(e.data);
      var mapped = deserialized.data.map(function(d) {
        return deserialized.factory(d);
      });

      self.postMessage(mapped);
    }`
    ], {
        type: 'text/javascript'
    });
    /** @type {?} */
    const url = URL.createObjectURL(blob);
    return new Worker(url);
}
/**
 * \@example
 *   const mockTodos = Array.from({length: 10000}, (_, x) => ({id: x}));
 *
 *   of(mockTodos).pipe(mapInWorker<Todo>(createTodo))
 *   .subscribe(res => console.log(res));
 * @template T
 * @param {?} factoryFn
 * @return {?}
 */
export function mapInWorker(factoryFn) {
    return function (source) {
        return new Observable(observer => {
            /** @type {?} */
            const worker = createWorker();
            worker.onmessage = function (e) {
                observer.next(e.data);
                observer.complete();
                worker.terminate();
            };
            worker.onerror = function (err) {
                observer.error(err);
                observer.complete();
                worker.terminate();
            };
            return source.subscribe(value => {
                /** @type {?} */
                const input = {
                    factory: factoryFn,
                    data: value
                };
                /** @type {?} */
                const serialized = serialize(input);
                worker.postMessage(serialized);
            });
        });
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhdG9yYW1hL2FraXRhLyIsInNvdXJjZXMiOlsic3JjL2FwaS93b3JrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7O0FBRWxDLG1CQUFtQixNQUFNO0lBQ3ZCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsVUFBUyxHQUFHLEVBQUUsS0FBSztRQUMvQyxJQUFJLE9BQU8sS0FBSyxLQUFLLFVBQVUsRUFBRTtZQUMvQixPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUN6QjtRQUNELE9BQU8sS0FBSyxDQUFDO0tBQ2QsQ0FBQyxDQUFDO0NBQ0o7Ozs7QUFFRDs7SUFDRSxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FDbkI7UUFDRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUF1QkE7S0FDRCxFQUNEO1FBQ0UsSUFBSSxFQUFFLGlCQUFpQjtLQUN4QixDQUNGLENBQUM7O0lBRUYsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxPQUFPLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3hCOzs7Ozs7Ozs7OztBQVNELE1BQU0sc0JBQXlCLFNBQW1CO0lBQ2hELE9BQU8sVUFBUyxNQUFNO1FBQ3BCLE9BQU8sSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7O1lBQy9CLE1BQU0sTUFBTSxHQUFHLFlBQVksRUFBRSxDQUFDO1lBRTlCLE1BQU0sQ0FBQyxTQUFTLEdBQUcsVUFBUyxDQUFDO2dCQUMzQixRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdEIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNwQixNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7YUFDcEIsQ0FBQztZQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBUyxHQUFHO2dCQUMzQixRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNwQixRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ3BCLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUNwQixDQUFDO1lBRUYsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFOztnQkFDOUIsTUFBTSxLQUFLLEdBQUc7b0JBQ1osT0FBTyxFQUFFLFNBQVM7b0JBQ2xCLElBQUksRUFBRSxLQUFLO2lCQUNaLENBQUM7O2dCQUNGLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFFcEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUNoQyxDQUFDLENBQUM7U0FDSixDQUFDLENBQUM7S0FDSixDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZShvYmplY3QpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iamVjdCwgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVXb3JrZXIoKSB7XG4gIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihcbiAgICBbXG4gICAgICBgc2VsZi5vbm1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XG5cbiAgICAgIGZ1bmN0aW9uIGRlc2VyaWFsaXplKHN0cikge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzdHIgfHwgJycsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgdmFsdWUuc3Vic3RyKDAsIDgpID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdmFyIHN0YXJ0Qm9keSA9IHZhbHVlLmluZGV4T2YoJ3snKSArIDE7XG4gICAgICAgICAgICB2YXIgZW5kQm9keSA9IHZhbHVlLmxhc3RJbmRleE9mKCd9Jyk7XG4gICAgICAgICAgICB2YXIgc3RhcnRBcmdzID0gdmFsdWUuaW5kZXhPZignKCcpICsgMTtcbiAgICAgICAgICAgIHZhciBlbmRBcmdzID0gdmFsdWUuaW5kZXhPZignKScpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbih2YWx1ZS5zdWJzdHJpbmcoc3RhcnRBcmdzLCBlbmRBcmdzKSwgdmFsdWUuc3Vic3RyaW5nKHN0YXJ0Qm9keSwgZW5kQm9keSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVzZXJpYWxpemVkID0gZGVzZXJpYWxpemUoZS5kYXRhKTtcbiAgICAgIHZhciBtYXBwZWQgPSBkZXNlcmlhbGl6ZWQuZGF0YS5tYXAoZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gZGVzZXJpYWxpemVkLmZhY3RvcnkoZCk7XG4gICAgICB9KTtcblxuICAgICAgc2VsZi5wb3N0TWVzc2FnZShtYXBwZWQpO1xuICAgIH1gXG4gICAgXSxcbiAgICB7XG4gICAgICB0eXBlOiAndGV4dC9qYXZhc2NyaXB0J1xuICAgIH1cbiAgKTtcblxuICBjb25zdCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICByZXR1cm4gbmV3IFdvcmtlcih1cmwpO1xufVxuXG4vKipcbiAqICBAZXhhbXBsZVxuICogICBjb25zdCBtb2NrVG9kb3MgPSBBcnJheS5mcm9tKHtsZW5ndGg6IDEwMDAwfSwgKF8sIHgpID0+ICh7aWQ6IHh9KSk7XG4gKlxuICogICBvZihtb2NrVG9kb3MpLnBpcGUobWFwSW5Xb3JrZXI8VG9kbz4oY3JlYXRlVG9kbykpXG4gKiAgIC5zdWJzY3JpYmUocmVzID0+IGNvbnNvbGUubG9nKHJlcykpO1xuICovXG5leHBvcnQgZnVuY3Rpb24gbWFwSW5Xb3JrZXI8VD4oZmFjdG9yeUZuOiBGdW5jdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24oc291cmNlKTogT2JzZXJ2YWJsZTxUW10+IHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUob2JzZXJ2ZXIgPT4ge1xuICAgICAgY29uc3Qgd29ya2VyID0gY3JlYXRlV29ya2VyKCk7XG5cbiAgICAgIHdvcmtlci5vbm1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIG9ic2VydmVyLm5leHQoZS5kYXRhKTtcbiAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgd29ya2VyLnRlcm1pbmF0ZSgpO1xuICAgICAgfTtcblxuICAgICAgd29ya2VyLm9uZXJyb3IgPSBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgd29ya2VyLnRlcm1pbmF0ZSgpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUodmFsdWUgPT4ge1xuICAgICAgICBjb25zdCBpbnB1dCA9IHtcbiAgICAgICAgICBmYWN0b3J5OiBmYWN0b3J5Rm4sXG4gICAgICAgICAgZGF0YTogdmFsdWVcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZShpbnB1dCk7XG5cbiAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHNlcmlhbGl6ZWQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG59XG4iXX0=