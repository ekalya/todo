/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { BehaviorSubject, ReplaySubject } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { AkitaImmutabilityError, assertDecorator } from '../internal/error';
import { commit, isTransactionInProcess } from '../internal/transaction.internal';
import { isFunction, isPlainObject } from '../internal/utils';
import { deepFreeze } from '../internal/deep-freeze';
import { configKey } from './store-config';
import { __globalState } from '../internal/global-state';
/** *
 * Whether we are in dev mode
  @type {?} */
let __DEV__ = true;
/** @type {?} */
export const __stores__ = {};
/** @enum {number} */
const Actions = {
    NEW_STORE: 0,
    NEW_STATE: 1,
};
export { Actions };
/** @type {?} */
export const rootDispatcher = new ReplaySubject();
/**
 * @param {?} storeName
 * @param {?=} initialState
 * @return {?}
 */
function nextState(storeName, initialState = false) {
    return {
        type: 1 /* NEW_STATE */,
        payload: {
            name: storeName,
            initialState
        }
    };
}
/**
 * Enable production mode to disable objectFreeze
 * @return {?}
 */
export function enableAkitaProdMode() {
    __DEV__ = false;
}
/**
 * @return {?}
 */
export function isDev() {
    return __DEV__;
}
/**
 * The Root Store that every sub store needs to inherit and
 * invoke `super` with the initial state.
 * @template S
 */
export class Store {
    /**
     *
     * Initial the store with the state
     * @param {?} initialState
     */
    constructor(initialState) {
        /**
         * Whether we are inside transaction *
         */
        this.inTransaction = false;
        this._isPristine = true;
        __globalState.setAction({ type: '@@INIT' });
        __stores__[this.storeName] = this;
        this.setState(() => initialState);
        rootDispatcher.next({
            type: 0 /* NEW_STORE */,
            payload: { store: this }
        });
        isDev() && assertDecorator(this.storeName, this.constructor.name);
    }
    /**
     * @param {?=} loading
     * @return {?}
     */
    setLoading(loading = false) {
        if (loading !== (/** @type {?} */ (this._value())).loading) {
            isDev() && __globalState.setAction({ type: 'Set Loading' });
            this.setState(s => (/** @type {?} */ (Object.assign({}, (/** @type {?} */ (s)), { loading }))));
        }
    }
    /**
     * Update the store's error state.
     * @template T
     * @param {?} error
     * @return {?}
     */
    setError(error) {
        if (error !== (/** @type {?} */ (this._value())).error) {
            isDev() && __globalState.setAction({ type: 'Set Error' });
            this.setState(s => (/** @type {?} */ (Object.assign({}, (/** @type {?} */ (s)), { error }))));
        }
    }
    /**
     * Select a slice from the store
     *
     * \@example
     * this.store.select(state => state.entities)
     *
     * @template R
     * @param {?} project
     * @return {?}
     */
    _select(project) {
        return this.store$.pipe(map(project), distinctUntilChanged());
    }
    /**
     * @return {?}
     */
    _value() {
        return this.storeValue;
    }
    /**
     * @return {?}
     */
    get config() {
        return this.constructor[configKey];
    }
    /**
     * Get the store name
     * @return {?}
     */
    get storeName() {
        return this.config && this.config['storeName'];
    }
    /**
     * @return {?}
     */
    get isPristine() {
        return this._isPristine;
    }
    /**
     * `setState()` is the only way to update a store; It receives a callback function,
     * which gets the current state, and returns a new immutable state,
     * which will be the new value of the store.
     * @param {?} newStateFn
     * @param {?=} _rootDispatcher
     * @return {?}
     */
    setState(newStateFn, _rootDispatcher = true) {
        /** @type {?} */
        const prevState = this._value();
        this.storeValue = __DEV__ ? deepFreeze(newStateFn(this._value())) : newStateFn(this._value());
        if (prevState === this.storeValue) {
            throw new AkitaImmutabilityError(this.storeName);
        }
        if (!this.store) {
            this.store = new BehaviorSubject(this.storeValue);
            rootDispatcher.next(nextState(this.storeName, true));
            return;
        }
        if (isTransactionInProcess()) {
            this.handleTransaction();
            return;
        }
        this.dispatch(this.storeValue, _rootDispatcher);
    }
    /**
     * @param {?} newStateOrId
     * @param {?=} newState
     * @return {?}
     */
    update(newStateOrId, newState) {
        __globalState.setAction({ type: 'Update Store' });
        this.setState(state => {
            /** @type {?} */
            let value = isFunction(newStateOrId) ? newStateOrId(state) : newStateOrId;
            /** @type {?} */
            let merged = Object.assign({}, state, value);
            return isPlainObject(state) ? merged : new (/** @type {?} */ (state)).constructor(merged);
        });
        this.setDirty();
    }
    /**
     * Sets the store to a pristine state.
     * @return {?}
     */
    setPristine() {
        this._isPristine = true;
    }
    /**
     * Sets the store to a dirty state, indicating that it is not pristine.
     * @return {?}
     */
    setDirty() {
        this._isPristine = false;
    }
    /**
     * @param {?} state
     * @param {?=} _rootDispatcher
     * @return {?}
     */
    dispatch(state, _rootDispatcher = true) {
        this.store.next(state);
        if (_rootDispatcher) {
            rootDispatcher.next(nextState(this.storeName));
            isDev() && __globalState.setAction({ type: 'Set State' });
        }
    }
    /**
     * @return {?}
     */
    get store$() {
        return this.store.asObservable();
    }
    /**
     * When the transaction ends dispatch the final value once
     * @return {?}
     */
    watchTransaction() {
        commit().subscribe(() => {
            this.inTransaction = false;
            if (isDev() && !__globalState.skipTransactionMsg) {
                __globalState.setAction({ type: '@Transaction' });
            }
            this.dispatch(this._value());
            __globalState.currentT = [];
            __globalState.skipTransactionMsg = false;
        });
    }
    /**
     * Listen to the transaction stream
     * @return {?}
     */
    handleTransaction() {
        if (!this.inTransaction) {
            this.watchTransaction();
            this.inTransaction = true;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this === __stores__[this.storeName]) {
            delete __stores__[this.storeName];
        }
    }
}
function Store_tsickle_Closure_declarations() {
    /**
     * Manage the store with BehaviorSubject
     * @type {?}
     */
    Store.prototype.store;
    /**
     * The current state value
     * @type {?}
     */
    Store.prototype.storeValue;
    /**
     * Whether we are inside transaction *
     * @type {?}
     */
    Store.prototype.inTransaction;
    /** @type {?} */
    Store.prototype._isPristine;
}

//# sourceMappingURL=data:application/json;base64,