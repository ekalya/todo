/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { take } from 'rxjs/operators';
import { queryConfigKey } from './query-config';
/**
 * @template S
 */
export class Query {
    /**
     * @param {?} store
     */
    constructor(store) {
        this.store = store;
        this.__store__ = store;
    }
    /**
     * @template R
     * @param {?=} project
     * @return {?}
     */
    select(project) {
        /** @type {?} */
        let state = project ? project : state => state;
        return this.store._select(state);
    }
    /**
     * Select once and complete.
     * @template R
     * @param {?} project
     * @return {?}
     */
    selectOnce(project) {
        return this.select(project).pipe(take(1));
    }
    /**
     * Select the store's loading state.
     * @return {?}
     */
    selectLoading() {
        return this.select(state => (/** @type {?} */ (state)).loading);
    }
    /**
     * Select the store's error state.
     * @return {?}
     */
    selectError() {
        return this.select(state => (/** @type {?} */ (state)).error);
    }
    /**
     * Get the raw value of the store.
     * @return {?}
     */
    getSnapshot() {
        return this.store._value();
    }
    /**
     *  Returns whether the state of the store is pristine (the set() method hasn't been explicitly called
     *  since the store creation, or the last time setPristine()was called).
     * @return {?}
     */
    get isPristine() {
        return this.store.isPristine;
    }
    /**
     * Returns whether the state of the store is dirty (the set() method
     * or the setDirty() method has been explicitly called since the store creation,
     * or the last time setPristine() was called).
     * @return {?}
     */
    get isDirty() {
        return !this.store.isPristine;
    }
    /**
     * @return {?}
     */
    get config() {
        return this.constructor[queryConfigKey];
    }
}
function Query_tsickle_Closure_declarations() {
    /**
     * Use only for internal plugins like Pagination - don't use this property *
     * @type {?}
     */
    Query.prototype.__store__;
    /** @type {?} */
    Query.prototype.store;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEvIiwic291cmNlcyI6WyJzcmMvYXBpL3F1ZXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEMsT0FBTyxFQUFFLGNBQWMsRUFBc0IsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUVwRSxNQUFNOzs7O0lBSUosWUFBc0IsS0FBZTtRQUFmLFVBQUssR0FBTCxLQUFLLENBQVU7UUFDbkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7S0FDeEI7Ozs7OztJQVdELE1BQU0sQ0FBSSxPQUF5Qjs7UUFDakMsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQy9DLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDbEM7Ozs7Ozs7SUFLRCxVQUFVLENBQUksT0FBd0I7UUFDcEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMzQzs7Ozs7SUFLRCxhQUFhO1FBQ1gsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsbUJBQUMsS0FBaUMsRUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzFFOzs7OztJQUtELFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxtQkFBQyxLQUEyQixFQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDbEU7Ozs7O0lBS0QsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztLQUM1Qjs7Ozs7O0lBTUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQztLQUM5Qjs7Ozs7OztJQU9ELElBQUksT0FBTztRQUNULE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQztLQUMvQjs7OztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztLQUN6QztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RvcmUgfSBmcm9tICcuL3N0b3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBxdWVyeUNvbmZpZ0tleSwgUXVlcnlDb25maWdPcHRpb25zIH0gZnJvbSAnLi9xdWVyeS1jb25maWcnO1xuXG5leHBvcnQgY2xhc3MgUXVlcnk8Uz4ge1xuICAvKiogVXNlIG9ubHkgZm9yIGludGVybmFsIHBsdWdpbnMgbGlrZSBQYWdpbmF0aW9uIC0gZG9uJ3QgdXNlIHRoaXMgcHJvcGVydHkgKiovXG4gIF9fc3RvcmVfXzogU3RvcmU8Uz47XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHN0b3JlOiBTdG9yZTxTPikge1xuICAgIHRoaXMuX19zdG9yZV9fID0gc3RvcmU7XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0IGEgc2xpY2UgZnJvbSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHRoaXMucXVlcnkuc2VsZWN0KClcbiAgICogdGhpcy5xdWVyeS5zZWxlY3Qoc3RhdGUgPT4gc3RhdGUuZW50aXRpZXMpXG4gICAqL1xuICBzZWxlY3Q8Uj4ocHJvamVjdD86IChzdG9yZTogUykgPT4gUik6IE9ic2VydmFibGU8Uj47XG4gIHNlbGVjdCgpOiBPYnNlcnZhYmxlPFM+O1xuICBzZWxlY3Q8Uj4ocHJvamVjdD86IChzdG9yZTogUykgPT4gUik6IE9ic2VydmFibGU8UiB8IFM+IHtcbiAgICBsZXQgc3RhdGUgPSBwcm9qZWN0ID8gcHJvamVjdCA6IHN0YXRlID0+IHN0YXRlO1xuICAgIHJldHVybiB0aGlzLnN0b3JlLl9zZWxlY3Qoc3RhdGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdCBvbmNlIGFuZCBjb21wbGV0ZS5cbiAgICovXG4gIHNlbGVjdE9uY2U8Uj4ocHJvamVjdDogKHN0b3JlOiBTKSA9PiBSKTogT2JzZXJ2YWJsZTxSPiB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0KHByb2plY3QpLnBpcGUodGFrZSgxKSk7XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0IHRoZSBzdG9yZSdzIGxvYWRpbmcgc3RhdGUuXG4gICAqL1xuICBzZWxlY3RMb2FkaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdChzdGF0ZSA9PiAoc3RhdGUgYXMgUyAmIHsgbG9hZGluZzogYm9vbGVhbiB9KS5sb2FkaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3QgdGhlIHN0b3JlJ3MgZXJyb3Igc3RhdGUuXG4gICAqL1xuICBzZWxlY3RFcnJvcigpIHtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3Qoc3RhdGUgPT4gKHN0YXRlIGFzIFMgJiB7IGVycm9yOiBhbnkgfSkuZXJyb3IpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcmF3IHZhbHVlIG9mIHRoZSBzdG9yZS5cbiAgICovXG4gIGdldFNuYXBzaG90KCk6IFMge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLl92YWx1ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqICBSZXR1cm5zIHdoZXRoZXIgdGhlIHN0YXRlIG9mIHRoZSBzdG9yZSBpcyBwcmlzdGluZSAodGhlIHNldCgpIG1ldGhvZCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IGNhbGxlZFxuICAgKiAgc2luY2UgdGhlIHN0b3JlIGNyZWF0aW9uLCBvciB0aGUgbGFzdCB0aW1lIHNldFByaXN0aW5lKCl3YXMgY2FsbGVkKS5cbiAgICovXG4gIGdldCBpc1ByaXN0aW5lKCkge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLmlzUHJpc3RpbmU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBzdGF0ZSBvZiB0aGUgc3RvcmUgaXMgZGlydHkgKHRoZSBzZXQoKSBtZXRob2RcbiAgICogb3IgdGhlIHNldERpcnR5KCkgbWV0aG9kIGhhcyBiZWVuIGV4cGxpY2l0bHkgY2FsbGVkIHNpbmNlIHRoZSBzdG9yZSBjcmVhdGlvbixcbiAgICogb3IgdGhlIGxhc3QgdGltZSBzZXRQcmlzdGluZSgpIHdhcyBjYWxsZWQpLlxuICAgKi9cbiAgZ2V0IGlzRGlydHkoKSB7XG4gICAgcmV0dXJuICF0aGlzLnN0b3JlLmlzUHJpc3RpbmU7XG4gIH1cblxuICBnZXQgY29uZmlnKCk6IFF1ZXJ5Q29uZmlnT3B0aW9ucyB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3JbcXVlcnlDb25maWdLZXldO1xuICB9XG59XG4iXX0=