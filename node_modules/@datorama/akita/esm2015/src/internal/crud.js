/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { AkitaUpdateIdKeyError, assertEntityExists, assertEntityState } from './error';
import { entityExists, isFunction, isPlainObject, resetActive } from './utils';
export class CRUD {
    /**
     * @template S, E
     * @param {?} state
     * @param {?} entities
     * @param {?} entityClass
     * @param {?} idKey
     * @return {?}
     */
    _set(state, entities, entityClass, idKey) {
        /** @type {?} */
        let ids;
        /** @type {?} */
        let normalized;
        if ((/** @type {?} */ (entities)).ids && (/** @type {?} */ (entities)).entities) {
            ids = (/** @type {?} */ (entities)).ids;
            normalized = (/** @type {?} */ (entities)).entities;
        }
        else {
            /** @type {?} */
            const isArray = Array.isArray(entities);
            normalized = entities;
            if (isArray) {
                normalized = /** @type {?} */ (this.keyBy(/** @type {?} */ (entities), entityClass, idKey));
            }
            else {
                assertEntityState(entities);
            }
            ids = isArray ? (/** @type {?} */ (entities)).map(entity => entity[idKey]) : Object.keys(/** @type {?} */ (normalized)).map(id => entities[id][idKey]);
        }
        /** @type {?} */
        const newState = Object.assign({}, (/** @type {?} */ (state)), { entities: normalized, ids, loading: false });
        if (resetActive(newState)) {
            newState.active = null;
        }
        return newState;
    }
    /**
     * @template T
     * @param {?} state
     * @param {?} id
     * @param {?} entity
     * @return {?}
     */
    _replaceEntity(state, id, entity) {
        return Object.assign({}, (/** @type {?} */ (state)), { entities: Object.assign({}, state.entities, { [id]: entity }) });
    }
    /**
     * @template S, E
     * @param {?} state
     * @param {?} entities
     * @param {?} idKey
     * @return {?}
     */
    _add(state, entities, idKey) {
        /** @type {?} */
        let addedEntities = {};
        /** @type {?} */
        let addedIds = [];
        for (let i = 0; i < entities.length; i++) {
            /** @type {?} */
            const entity = entities[i];
            /** @type {?} */
            const entityId = entity[idKey];
            if (!entityExists(entityId, state.entities)) {
                addedEntities[entityId] = entity;
                addedIds.push(entityId);
            }
        }
        return Object.assign({}, (/** @type {?} */ (state)), { entities: Object.assign({}, state.entities, addedEntities), ids: [...state.ids, ...addedIds] });
    }
    /**
     * @template T
     * @param {?} state
     * @param {?} ids
     * @param {?} newStateOrFn
     * @param {?} idKey
     * @return {?}
     */
    _update(state, ids, newStateOrFn, idKey) {
        /** @type {?} */
        const updatedEntities = {};
        /** @type {?} */
        let isUpdatingIdKey = false;
        /** @type {?} */
        let idToUpdate;
        for (let i = 0; i < ids.length; i++) {
            /** @type {?} */
            const id = ids[i];
            idToUpdate = id;
            assertEntityExists(id, state.entities);
            /** @type {?} */
            const oldEntity = state.entities[id];
            /** @type {?} */
            const newState = isFunction(newStateOrFn) ? newStateOrFn(oldEntity) : newStateOrFn;
            if (newState.hasOwnProperty(idKey) && newState[idKey] !== oldEntity[idKey]) {
                if (ids.length > 1) {
                    throw new AkitaUpdateIdKeyError();
                }
                isUpdatingIdKey = true;
                idToUpdate = newState[idKey];
            }
            /** @type {?} */
            let newEntity;
            /** @type {?} */
            const merged = Object.assign({}, oldEntity, newState);
            if (isPlainObject(oldEntity)) {
                newEntity = merged;
            }
            else {
                newEntity = new oldEntity.constructor(merged);
            }
            updatedEntities[idToUpdate] = newEntity;
        }
        /** @type {?} */
        let updatedIds = state.ids;
        /** @type {?} */
        let stateEntities = state.entities;
        if (isUpdatingIdKey) {
            const [id] = ids;
            const _a = state.entities, _b = id, deletedEntity = _a[_b], rest = tslib_1.__rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);
            stateEntities = rest;
            updatedIds = state.ids.map(current => (current === id ? idToUpdate : current));
        }
        return Object.assign({}, (/** @type {?} */ (state)), { entities: Object.assign({}, stateEntities, updatedEntities), ids: updatedIds });
    }
    /**
     * @template T
     * @param {?} state
     * @param {?} ids
     * @return {?}
     */
    _remove(state, ids) {
        if (!ids)
            return this._removeAll(state);
        /** @type {?} */
        const removed = ids.reduce((acc, id) => {
            const _a = id, entity = acc[_a], rest = tslib_1.__rest(acc, [typeof _a === "symbol" ? _a : _a + ""]);
            return rest;
        }, state.entities);
        /** @type {?} */
        const newState = Object.assign({}, (/** @type {?} */ (state)), { entities: removed, ids: state.ids.filter(current => ids.indexOf(current) === -1) });
        if (resetActive(newState)) {
            newState.active = null;
        }
        return newState;
    }
    /**
     * @template T
     * @param {?} state
     * @return {?}
     */
    _removeAll(state) {
        /** @type {?} */
        const newState = Object.assign({}, (/** @type {?} */ (state)), { entities: {}, ids: [], active: null });
        return newState;
    }
    /**
     * @param {?} entities
     * @param {?=} entityClass
     * @param {?=} id
     * @return {?}
     */
    keyBy(entities, entityClass, id = 'id') {
        /** @type {?} */
        const acc = {};
        for (let i = 0, len = entities.length; i < len; i++) {
            /** @type {?} */
            const entity = entities[i];
            acc[entity[id]] = entityClass ? new entityClass(entity) : entity;
        }
        return acc;
    }
}
/** @type {?} */
export const _crud = new CRUD();

//# sourceMappingURL=data:application/json;base64,