/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Observable } from 'rxjs';
/**
 * Wraps the provided value in an array, unless the provided _value is an array.
 * @template T
 * @param {?} value
 * @return {?}
 */
export function coerceArray(value) {
    return Array.isArray(value) ? value : [value];
}
/**
 * Check if a value is an object
 * @param {?} value
 * @return {?}
 */
export function isObject(value) {
    return Object.prototype.toString.call(value) === '[object Object]';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isPlainObject(value) {
    return toBoolean(value) && value.constructor.name === 'Object';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isFunction(value) {
    return typeof value === 'function';
}
/**
 * @param {?} value
 * @return {?}
 */
export function toBoolean(value) {
    return value != null && `${value}` !== 'false';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isUndefined(value) {
    return typeof value === 'undefined';
}
/**
 * Check if entity exists
 * @template E
 * @param {?} id
 * @param {?} entities
 * @return {?}
 */
export function entityExists(id, entities) {
    return entities.hasOwnProperty(id);
}
/**
 * Observable that emits empty value and complete
 * @template T
 * @return {?}
 */
export function noop() {
    return new Observable(observer => {
        observer.next();
        observer.complete();
    });
}
/**
 * @param {?} value
 * @return {?}
 */
export function isObservable(value) {
    return toBoolean(value) && isFunction(value.subscribe);
}
/**
 * @param {?} val
 * @return {?}
 */
export function isString(val) {
    return typeof val === 'string';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNumber(value) {
    return typeof value === 'number';
}
/**
 * @param {?} val
 * @return {?}
 */
export function isDefined(val) {
    return val !== null && typeof val !== 'undefined';
}
/**
 * Check if the active entity exist
 * @template E
 * @param {?} state
 * @return {?}
 */
export function resetActive(state) {
    return isActiveState(state) && entityExists((/** @type {?} */ (state)).active, state.entities) === false;
}
/**
 * Check if the store supports active entity
 * @template E
 * @param {?} state
 * @return {?}
 */
export function isActiveState(state) {
    return (/** @type {?} */ (state)).hasOwnProperty('active');
}
/** *
 * setValue(state, 'todos.ui', { filter: {}})
  @type {?} */
export const setValue = (obj, prop, val) => {
    /** @type {?} */
    const split = prop.split('.');
    if (split.length === 1)
        return val;
    obj = Object.assign({}, obj);
    /** @type {?} */
    const lastIndex = split.length - 2;
    /** @type {?} */
    const removeStoreName = prop.split('.').slice(1);
    removeStoreName.reduce((acc, part, index) => {
        if (index === lastIndex) {
            acc[part] = val;
        }
        else {
            acc[part] = Object.assign({}, acc[part]);
        }
        return acc && acc[part];
    }, obj);
    return obj;
};
/** *
 * getValue(state, 'todos.ui')
  @type {?} */
export const getValue = (obj, prop) => {
    /** return the whole state  */
    if (prop.split('.').length === 1) {
        return obj;
    }
    /** @type {?} */
    const removeStoreName = prop
        .split('.')
        .slice(1)
        .join('.');
    return removeStoreName.split('.').reduce((acc, part) => acc && acc[part], obj);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEvIiwic291cmNlcyI6WyJzcmMvaW50ZXJuYWwvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7Ozs7QUFJbEMsTUFBTSxzQkFBeUIsS0FBYztJQUMzQyxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUMvQzs7Ozs7O0FBR0QsTUFBTSxtQkFBbUIsS0FBVTtJQUNqQyxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxpQkFBaUIsQ0FBQztDQUNwRTs7Ozs7QUFFRCxNQUFNLHdCQUF3QixLQUFLO0lBQ2pDLE9BQU8sU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQztDQUNoRTs7Ozs7QUFFRCxNQUFNLHFCQUFxQixLQUFLO0lBQzlCLE9BQU8sT0FBTyxLQUFLLEtBQUssVUFBVSxDQUFDO0NBQ3BDOzs7OztBQUVELE1BQU0sb0JBQW9CLEtBQVU7SUFDbEMsT0FBTyxLQUFLLElBQUksSUFBSSxJQUFJLEdBQUcsS0FBSyxFQUFFLEtBQUssT0FBTyxDQUFDO0NBQ2hEOzs7OztBQUVELE1BQU0sc0JBQXNCLEtBQUs7SUFDL0IsT0FBTyxPQUFPLEtBQUssS0FBSyxXQUFXLENBQUM7Q0FDckM7Ozs7Ozs7O0FBS0QsTUFBTSx1QkFBMEIsRUFBTSxFQUFFLFFBQW9CO0lBQzFELE9BQU8sUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNwQzs7Ozs7O0FBS0QsTUFBTTtJQUNKLE9BQU8sSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDL0IsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2hCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUNyQixDQUFDLENBQUM7Q0FDSjs7Ozs7QUFFRCxNQUFNLHVCQUF1QixLQUFLO0lBQ2hDLE9BQU8sU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDeEQ7Ozs7O0FBRUQsTUFBTSxtQkFBbUIsR0FBaUI7SUFDeEMsT0FBTyxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUM7Q0FDaEM7Ozs7O0FBRUQsTUFBTSxtQkFBbUIsS0FBSztJQUM1QixPQUFPLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQztDQUNsQzs7Ozs7QUFFRCxNQUFNLG9CQUFvQixHQUFHO0lBQzNCLE9BQU8sR0FBRyxLQUFLLElBQUksSUFBSSxPQUFPLEdBQUcsS0FBSyxXQUFXLENBQUM7Q0FDbkQ7Ozs7Ozs7QUFLRCxNQUFNLHNCQUF5QixLQUFxQjtJQUNsRCxPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxZQUFZLENBQUMsbUJBQUMsS0FBb0IsRUFBQyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssS0FBSyxDQUFDO0NBQ3RHOzs7Ozs7O0FBS0QsTUFBTSx3QkFBMkIsS0FBcUI7SUFDcEQsT0FBTyxtQkFBQyxLQUFvQixFQUFDLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQ3hEOzs7O0FBS0QsYUFBYSxRQUFRLEdBQUcsQ0FBQyxHQUFRLEVBQUUsSUFBWSxFQUFFLEdBQVEsRUFBRSxFQUFFOztJQUMzRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRTlCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQUUsT0FBTyxHQUFHLENBQUM7SUFFbkMsR0FBRyxxQkFBUSxHQUFHLENBQUUsQ0FBQzs7SUFFakIsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7O0lBQ25DLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWpELGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQzFDLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN2QixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1NBQ2pCO2FBQU07WUFDTCxHQUFHLENBQUMsSUFBSSxDQUFDLHFCQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBRSxDQUFDO1NBQzlCO1FBRUQsT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3pCLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFUixPQUFPLEdBQUcsQ0FBQztDQUNaLENBQUM7Ozs7QUFLRixhQUFhLFFBQVEsR0FBRyxDQUFDLEdBQVEsRUFBRSxJQUFZLEVBQUUsRUFBRTs7SUFFakQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDaEMsT0FBTyxHQUFHLENBQUM7S0FDWjs7SUFDRCxNQUFNLGVBQWUsR0FBRyxJQUFJO1NBQ3pCLEtBQUssQ0FBQyxHQUFHLENBQUM7U0FDVixLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ1IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsT0FBTyxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQVEsRUFBRSxJQUFZLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDN0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFjdGl2ZVN0YXRlLCBFbnRpdHlTdGF0ZSwgSGFzaE1hcCwgSUQgfSBmcm9tICcuLi9hcGkvdHlwZXMnO1xuXG4vKiogV3JhcHMgdGhlIHByb3ZpZGVkIHZhbHVlIGluIGFuIGFycmF5LCB1bmxlc3MgdGhlIHByb3ZpZGVkIF92YWx1ZSBpcyBhbiBhcnJheS4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb2VyY2VBcnJheTxUPih2YWx1ZTogVCB8IFRbXSk6IFRbXSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbn1cblxuLyoqIENoZWNrIGlmIGEgdmFsdWUgaXMgYW4gb2JqZWN0ICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QodmFsdWU6IGFueSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB0b0Jvb2xlYW4odmFsdWUpICYmIHZhbHVlLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdPYmplY3QnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSk6IHZhbHVlIGlzIEZ1bmN0aW9uIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvQm9vbGVhbih2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGAke3ZhbHVlfWAgIT09ICdmYWxzZSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBlbnRpdHkgZXhpc3RzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbnRpdHlFeGlzdHM8RT4oaWQ6IElELCBlbnRpdGllczogSGFzaE1hcDxFPikge1xuICByZXR1cm4gZW50aXRpZXMuaGFzT3duUHJvcGVydHkoaWQpO1xufVxuXG4vKipcbiAqIE9ic2VydmFibGUgdGhhdCBlbWl0cyBlbXB0eSB2YWx1ZSBhbmQgY29tcGxldGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vb3A8VD4oKTogT2JzZXJ2YWJsZTxUPiB7XG4gIHJldHVybiBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PiB7XG4gICAgb2JzZXJ2ZXIubmV4dCgpO1xuICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNPYnNlcnZhYmxlKHZhbHVlKSB7XG4gIHJldHVybiB0b0Jvb2xlYW4odmFsdWUpICYmIGlzRnVuY3Rpb24odmFsdWUuc3Vic2NyaWJlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbDogc3RyaW5nIHwgYW55KTogdmFsIGlzIHN0cmluZyB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgIT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBhY3RpdmUgZW50aXR5IGV4aXN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldEFjdGl2ZTxFPihzdGF0ZTogRW50aXR5U3RhdGU8RT4pIHtcbiAgcmV0dXJuIGlzQWN0aXZlU3RhdGUoc3RhdGUpICYmIGVudGl0eUV4aXN0cygoc3RhdGUgYXMgQWN0aXZlU3RhdGUpLmFjdGl2ZSwgc3RhdGUuZW50aXRpZXMpID09PSBmYWxzZTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgc3RvcmUgc3VwcG9ydHMgYWN0aXZlIGVudGl0eVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNBY3RpdmVTdGF0ZTxFPihzdGF0ZTogRW50aXR5U3RhdGU8RT4pIHtcbiAgcmV0dXJuIChzdGF0ZSBhcyBBY3RpdmVTdGF0ZSkuaGFzT3duUHJvcGVydHkoJ2FjdGl2ZScpO1xufVxuXG4vKipcbiAqIHNldFZhbHVlKHN0YXRlLCAndG9kb3MudWknLCB7IGZpbHRlcjoge319KVxuICovXG5leHBvcnQgY29uc3Qgc2V0VmFsdWUgPSAob2JqOiBhbnksIHByb3A6IHN0cmluZywgdmFsOiBhbnkpID0+IHtcbiAgY29uc3Qgc3BsaXQgPSBwcm9wLnNwbGl0KCcuJyk7XG5cbiAgaWYgKHNwbGl0Lmxlbmd0aCA9PT0gMSkgcmV0dXJuIHZhbDtcblxuICBvYmogPSB7IC4uLm9iaiB9O1xuXG4gIGNvbnN0IGxhc3RJbmRleCA9IHNwbGl0Lmxlbmd0aCAtIDI7XG4gIGNvbnN0IHJlbW92ZVN0b3JlTmFtZSA9IHByb3Auc3BsaXQoJy4nKS5zbGljZSgxKTtcblxuICByZW1vdmVTdG9yZU5hbWUucmVkdWNlKChhY2MsIHBhcnQsIGluZGV4KSA9PiB7XG4gICAgaWYgKGluZGV4ID09PSBsYXN0SW5kZXgpIHtcbiAgICAgIGFjY1twYXJ0XSA9IHZhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjW3BhcnRdID0geyAuLi5hY2NbcGFydF0gfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjICYmIGFjY1twYXJ0XTtcbiAgfSwgb2JqKTtcblxuICByZXR1cm4gb2JqO1xufTtcblxuLyoqXG4gKiBnZXRWYWx1ZShzdGF0ZSwgJ3RvZG9zLnVpJylcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFZhbHVlID0gKG9iajogYW55LCBwcm9wOiBzdHJpbmcpID0+IHtcbiAgLyoqIHJldHVybiB0aGUgd2hvbGUgc3RhdGUgICovXG4gIGlmIChwcm9wLnNwbGl0KCcuJykubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuICBjb25zdCByZW1vdmVTdG9yZU5hbWUgPSBwcm9wXG4gICAgLnNwbGl0KCcuJylcbiAgICAuc2xpY2UoMSlcbiAgICAuam9pbignLicpO1xuICByZXR1cm4gcmVtb3ZlU3RvcmVOYW1lLnNwbGl0KCcuJykucmVkdWNlKChhY2M6IGFueSwgcGFydDogc3RyaW5nKSA9PiBhY2MgJiYgYWNjW3BhcnRdLCBvYmopO1xufTtcbiJdfQ==