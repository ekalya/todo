/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { dirtyCheckDefaultParams, DirtyCheckPlugin } from './dirty-check-plugin';
import { EntityCollectionPlugin } from '../entity-collection-plugin';
import { map, skip } from 'rxjs/operators';
// unsupported: template constraints.
/**
 * @template E, P
 */
export class EntityDirtyCheckPlugin extends EntityCollectionPlugin {
    /**
     * @param {?} query
     * @param {?=} params
     */
    constructor(query, params = {}) {
        super(query, params.entityIds);
        this.query = query;
        this.params = params;
        this.isSomeDirty$ = this.query.select(state => state.entities)
            .pipe(map((entities) => this.checkSomeDirty(entities)));
        this.params = Object.assign({}, dirtyCheckDefaultParams, params);
        this.activate();
        this.selectIds().pipe(skip(1)).subscribe(ids => {
            this.rebase(ids, { afterAdd: plugin => plugin.setHead() });
        });
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    setHead(ids) {
        this.forEachId(ids, e => e.setHead());
        return this;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    hasHead(id) {
        if (this.entities.has(id)) {
            /** @type {?} */
            const entity = this.getEntity(id);
            return entity.hasHead();
        }
        return false;
    }
    /**
     * @param {?=} ids
     * @param {?=} params
     * @return {?}
     */
    reset(ids, params = {}) {
        this.forEachId(ids, e => e.reset(params));
    }
    /**
     * @param {?} id
     * @param {?=} asObservable
     * @return {?}
     */
    isDirty(id, asObservable = true) {
        if (this.entities.has(id)) {
            /** @type {?} */
            const entity = this.getEntity(id);
            return asObservable ? entity.isDirty$ : entity.isDirty();
        }
        return false;
    }
    /**
     * @return {?}
     */
    isSomeDirty() {
        /** @type {?} */
        const entities = this.query.getAll({ asObject: true });
        return this.checkSomeDirty(entities);
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    destroy(ids) {
        this.forEachId(ids, e => e.destroy());
    }
    /**
     * @param {?} id
     * @return {?}
     */
    instantiatePlugin(id) {
        return /** @type {?} */ (new DirtyCheckPlugin(this.query, this.params, id));
    }
    /**
     * @param {?} entities
     * @return {?}
     */
    checkSomeDirty(entities) {
        /** @type {?} */
        const entitiesIds = this.resolvedIds();
        for (const id of entitiesIds) {
            /** @type {?} */
            const dirty = this.params.comparator((/** @type {?} */ (this.getEntity(id))).getHead(), entities[id]);
            if (dirty) {
                return true;
            }
        }
        return false;
    }
}
function EntityDirtyCheckPlugin_tsickle_Closure_declarations() {
    /** @type {?} */
    EntityDirtyCheckPlugin.prototype.isSomeDirty$;
    /** @type {?} */
    EntityDirtyCheckPlugin.prototype.query;
    /** @type {?} */
    EntityDirtyCheckPlugin.prototype.params;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWRpcnR5LWNoZWNrLXBsdWdpbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkYXRvcmFtYS9ha2l0YS8iLCJzb3VyY2VzIjpbInNyYy9wbHVnaW5zL2RpcnR5LWNoZWNrL2VudGl0eS1kaXJ0eS1jaGVjay1wbHVnaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBdUIsdUJBQXVCLEVBQUUsZ0JBQWdCLEVBQXdCLE1BQU0sc0JBQXNCLENBQUM7QUFFNUgsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDbkUsT0FBTyxFQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7QUFRekMsTUFBTSw2QkFBZ0csU0FBUSxzQkFBNEI7Ozs7O0lBS3hJLFlBQXNCLEtBQTBCLEVBQW1CLFNBQXdDLEVBQUU7UUFDM0csS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFEWCxVQUFLLEdBQUwsS0FBSyxDQUFxQjtRQUFtQixXQUFNLEdBQU4sTUFBTSxDQUFvQzs0QkFIekUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO2FBQzNFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFhLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUk1RCxJQUFJLENBQUMsTUFBTSxxQkFBTyx1QkFBdUIsRUFBSyxNQUFNLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDN0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsRUFBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUMsQ0FBQyxDQUFDO1NBQzFELENBQUMsQ0FBQztLQUNKOzs7OztJQUVELE9BQU8sQ0FBQyxHQUFTO1FBQ2YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUN0QyxPQUFPLElBQUksQ0FBQztLQUNiOzs7OztJQUVELE9BQU8sQ0FBQyxFQUFNO1FBQ1osSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRTs7WUFDekIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNsQyxPQUFPLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUN6QjtRQUVELE9BQU8sS0FBSyxDQUFDO0tBQ2Q7Ozs7OztJQUVELEtBQUssQ0FBQyxHQUFTLEVBQUUsU0FBZ0MsRUFBRTtRQUNqRCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztLQUMzQzs7Ozs7O0lBS0QsT0FBTyxDQUFDLEVBQU0sRUFBRSxZQUFZLEdBQUcsSUFBSTtRQUNqQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFOztZQUN6QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2xDLE9BQU8sWUFBWSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDMUQ7UUFFRCxPQUFPLEtBQUssQ0FBQztLQUNkOzs7O0lBRUQsV0FBVzs7UUFDVCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQ3JELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN0Qzs7Ozs7SUFFRCxPQUFPLENBQUMsR0FBUztRQUNmLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7S0FDdkM7Ozs7O0lBRVMsaUJBQWlCLENBQUMsRUFBTTtRQUNoQyx5QkFBTyxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQU0sRUFBQztLQUMvRDs7Ozs7SUFFTyxjQUFjLENBQUMsUUFBb0I7O1FBQ3pDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN2QyxLQUFLLE1BQU0sRUFBRSxJQUFJLFdBQVcsRUFBRTs7WUFDNUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsbUJBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQVEsRUFBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzFGLElBQUksS0FBSyxFQUFFO2dCQUNULE9BQU8sSUFBSSxDQUFDO2FBQ2I7U0FDRjtRQUNELE9BQU8sS0FBSyxDQUFDOztDQUVoQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SGFzaE1hcCwgSUQsIElEU30gZnJvbSAnLi4vLi4vYXBpL3R5cGVzJztcbmltcG9ydCB7RGlydHlDaGVja0NvbXBhcmF0b3IsIGRpcnR5Q2hlY2tEZWZhdWx0UGFyYW1zLCBEaXJ0eUNoZWNrUGx1Z2luLCBEaXJ0eUNoZWNrUmVzZXRQYXJhbXN9IGZyb20gJy4vZGlydHktY2hlY2stcGx1Z2luJztcbmltcG9ydCB7UXVlcnlFbnRpdHl9IGZyb20gJy4uLy4uL2FwaS9xdWVyeS1lbnRpdHknO1xuaW1wb3J0IHtFbnRpdHlDb2xsZWN0aW9uUGx1Z2lufSBmcm9tICcuLi9lbnRpdHktY29sbGVjdGlvbi1wbHVnaW4nO1xuaW1wb3J0IHttYXAsIHNraXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCB0eXBlIERpcnR5Q2hlY2tDb2xsZWN0aW9uUGFyYW1zPEU+ID0ge1xuICBjb21wYXJhdG9yPzogRGlydHlDaGVja0NvbXBhcmF0b3I8RT47XG4gIGVudGl0eUlkcz86IElEIHwgSURbXTtcbn07XG5cbmV4cG9ydCBjbGFzcyBFbnRpdHlEaXJ0eUNoZWNrUGx1Z2luPEUsIFAgZXh0ZW5kcyBEaXJ0eUNoZWNrUGx1Z2luPEUsIGFueT4gPSBEaXJ0eUNoZWNrUGx1Z2luPEUsIGFueT4+IGV4dGVuZHMgRW50aXR5Q29sbGVjdGlvblBsdWdpbjxFLCBQPiB7XG5cbiAgaXNTb21lRGlydHkkOiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0gdGhpcy5xdWVyeS5zZWxlY3Qoc3RhdGUgPT4gc3RhdGUuZW50aXRpZXMpXG4gICAgLnBpcGUobWFwKChlbnRpdGllczogYW55KSA9PiB0aGlzLmNoZWNrU29tZURpcnR5KGVudGl0aWVzKSkpO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBxdWVyeTogUXVlcnlFbnRpdHk8YW55LCBFPiwgcHJpdmF0ZSByZWFkb25seSBwYXJhbXM6IERpcnR5Q2hlY2tDb2xsZWN0aW9uUGFyYW1zPEU+ID0ge30pIHtcbiAgICBzdXBlcihxdWVyeSwgcGFyYW1zLmVudGl0eUlkcyk7XG4gICAgdGhpcy5wYXJhbXMgPSB7Li4uZGlydHlDaGVja0RlZmF1bHRQYXJhbXMsIC4uLnBhcmFtc307XG4gICAgdGhpcy5hY3RpdmF0ZSgpO1xuICAgIHRoaXMuc2VsZWN0SWRzKCkucGlwZShza2lwKDEpKS5zdWJzY3JpYmUoaWRzID0+IHtcbiAgICAgIHRoaXMucmViYXNlKGlkcywge2FmdGVyQWRkOiBwbHVnaW4gPT4gcGx1Z2luLnNldEhlYWQoKX0pO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0SGVhZChpZHM/OiBJRFMpIHtcbiAgICB0aGlzLmZvckVhY2hJZChpZHMsIGUgPT4gZS5zZXRIZWFkKCkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgaGFzSGVhZChpZDogSUQpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5lbnRpdGllcy5oYXMoaWQpKSB7XG4gICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmdldEVudGl0eShpZCk7XG4gICAgICByZXR1cm4gZW50aXR5Lmhhc0hlYWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXNldChpZHM/OiBJRFMsIHBhcmFtczogRGlydHlDaGVja1Jlc2V0UGFyYW1zID0ge30pIHtcbiAgICB0aGlzLmZvckVhY2hJZChpZHMsIGUgPT4gZS5yZXNldChwYXJhbXMpKTtcbiAgfVxuXG4gIGlzRGlydHkoaWQ6IElEKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgaXNEaXJ0eShpZDogSUQsIGFzT2JzZXJ2YWJsZTogdHJ1ZSk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gIGlzRGlydHkoaWQ6IElELCBhc09ic2VydmFibGU6IGZhbHNlKTogYm9vbGVhbjtcbiAgaXNEaXJ0eShpZDogSUQsIGFzT2JzZXJ2YWJsZSA9IHRydWUpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHwgYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuZW50aXRpZXMuaGFzKGlkKSkge1xuICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5nZXRFbnRpdHkoaWQpO1xuICAgICAgcmV0dXJuIGFzT2JzZXJ2YWJsZSA/IGVudGl0eS5pc0RpcnR5JCA6IGVudGl0eS5pc0RpcnR5KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaXNTb21lRGlydHkoKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZW50aXRpZXMgPSB0aGlzLnF1ZXJ5LmdldEFsbCh7YXNPYmplY3Q6IHRydWV9KTtcbiAgICByZXR1cm4gdGhpcy5jaGVja1NvbWVEaXJ0eShlbnRpdGllcyk7XG4gIH1cblxuICBkZXN0cm95KGlkcz86IElEUykge1xuICAgIHRoaXMuZm9yRWFjaElkKGlkcywgZSA9PiBlLmRlc3Ryb3koKSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgaW5zdGFudGlhdGVQbHVnaW4oaWQ6IElEKTogUCB7XG4gICAgcmV0dXJuIG5ldyBEaXJ0eUNoZWNrUGx1Z2luKHRoaXMucXVlcnksIHRoaXMucGFyYW1zLCBpZCkgYXMgUDtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tTb21lRGlydHkoZW50aXRpZXM6IEhhc2hNYXA8RT4pOiBib29sZWFuIHtcbiAgICBjb25zdCBlbnRpdGllc0lkcyA9IHRoaXMucmVzb2x2ZWRJZHMoKTtcbiAgICBmb3IgKGNvbnN0IGlkIG9mIGVudGl0aWVzSWRzKSB7XG4gICAgICBjb25zdCBkaXJ0eSA9IHRoaXMucGFyYW1zLmNvbXBhcmF0b3IoKHRoaXMuZ2V0RW50aXR5KGlkKSBhcyBhbnkpLmdldEhlYWQoKSwgZW50aXRpZXNbaWRdKTtcbiAgICAgIGlmIChkaXJ0eSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iXX0=