/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { StateHistoryPlugin } from './state-history-plugin';
import { toBoolean } from '../../internal/utils';
import { skip } from 'rxjs/operators';
import { EntityCollectionPlugin } from '../entity-collection-plugin';
/**
 * @record
 */
export function StateHistoryEntityParams() { }
function StateHistoryEntityParams_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    StateHistoryEntityParams.prototype.entityIds;
}
// unsupported: template constraints.
/**
 * @template E, P
 */
export class EntityStateHistoryPlugin extends EntityCollectionPlugin {
    /**
     * @param {?} query
     * @param {?=} params
     */
    constructor(query, params = {}) {
        super(query, params.entityIds);
        this.query = query;
        this.params = params;
        params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;
        this.activate();
        this.selectIds()
            .pipe(skip(1))
            .subscribe(ids => this.activate(ids));
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    redo(ids) {
        this.forEachId(ids, e => e.redo());
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    undo(ids) {
        this.forEachId(ids, e => e.undo());
    }
    /**
     * @param {?} id
     * @return {?}
     */
    hasPast(id) {
        if (this.hasEntity(id)) {
            return this.getEntity(id).hasPast;
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    hasFuture(id) {
        if (this.hasEntity(id)) {
            return this.getEntity(id).hasFuture;
        }
    }
    /**
     * @param {?} ids
     * @param {?} index
     * @return {?}
     */
    jumpToFuture(ids, index) {
        this.forEachId(ids, e => e.jumpToFuture(index));
    }
    /**
     * @param {?} ids
     * @param {?} index
     * @return {?}
     */
    jumpToPast(ids, index) {
        this.forEachId(ids, e => e.jumpToPast(index));
    }
    /**
     * @param {?=} ids
     * @return {?}
     */
    clear(ids) {
        this.forEachId(ids, e => e.clear());
    }
    /**
     * @param {?=} ids
     * @param {?=} clearHistory
     * @return {?}
     */
    destroy(ids, clearHistory = false) {
        this.forEachId(ids, e => e.destroy(clearHistory));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    instantiatePlugin(id) {
        return /** @type {?} */ (new StateHistoryPlugin(this.query, this.params, id));
    }
}
function EntityStateHistoryPlugin_tsickle_Closure_declarations() {
    /** @type {?} */
    EntityStateHistoryPlugin.prototype.query;
    /** @type {?} */
    EntityStateHistoryPlugin.prototype.params;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LXN0YXRlLWhpc3RvcnktcGx1Z2luLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRhdG9yYW1hL2FraXRhLyIsInNvdXJjZXMiOlsic3JjL3BsdWdpbnMvc3RhdGUtaGlzdG9yeS9lbnRpdHktc3RhdGUtaGlzdG9yeS1wbHVnaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE9BQU8sRUFBRSxrQkFBa0IsRUFBc0IsTUFBTSx3QkFBd0IsQ0FBQztBQUNoRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RDLE9BQU8sRUFBRSxzQkFBc0IsRUFBMEIsTUFBTSw2QkFBNkIsQ0FBQzs7Ozs7Ozs7Ozs7OztBQU03RixNQUFNLCtCQUFzRyxTQUFRLHNCQUE0Qjs7Ozs7SUFDOUksWUFBc0IsS0FBMEIsRUFBcUIsU0FBbUMsRUFBRTtRQUN4RyxLQUFLLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQURYLFVBQUssR0FBTCxLQUFLLENBQXFCO1FBQXFCLFdBQU0sR0FBTixNQUFNLENBQStCO1FBRXhHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzlELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsU0FBUyxFQUFFO2FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNiLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUN6Qzs7Ozs7SUFFRCxJQUFJLENBQUMsR0FBUztRQUNaLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7S0FDcEM7Ozs7O0lBRUQsSUFBSSxDQUFDLEdBQVM7UUFDWixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0tBQ3BDOzs7OztJQUVELE9BQU8sQ0FBQyxFQUFNO1FBQ1osSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUM7U0FDbkM7S0FDRjs7Ozs7SUFFRCxTQUFTLENBQUMsRUFBTTtRQUNkLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN0QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDO1NBQ3JDO0tBQ0Y7Ozs7OztJQUVELFlBQVksQ0FBQyxHQUFRLEVBQUUsS0FBYTtRQUNsQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUNqRDs7Ozs7O0lBRUQsVUFBVSxDQUFDLEdBQVEsRUFBRSxLQUFhO1FBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0tBQy9DOzs7OztJQUVELEtBQUssQ0FBQyxHQUFTO1FBQ2IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUNyQzs7Ozs7O0lBRUQsT0FBTyxDQUFDLEdBQVMsRUFBRSxZQUFZLEdBQUcsS0FBSztRQUNyQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztLQUNuRDs7Ozs7SUFFUyxpQkFBaUIsQ0FBQyxFQUFNO1FBQ2hDLHlCQUFPLElBQUksa0JBQWtCLENBQVMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBTSxFQUFDO0tBQ3pFO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRCwgSURTIH0gZnJvbSAnLi4vLi4vYXBpL3R5cGVzJztcbmltcG9ydCB7IFF1ZXJ5RW50aXR5IH0gZnJvbSAnLi4vLi4vYXBpL3F1ZXJ5LWVudGl0eSc7XG5pbXBvcnQgeyBTdGF0ZUhpc3RvcnlQbHVnaW4sIFN0YXRlSGlzdG9yeVBhcmFtcyB9IGZyb20gJy4vc3RhdGUtaGlzdG9yeS1wbHVnaW4nO1xuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vLi4vaW50ZXJuYWwvdXRpbHMnO1xuaW1wb3J0IHsgc2tpcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEVudGl0eUNvbGxlY3Rpb25QbHVnaW4sIEVudGl0eUNvbGxlY3Rpb25QYXJhbXMgfSBmcm9tICcuLi9lbnRpdHktY29sbGVjdGlvbi1wbHVnaW4nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRlSGlzdG9yeUVudGl0eVBhcmFtcyBleHRlbmRzIFN0YXRlSGlzdG9yeVBhcmFtcyB7XG4gIGVudGl0eUlkcz86IEVudGl0eUNvbGxlY3Rpb25QYXJhbXM7XG59XG5cbmV4cG9ydCBjbGFzcyBFbnRpdHlTdGF0ZUhpc3RvcnlQbHVnaW48RSwgUCBleHRlbmRzIFN0YXRlSGlzdG9yeVBsdWdpbjxFLCBhbnk+ID0gU3RhdGVIaXN0b3J5UGx1Z2luPEUsIGFueT4+IGV4dGVuZHMgRW50aXR5Q29sbGVjdGlvblBsdWdpbjxFLCBQPiB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBxdWVyeTogUXVlcnlFbnRpdHk8YW55LCBFPiwgcHJvdGVjdGVkIHJlYWRvbmx5IHBhcmFtczogU3RhdGVIaXN0b3J5RW50aXR5UGFyYW1zID0ge30pIHtcbiAgICBzdXBlcihxdWVyeSwgcGFyYW1zLmVudGl0eUlkcyk7XG4gICAgcGFyYW1zLm1heEFnZSA9IHRvQm9vbGVhbihwYXJhbXMubWF4QWdlKSA/IHBhcmFtcy5tYXhBZ2UgOiAxMDtcbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgdGhpcy5zZWxlY3RJZHMoKVxuICAgICAgLnBpcGUoc2tpcCgxKSlcbiAgICAgIC5zdWJzY3JpYmUoaWRzID0+IHRoaXMuYWN0aXZhdGUoaWRzKSk7XG4gIH1cblxuICByZWRvKGlkcz86IElEUykge1xuICAgIHRoaXMuZm9yRWFjaElkKGlkcywgZSA9PiBlLnJlZG8oKSk7XG4gIH1cblxuICB1bmRvKGlkcz86IElEUykge1xuICAgIHRoaXMuZm9yRWFjaElkKGlkcywgZSA9PiBlLnVuZG8oKSk7XG4gIH1cblxuICBoYXNQYXN0KGlkOiBJRCkge1xuICAgIGlmICh0aGlzLmhhc0VudGl0eShpZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEVudGl0eShpZCkuaGFzUGFzdDtcbiAgICB9XG4gIH1cblxuICBoYXNGdXR1cmUoaWQ6IElEKSB7XG4gICAgaWYgKHRoaXMuaGFzRW50aXR5KGlkKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RW50aXR5KGlkKS5oYXNGdXR1cmU7XG4gICAgfVxuICB9XG5cbiAganVtcFRvRnV0dXJlKGlkczogSURTLCBpbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy5mb3JFYWNoSWQoaWRzLCBlID0+IGUuanVtcFRvRnV0dXJlKGluZGV4KSk7XG4gIH1cblxuICBqdW1wVG9QYXN0KGlkczogSURTLCBpbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy5mb3JFYWNoSWQoaWRzLCBlID0+IGUuanVtcFRvUGFzdChpbmRleCkpO1xuICB9XG5cbiAgY2xlYXIoaWRzPzogSURTKSB7XG4gICAgdGhpcy5mb3JFYWNoSWQoaWRzLCBlID0+IGUuY2xlYXIoKSk7XG4gIH1cblxuICBkZXN0cm95KGlkcz86IElEUywgY2xlYXJIaXN0b3J5ID0gZmFsc2UpIHtcbiAgICB0aGlzLmZvckVhY2hJZChpZHMsIGUgPT4gZS5kZXN0cm95KGNsZWFySGlzdG9yeSkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGluc3RhbnRpYXRlUGx1Z2luKGlkOiBJRCkge1xuICAgIHJldHVybiBuZXcgU3RhdGVIaXN0b3J5UGx1Z2luPEUsIGFueT4odGhpcy5xdWVyeSwgdGhpcy5wYXJhbXMsIGlkKSBhcyBQO1xuICB9XG59XG4iXX0=