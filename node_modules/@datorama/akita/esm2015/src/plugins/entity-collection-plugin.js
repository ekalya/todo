/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { coerceArray, isFunction, isUndefined, toBoolean } from '../internal/utils';
const ɵ0 = plugin => plugin.destroy();
/** @type {?} */
const defaultActions = { beforeRemove: ɵ0 };
/**
 * @abstract
 * @template E, P
 */
export class EntityCollectionPlugin {
    /**
     * @param {?} query
     * @param {?} entityIds
     */
    constructor(query, entityIds) {
        this.query = query;
        this.entityIds = entityIds;
        this.entities = new Map();
    }
    /**
     * Get the entity plugin instance.
     * @param {?} id
     * @return {?}
     */
    getEntity(id) {
        return this.entities.get(id);
    }
    /**
     * Whether the entity plugin exist.
     * @param {?} id
     * @return {?}
     */
    hasEntity(id) {
        return this.entities.has(id);
    }
    /**
     * Remove the entity plugin instance.
     * @param {?} id
     * @return {?}
     */
    removeEntity(id) {
        return this.entities.delete(id);
    }
    /**
     * Set the entity plugin instance.
     * @param {?} id
     * @param {?} plugin
     * @return {?}
     */
    createEntity(id, plugin) {
        return this.entities.set(id, plugin);
    }
    /**
     * If the user passes `entityIds` we take them; otherwise, we take all.
     * @return {?}
     */
    getIds() {
        return isUndefined(this.entityIds) ? this.query.getSnapshot().ids : coerceArray(this.entityIds);
    }
    /**
     * When you call one of the plugin methods, you can pass id/ids or undefined which means all.
     * @param {?=} ids
     * @return {?}
     */
    resolvedIds(ids) {
        return isUndefined(ids) ? this.getIds() : coerceArray(ids);
    }
    /**
     * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.
     *
     * For example in your plugin you may do the following:
     *
     * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));
     * @param {?} ids
     * @param {?=} actions
     * @return {?}
     */
    rebase(ids, actions = defaultActions) {
        /**
             *
             * If the user passes `entityIds` & we have new ids check if we need to add/remove instances.
             *
             * This phase will be called only upon update.
             */
        if (toBoolean(ids)) {
            /**
                   * Which means all
                   */
            if (isUndefined(this.entityIds)) {
                for (let i = 0, len = ids.length; i < len; i++) {
                    /** @type {?} */
                    const entityId = ids[i];
                    if (this.hasEntity(entityId) === false) {
                        isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);
                        /** @type {?} */
                        const plugin = this.instantiatePlugin(entityId);
                        this.entities.set(entityId, plugin);
                        isFunction(actions.afterAdd) && actions.afterAdd(plugin);
                    }
                }
                this.entities.forEach((plugin, entityId) => {
                    if (ids.indexOf(entityId) === -1) {
                        isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);
                        this.removeEntity(entityId);
                    }
                });
            }
            else {
                /** *
                 * Which means the user passes specific ids
                  @type {?} */
                const _ids = coerceArray(this.entityIds);
                for (let i = 0, len = _ids.length; i < len; i++) {
                    /** @type {?} */
                    const entityId = _ids[i];
                    /** The Entity in current ids and doesn't exist, add it. */
                    if (ids.indexOf(entityId) > -1 && this.hasEntity(entityId) === false) {
                        isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);
                        /** @type {?} */
                        const plugin = this.instantiatePlugin(entityId);
                        this.entities.set(entityId, plugin);
                        isFunction(actions.afterAdd) && actions.afterAdd(plugin);
                    }
                    else {
                        this.entities.forEach((plugin, entityId) => {
                            /** The Entity not in current ids and exists, remove it. */
                            if (ids.indexOf(entityId) === -1 && this.hasEntity(entityId) === true) {
                                isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);
                                this.removeEntity(entityId);
                            }
                        });
                    }
                }
            }
        }
        else {
            /**
                   * Otherwise, start with the provided ids or all.
                   */
            this.getIds().forEach(id => {
                if (!this.hasEntity(id))
                    this.createEntity(id, this.instantiatePlugin(id));
            });
        }
    }
    /**
     * Listen for add/remove entities.
     * @return {?}
     */
    selectIds() {
        return this.query.select(state => state.ids);
    }
    /**
     * Base method for activation, you can override it if you need to.
     * @param {?=} ids
     * @return {?}
     */
    activate(ids) {
        this.rebase(ids);
    }
    /**
     * Loop over each id and invoke the plugin method.
     * @param {?} ids
     * @param {?} cb
     * @return {?}
     */
    forEachId(ids, cb) {
        /** @type {?} */
        const _ids = this.resolvedIds(ids);
        for (let i = 0, len = _ids.length; i < len; i++) {
            /** @type {?} */
            const id = _ids[i];
            if (this.hasEntity(id)) {
                cb(this.getEntity(id));
            }
        }
    }
}
function EntityCollectionPlugin_tsickle_Closure_declarations() {
    /** @type {?} */
    EntityCollectionPlugin.prototype.entities;
    /** @type {?} */
    EntityCollectionPlugin.prototype.query;
    /** @type {?} */
    EntityCollectionPlugin.prototype.entityIds;
    /**
     * This method is responsible for plugin instantiation.
     *
     * For example:
     * return new StateHistory(this.query, this.params, id) as P;
     * @abstract
     * @param {?} id
     * @return {?}
     */
    EntityCollectionPlugin.prototype.instantiatePlugin = function (id) { };
    /**
     * This method is responsible for cleaning.
     * @abstract
     * @param {?=} id
     * @return {?}
     */
    EntityCollectionPlugin.prototype.destroy = function (id) { };
}
export { ɵ0 };

//# sourceMappingURL=data:application/json;base64,