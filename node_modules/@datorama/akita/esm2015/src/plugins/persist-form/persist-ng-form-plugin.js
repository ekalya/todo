/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { AkitaPlugin } from '../plugin';
import { debounceTime } from 'rxjs/operators';
import { __globalState } from '../../internal/global-state';
import { getValue, isString, setValue } from '../../internal/utils';
/**
 * @template T
 */
export class PersistNgFormPlugin extends AkitaPlugin {
    /**
     * @param {?} query
     * @param {?} factoryFnOrPath
     * @param {?=} params
     */
    constructor(query, factoryFnOrPath, params = {}) {
        super(query);
        this.query = query;
        this.factoryFnOrPath = factoryFnOrPath;
        this.params = params;
        this.params = Object.assign({ debounceTime: 300, formKey: 'akitaForm', emitEvent: false }, params);
        this.isKeyBased = isString(factoryFnOrPath);
    }
    /**
     * @param {?} form
     * @return {?}
     */
    setForm(form) {
        this.form = form;
        this.activate();
        return this;
    }
    /**
     * @param {?=} initialState
     * @return {?}
     */
    reset(initialState) {
        /** @type {?} */
        let value;
        if (initialState) {
            value = initialState;
        }
        else {
            value = this.isKeyBased ? this.initialValue : (/** @type {?} */ (this)).factoryFnOrPath();
        }
        this.form.patchValue(value);
        /** @type {?} */
        const storeValue = this.isKeyBased ? setValue(this.getStore()._value(), `${this.getStore().storeName}.${this.factoryFnOrPath}`, value) : { [this.params.formKey]: value };
        this.updateStore(storeValue);
    }
    /**
     * @return {?}
     */
    activate() {
        /** @type {?} */
        let path;
        if (this.isKeyBased) {
            path = `${this.getStore().storeName}.${this.factoryFnOrPath}`;
            this.initialValue = getValue(this.getStore()._value(), path);
            this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });
        }
        else {
            if (!(/** @type {?} */ (this.getQuery().getSnapshot()))[this.params.formKey]) {
                __globalState.setAction({ type: '@PersistNgFormPlugin activate' });
                this.updateStore({ [this.params.formKey]: (/** @type {?} */ (this)).factoryFnOrPath() });
            }
            this.query.selectOnce(state => (/** @type {?} */ (state))[this.params.formKey]).subscribe(formValue => this.form.patchValue(formValue));
        }
        this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe(value => {
            __globalState.setAction({ type: '@PersistForm - Update' });
            /** @type {?} */
            let newState;
            if (this.isKeyBased) {
                newState = state => setValue(state, path, value);
            }
            else {
                newState = () => ({ [this.params.formKey]: value });
            }
            this.updateStore(newState(this.getStore()._value()));
        });
    }
    /**
     * @return {?}
     */
    destroy() {
        this.formChanges && this.formChanges.unsubscribe();
    }
}
function PersistNgFormPlugin_tsickle_Closure_declarations() {
    /** @type {?} */
    PersistNgFormPlugin.prototype.formChanges;
    /** @type {?} */
    PersistNgFormPlugin.prototype.form;
    /** @type {?} */
    PersistNgFormPlugin.prototype.isKeyBased;
    /** @type {?} */
    PersistNgFormPlugin.prototype.initialValue;
    /** @type {?} */
    PersistNgFormPlugin.prototype.query;
    /** @type {?} */
    PersistNgFormPlugin.prototype.factoryFnOrPath;
    /** @type {?} */
    PersistNgFormPlugin.prototype.params;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc2lzdC1uZy1mb3JtLXBsdWdpbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkYXRvcmFtYS9ha2l0YS8iLCJzb3VyY2VzIjpbInNyYy9wbHVnaW5zL3BlcnNpc3QtZm9ybS9wZXJzaXN0LW5nLWZvcm0tcGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBR3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7QUFrQnBFLE1BQU0sMEJBQW9DLFNBQVEsV0FBVzs7Ozs7O0lBTTNELFlBQXNCLEtBQWlCLEVBQVUsZUFBa0MsRUFBVSxTQUE0QixFQUFFO1FBQ3pILEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQURPLFVBQUssR0FBTCxLQUFLLENBQVk7UUFBVSxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUF3QjtRQUV6SCxJQUFJLENBQUMsTUFBTSxpQkFBUSxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEVBQUssTUFBTSxDQUFFLENBQUM7UUFDOUYsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDN0M7Ozs7O0lBRUQsT0FBTyxDQUFDLElBQW1CO1FBQ3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQixPQUFPLElBQUksQ0FBQztLQUNiOzs7OztJQUVELEtBQUssQ0FBQyxZQUFnQjs7UUFDcEIsSUFBSSxLQUFLLENBQUM7UUFDVixJQUFJ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RUFBRSxDQUFDLENBQUM7YUFDckQ7WUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3RELENBQUMsQ0FBQzs7Ozs7SUFHTCxPQUFPO1FBQ0wsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO0tBQ3BEO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBa2l0YVBsdWdpbiB9IGZyb20gJy4uL3BsdWdpbic7XG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gJy4uLy4uL2FwaS9xdWVyeSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IF9fZ2xvYmFsU3RhdGUgfSBmcm9tICcuLi8uLi9pbnRlcm5hbC9nbG9iYWwtc3RhdGUnO1xuaW1wb3J0IHsgZ2V0VmFsdWUsIGlzU3RyaW5nLCBzZXRWYWx1ZSB9IGZyb20gJy4uLy4uL2ludGVybmFsL3V0aWxzJztcblxuZXhwb3J0IHR5cGUgRm9ybUdyb3VwTGlrZSA9IHtcbiAgcGF0Y2hWYWx1ZTogRnVuY3Rpb247XG4gIHNldFZhbHVlOiBGdW5jdGlvbjtcbiAgdmFsdWVDaGFuZ2VzOiBPYnNlcnZhYmxlPGFueT47XG59O1xuXG5leHBvcnQgdHlwZSBBa2l0YUZvcm1Qcm9wPFQ+ID0ge1xuICBba2V5OiBzdHJpbmddOiBUO1xufTtcblxuZXhwb3J0IHR5cGUgUGVyc2lzdEZvcm1QYXJhbXMgPSB7XG4gIGRlYm91bmNlVGltZT86IG51bWJlcjtcbiAgZm9ybUtleT86IHN0cmluZztcbiAgZW1pdEV2ZW50PzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBjbGFzcyBQZXJzaXN0TmdGb3JtUGx1Z2luPFQgPSBhbnk+IGV4dGVuZHMgQWtpdGFQbHVnaW4ge1xuICBmb3JtQ2hhbmdlczogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIGZvcm06IEZvcm1Hcm91cExpa2U7XG4gIHByaXZhdGUgaXNLZXlCYXNlZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBpbml0aWFsVmFsdWU7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHF1ZXJ5OiBRdWVyeTxhbnk+LCBwcml2YXRlIGZhY3RvcnlGbk9yUGF0aDogRnVuY3Rpb24gfCBzdHJpbmcsIHByaXZhdGUgcGFyYW1zOiBQZXJzaXN0Rm9ybVBhcmFtcyA9IHt9KSB7XG4gICAgc3VwZXIocXVlcnkpO1xuICAgIHRoaXMucGFyYW1zID0geyAuLi57IGRlYm91bmNlVGltZTogMzAwLCBmb3JtS2V5OiAnYWtpdGFGb3JtJywgZW1pdEV2ZW50OiBmYWxzZSB9LCAuLi5wYXJhbXMgfTtcbiAgICB0aGlzLmlzS2V5QmFzZWQgPSBpc1N0cmluZyhmYWN0b3J5Rm5PclBhdGgpO1xuICB9XG5cbiAgc2V0Rm9ybShmb3JtOiBGb3JtR3JvdXBMaWtlKSB7XG4gICAgdGhpcy5mb3JtID0gZm9ybTtcbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXNldChpbml0aWFsU3RhdGU/OiBUKSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIGlmIChpbml0aWFsU3RhdGUpIHtcbiAgICAgIHZhbHVlID0gaW5pdGlhbFN0YXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuaXNLZXlCYXNlZCA/IHRoaXMuaW5pdGlhbFZhbHVlIDogKHRoaXMgYXMgYW55KS5mYWN0b3J5Rm5PclBhdGgoKTtcbiAgICB9XG5cbiAgICB0aGlzLmZvcm0ucGF0Y2hWYWx1ZSh2YWx1ZSk7XG5cbiAgICBjb25zdCBzdG9yZVZhbHVlID0gdGhpcy5pc0tleUJhc2VkID8gc2V0VmFsdWUodGhpcy5nZXRTdG9yZSgpLl92YWx1ZSgpLCBgJHt0aGlzLmdldFN0b3JlKCkuc3RvcmVOYW1lfS4ke3RoaXMuZmFjdG9yeUZuT3JQYXRofWAsIHZhbHVlKSA6IHsgW3RoaXMucGFyYW1zLmZvcm1LZXldOiB2YWx1ZSB9O1xuICAgIHRoaXMudXBkYXRlU3RvcmUoc3RvcmVWYWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIGFjdGl2YXRlKCkge1xuICAgIGxldCBwYXRoO1xuXG4gICAgaWYgKHRoaXMuaXNLZXlCYXNlZCkge1xuICAgICAgcGF0aCA9IGAke3RoaXMuZ2V0U3RvcmUoKS5zdG9yZU5hbWV9LiR7dGhpcy5mYWN0b3J5Rm5PclBhdGh9YDtcbiAgICAgIHRoaXMuaW5pdGlhbFZhbHVlID0gZ2V0VmFsdWUodGhpcy5nZXRTdG9yZSgpLl92YWx1ZSgpLCBwYXRoKTtcbiAgICAgIHRoaXMuZm9ybS5wYXRjaFZhbHVlKHRoaXMuaW5pdGlhbFZhbHVlLCB7IGVtaXRFdmVudDogdGhpcy5wYXJhbXMuZW1pdEV2ZW50IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoISh0aGlzLmdldFF1ZXJ5KCkuZ2V0U25hcHNob3QoKSBhcyBBa2l0YUZvcm1Qcm9wPFQ+KVt0aGlzLnBhcmFtcy5mb3JtS2V5XSkge1xuICAgICAgICBfX2dsb2JhbFN0YXRlLnNldEFjdGlvbih7IHR5cGU6ICdAUGVyc2lzdE5nRm9ybVBsdWdpbiBhY3RpdmF0ZScgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlU3RvcmUoeyBbdGhpcy5wYXJhbXMuZm9ybUtleV06ICh0aGlzIGFzIGFueSkuZmFjdG9yeUZuT3JQYXRoKCkgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucXVlcnkuc2VsZWN0T25jZShzdGF0ZSA9PiAoc3RhdGUgYXMgQWtpdGFGb3JtUHJvcDxUPilbdGhpcy5wYXJhbXMuZm9ybUtleV0pLnN1YnNjcmliZShmb3JtVmFsdWUgPT4gdGhpcy5mb3JtLnBhdGNoVmFsdWUoZm9ybVZhbHVlKSk7XG4gICAgfVxuXG4gICAgdGhpcy5mb3JtQ2hhbmdlcyA9IHRoaXMuZm9ybS52YWx1ZUNoYW5nZXMucGlwZShkZWJvdW5jZVRpbWUodGhpcy5wYXJhbXMuZGVib3VuY2VUaW1lKSkuc3Vic2NyaWJlKHZhbHVlID0+IHtcbiAgICAgIF9fZ2xvYmFsU3RhdGUuc2V0QWN0aW9uKHsgdHlwZTogJ0BQZXJzaXN0Rm9ybSAtIFVwZGF0ZScgfSk7XG4gICAgICBsZXQgbmV3U3RhdGU7XG4gICAgICBpZiAodGhpcy5pc0tleUJhc2VkKSB7XG4gICAgICAgIG5ld1N0YXRlID0gc3RhdGUgPT4gc2V0VmFsdWUoc3RhdGUsIHBhdGgsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1N0YXRlID0gKCkgPT4gKHsgW3RoaXMucGFyYW1zLmZvcm1LZXldOiB2YWx1ZSB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlU3RvcmUobmV3U3RhdGUodGhpcy5nZXRTdG9yZSgpLl92YWx1ZSgpKSk7XG4gICAgfSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZm9ybUNoYW5nZXMgJiYgdGhpcy5mb3JtQ2hhbmdlcy51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=