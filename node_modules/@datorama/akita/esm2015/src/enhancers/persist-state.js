/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { AkitaError } from '../internal/error';
import { __stores__, rootDispatcher } from '../api/store';
import { skip } from 'rxjs/operators';
import { getValue, setValue } from '../internal/utils';
import { __globalState } from '../internal/global-state';
/** @type {?} */
const notBs = typeof localStorage === 'undefined';
/**
 * @record
 */
export function PersistStateParams() { }
function PersistStateParams_tsickle_Closure_declarations() {
    /**
     * The storage key
     * @type {?}
     */
    PersistStateParams.prototype.key;
    /**
     * Storage strategy to use. This defaults to LocalStorage but you can pass SessionStorage or anything that implements the StorageEngine API.
     * @type {?}
     */
    PersistStateParams.prototype.storage;
    /**
     * Custom deserializer. Defaults to JSON.parse
     * @type {?}
     */
    PersistStateParams.prototype.deserialize;
    /**
     * Custom serializer, defaults to JSON.stringify
     * @type {?}
     */
    PersistStateParams.prototype.serialize;
    /**
     * By default the whole state is saved to storage, use this param to include only the stores you need.
     * Pay attention that you can't use both include and exclude
     * @type {?}
     */
    PersistStateParams.prototype.include;
    /**
     *  By default the whole state is saved to storage, use this param to exclude stores that you don't need.
     *  Pay attention that you can't use both include and exclude
     * @type {?}
     */
    PersistStateParams.prototype.exclude;
}
/**
 * @param {?=} params
 * @return {?}
 */
export function persistState(params) {
    if (notBs)
        return;
    /** @type {?} */
    const defaults = {
        key: 'AkitaStores',
        storage: localStorage,
        deserialize: JSON.parse,
        serialize: JSON.stringify,
        include: [],
        exclude: []
    };
    const { storage, deserialize, serialize, include, exclude, key } = Object.assign({}, defaults, params);
    /** @type {?} */
    const hasInclude = include.length > 0;
    /** @type {?} */
    const hasExclude = exclude.length > 0;
    if (hasInclude && hasExclude) {
        throw new AkitaError("You can't use both include and exclude");
    }
    /** @type {?} */
    const storageState = deserialize(storage.getItem(key) || '{}');
    /** @type {?} */
    let stores = {};
    /** @type {?} */
    let acc = {};
    /**
     * @return {?}
     */
    function save() {
        storage.setItem(key, serialize(Object.assign({}, storageState, acc)));
    }
    /**
     * @param {?} storeName
     * @param {?} path
     * @return {?}
     */
    function subscribe(storeName, path) {
        stores[storeName] = __stores__[storeName]
            ._select(state => getValue(state, path))
            .pipe(skip(1))
            .subscribe(data => {
            acc[storeName] = data;
            save();
        });
    }
    /**
     * @param {?} storeName
     * @param {?} store
     * @param {?} path
     * @return {?}
     */
    function setInitial(storeName, store, path) {
        if (storageState[storeName]) {
            __globalState.setAction({ type: '@PersistState' });
            store.setState(state => {
                return setValue(state, path, storageState[storeName]);
            });
            if (store.setDirty) {
                store.setDirty();
            }
        }
    }
    /** @type {?} */
    const subscription = rootDispatcher.subscribe(action => {
        if (action.type === 0 /* NEW_STORE */) {
            /** @type {?} */
            let currentStoreName = action.payload["store"].storeName;
            if (hasExclude && exclude.indexOf(currentStoreName) > -1 === true) {
                return;
            }
            if (hasInclude) {
                /** @type {?} */
                const path = include.find(name => name.indexOf(currentStoreName) > -1);
                if (!path) {
                    return;
                }
                else {
                    currentStoreName = path.split('.')[0];
                    setInitial(currentStoreName, action.payload["store"], path);
                    subscribe(currentStoreName, path);
                }
            }
            else {
                setInitial(currentStoreName, action.payload["store"], currentStoreName);
                subscribe(currentStoreName, currentStoreName);
            }
        }
    });
    return {
        /**
         * @return {?}
         */
        destroy() {
            subscription.unsubscribe();
            for (let i = 0, keys = Object.keys(stores); i < keys.length; i++) {
                /** @type {?} */
                const storeName = keys[i];
                stores[storeName].unsubscribe();
            }
            stores = {};
        },
        /**
         * @return {?}
         */
        clear() {
            storage.clear();
        },
        /**
         * @param {?} storeName
         * @return {?}
         */
        clearStore(storeName) {
            /** @type {?} */
            const storageState = deserialize(storage.getItem(key) || '{}');
            if (storageState[storeName]) {
                delete storageState[storeName];
                storage.setItem(key, serialize(storageState));
            }
        }
    };
}

//# sourceMappingURL=data:application/json;base64,