import { APP_INITIALIZER, NgModule, NgZone, InjectionToken, Inject } from '@angular/core';
import { akitaDevtools } from '@datorama/akita';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var DEVTOOLS_OPTIONS = new InjectionToken('DevtoolsOptions');
var AkitaDevtools = /** @class */ (function () {
    function AkitaDevtools(ngZone, options) {
        this.ngZone = ngZone;
        this.options = options;
        akitaDevtools(this.ngZone, this.options);
    }
    /** @nocollapse */
    AkitaDevtools.ctorParameters = function () { return [
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: [DEVTOOLS_OPTIONS,] }] }
    ]; };
    return AkitaDevtools;
}());
/**
 * @return {?}
 */
function d() { }
/**
 * @param {?} akitaDevtools
 * @return {?}
 */
function init(akitaDevtools$$1) {
    return d;
}
var AkitaNgDevtools = /** @class */ (function () {
    function AkitaNgDevtools() {
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    AkitaNgDevtools.forRoot = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return {
            ngModule: AkitaNgDevtools,
            providers: [
                AkitaDevtools,
                {
                    provide: DEVTOOLS_OPTIONS,
                    useValue: options
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: init,
                    deps: [AkitaDevtools],
                    multi: true
                }
            ]
        };
    };
    AkitaNgDevtools.decorators = [
        { type: NgModule, args: [{},] },
    ];
    return AkitaNgDevtools;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { d, init, DEVTOOLS_OPTIONS, AkitaDevtools, AkitaNgDevtools };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0b3JhbWEtYWtpdGEtbmdkZXZ0b29scy5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vQGRhdG9yYW1hL2FraXRhLW5nZGV2dG9vbHMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQVBQX0lOSVRJQUxJWkVSLFxuICBNb2R1bGVXaXRoUHJvdmlkZXJzLFxuICBOZ01vZHVsZSxcbiAgTmdab25lLFxuICBJbmplY3Rpb25Ub2tlbixcbiAgSW5qZWN0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgYWtpdGFEZXZ0b29scywgRGV2dG9vbHNPcHRpb25zIH0gZnJvbSAnQGRhdG9yYW1hL2FraXRhJztcblxuZXhwb3J0IGNvbnN0IERFVlRPT0xTX09QVElPTlMgPSBuZXcgSW5qZWN0aW9uVG9rZW48RGV2dG9vbHNPcHRpb25zPihcbiAgJ0RldnRvb2xzT3B0aW9ucydcbik7XG5cbmV4cG9ydCBjbGFzcyBBa2l0YURldnRvb2xzIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSxcbiAgICBASW5qZWN0KERFVlRPT0xTX09QVElPTlMpIHByaXZhdGUgb3B0aW9uczogRGV2dG9vbHNPcHRpb25zXG4gICkge1xuICAgIGFraXRhRGV2dG9vbHModGhpcy5uZ1pvbmUsIHRoaXMub3B0aW9ucyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGQoKSB7fVxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoYWtpdGFEZXZ0b29sczogQWtpdGFEZXZ0b29scykge1xuICByZXR1cm4gZDtcbn1cblxuQE5nTW9kdWxlKHt9KVxuZXhwb3J0IGNsYXNzIEFraXRhTmdEZXZ0b29scyB7XG4gIHB1YmxpYyBzdGF0aWMgZm9yUm9vdChcbiAgICBvcHRpb25zPzogUGFydGlhbDxEZXZ0b29sc09wdGlvbnM+XG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogQWtpdGFOZ0RldnRvb2xzLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIEFraXRhRGV2dG9vbHMsXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBERVZUT09MU19PUFRJT05TLFxuICAgICAgICAgIHVzZVZhbHVlOiBvcHRpb25zXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgICAgICAgdXNlRmFjdG9yeTogaW5pdCxcbiAgICAgICAgICBkZXBzOiBbQWtpdGFEZXZ0b29sc10sXG4gICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJha2l0YURldnRvb2xzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFVQSxJQUFhLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUNoRCxpQkFBaUIsQ0FDbEIsQ0FBQzs7SUFHQSx1QkFDVSxRQUMwQixPQUF3QjtRQURsRCxXQUFNLEdBQU4sTUFBTTtRQUNvQixZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQUUxRCxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDMUM7OztnQkFoQkQsTUFBTTtnREFhSCxNQUFNLFNBQUMsZ0JBQWdCOzt3QkFqQjVCOzs7OztBQXVCQSxnQkFBc0I7Ozs7O0FBQ3RCLGNBQXFCQSxnQkFBNEI7SUFDL0MsT0FBTyxDQUFDLENBQUM7Q0FDVjs7Ozs7Ozs7SUFJZSx1QkFBTzs7OztjQUNuQixPQUFrQztRQUVsQyxPQUFPO1lBQ0wsUUFBUSxFQUFFLGVBQWU7WUFDekIsU0FBUyxFQUFFO2dCQUNULGFBQWE7Z0JBQ2I7b0JBQ0UsT0FBTyxFQUFFLGdCQUFnQjtvQkFDekIsUUFBUSxFQUFFLE9BQU87aUJBQ2xCO2dCQUNEO29CQUNFLE9BQU8sRUFBRSxlQUFlO29CQUN4QixVQUFVLEVBQUUsSUFBSTtvQkFDaEIsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDO29CQUNyQixLQUFLLEVBQUUsSUFBSTtpQkFDWjthQUNGO1NBQ0YsQ0FBQzs7O2dCQXBCTCxRQUFRLFNBQUMsRUFBRTs7MEJBNUJaOzs7Ozs7Ozs7OyJ9