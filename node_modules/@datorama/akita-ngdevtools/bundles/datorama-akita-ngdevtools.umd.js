(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@datorama/akita')) :
    typeof define === 'function' && define.amd ? define('@datorama/akita-ngdevtools', ['exports', '@angular/core', '@datorama/akita'], factory) :
    (factory((global.datorama = global.datorama || {}, global.datorama['akita-ngdevtools'] = {}),global.ng.core,null));
}(this, (function (exports,core,akita) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEVTOOLS_OPTIONS = new core.InjectionToken('DevtoolsOptions');
    var AkitaDevtools = /** @class */ (function () {
        function AkitaDevtools(ngZone, options) {
            this.ngZone = ngZone;
            this.options = options;
            akita.akitaDevtools(this.ngZone, this.options);
        }
        /** @nocollapse */
        AkitaDevtools.ctorParameters = function () {
            return [
                { type: core.NgZone },
                { type: undefined, decorators: [{ type: core.Inject, args: [DEVTOOLS_OPTIONS,] }] }
            ];
        };
        return AkitaDevtools;
    }());
    /**
     * @return {?}
     */
    function d() { }
    /**
     * @param {?} akitaDevtools
     * @return {?}
     */
    function init(akitaDevtools) {
        return d;
    }
    var AkitaNgDevtools = /** @class */ (function () {
        function AkitaNgDevtools() {
        }
        /**
         * @param {?=} options
         * @return {?}
         */
        AkitaNgDevtools.forRoot = /**
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                return {
                    ngModule: AkitaNgDevtools,
                    providers: [
                        AkitaDevtools,
                        {
                            provide: DEVTOOLS_OPTIONS,
                            useValue: options
                        },
                        {
                            provide: core.APP_INITIALIZER,
                            useFactory: init,
                            deps: [AkitaDevtools],
                            multi: true
                        }
                    ]
                };
            };
        AkitaNgDevtools.decorators = [
            { type: core.NgModule, args: [{},] },
        ];
        return AkitaNgDevtools;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.d = d;
    exports.init = init;
    exports.DEVTOOLS_OPTIONS = DEVTOOLS_OPTIONS;
    exports.AkitaDevtools = AkitaDevtools;
    exports.AkitaNgDevtools = AkitaNgDevtools;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0b3JhbWEtYWtpdGEtbmdkZXZ0b29scy51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL0BkYXRvcmFtYS9ha2l0YS1uZ2RldnRvb2xzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFQUF9JTklUSUFMSVpFUixcbiAgTW9kdWxlV2l0aFByb3ZpZGVycyxcbiAgTmdNb2R1bGUsXG4gIE5nWm9uZSxcbiAgSW5qZWN0aW9uVG9rZW4sXG4gIEluamVjdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGFraXRhRGV2dG9vbHMsIERldnRvb2xzT3B0aW9ucyB9IGZyb20gJ0BkYXRvcmFtYS9ha2l0YSc7XG5cbmV4cG9ydCBjb25zdCBERVZUT09MU19PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuPERldnRvb2xzT3B0aW9ucz4oXG4gICdEZXZ0b29sc09wdGlvbnMnXG4pO1xuXG5leHBvcnQgY2xhc3MgQWtpdGFEZXZ0b29scyB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXG4gICAgQEluamVjdChERVZUT09MU19PUFRJT05TKSBwcml2YXRlIG9wdGlvbnM6IERldnRvb2xzT3B0aW9uc1xuICApIHtcbiAgICBha2l0YURldnRvb2xzKHRoaXMubmdab25lLCB0aGlzLm9wdGlvbnMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkKCkge31cbmV4cG9ydCBmdW5jdGlvbiBpbml0KGFraXRhRGV2dG9vbHM6IEFraXRhRGV2dG9vbHMpIHtcbiAgcmV0dXJuIGQ7XG59XG5cbkBOZ01vZHVsZSh7fSlcbmV4cG9ydCBjbGFzcyBBa2l0YU5nRGV2dG9vbHMge1xuICBwdWJsaWMgc3RhdGljIGZvclJvb3QoXG4gICAgb3B0aW9ucz86IFBhcnRpYWw8RGV2dG9vbHNPcHRpb25zPlxuICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEFraXRhTmdEZXZ0b29scyxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBBa2l0YURldnRvb2xzLFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogREVWVE9PTFNfT1BUSU9OUyxcbiAgICAgICAgICB1c2VWYWx1ZTogb3B0aW9uc1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxuICAgICAgICAgIHVzZUZhY3Rvcnk6IGluaXQsXG4gICAgICAgICAgZGVwczogW0FraXRhRGV2dG9vbHNdLFxuICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXSwibmFtZXMiOlsiSW5qZWN0aW9uVG9rZW4iLCJha2l0YURldnRvb2xzIiwiTmdab25lIiwiSW5qZWN0IiwiQVBQX0lOSVRJQUxJWkVSIiwiTmdNb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQVVBLFFBQWEsZ0JBQWdCLEdBQUcsSUFBSUEsbUJBQWMsQ0FDaEQsaUJBQWlCLENBQ2xCLENBQUM7O1FBR0EsdUJBQ1UsUUFDMEIsT0FBd0I7WUFEbEQsV0FBTSxHQUFOLE1BQU07WUFDb0IsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7WUFFMURDLG1CQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDMUM7Ozs7d0JBaEJEQyxXQUFNO3dEQWFIQyxXQUFNLFNBQUMsZ0JBQWdCOzs7NEJBakI1Qjs7Ozs7QUF1QkEsb0JBQXNCOzs7OztBQUN0QixrQkFBcUIsYUFBNEI7UUFDL0MsT0FBTyxDQUFDLENBQUM7S0FDVjs7Ozs7Ozs7UUFJZSx1QkFBTzs7OztzQkFDbkIsT0FBa0M7Z0JBRWxDLE9BQU87b0JBQ0wsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLFNBQVMsRUFBRTt3QkFDVCxhQUFhO3dCQUNiOzRCQUNFLE9BQU8sRUFBRSxnQkFBZ0I7NEJBQ3pCLFFBQVEsRUFBRSxPQUFPO3lCQUNsQjt3QkFDRDs0QkFDRSxPQUFPLEVBQUVDLG9CQUFlOzRCQUN4QixVQUFVLEVBQUUsSUFBSTs0QkFDaEIsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDOzRCQUNyQixLQUFLLEVBQUUsSUFBSTt5QkFDWjtxQkFDRjtpQkFDRixDQUFDOzs7b0JBcEJMQyxhQUFRLFNBQUMsRUFBRTs7OEJBNUJaOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9