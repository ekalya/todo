/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { APP_INITIALIZER, NgModule, NgZone, InjectionToken, Inject } from '@angular/core';
import { akitaDevtools } from '@datorama/akita';
/** @type {?} */
export var DEVTOOLS_OPTIONS = new InjectionToken('DevtoolsOptions');
var AkitaDevtools = /** @class */ (function () {
    function AkitaDevtools(ngZone, options) {
        this.ngZone = ngZone;
        this.options = options;
        akitaDevtools(this.ngZone, this.options);
    }
    /** @nocollapse */
    AkitaDevtools.ctorParameters = function () { return [
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: [DEVTOOLS_OPTIONS,] }] }
    ]; };
    return AkitaDevtools;
}());
export { AkitaDevtools };
if (false) {
    /** @type {?} */
    AkitaDevtools.prototype.ngZone;
    /** @type {?} */
    AkitaDevtools.prototype.options;
}
/**
 * @return {?}
 */
export function d() { }
/**
 * @param {?} akitaDevtools
 * @return {?}
 */
export function init(akitaDevtools) {
    return d;
}
var AkitaNgDevtools = /** @class */ (function () {
    function AkitaNgDevtools() {
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    AkitaNgDevtools.forRoot = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return {
            ngModule: AkitaNgDevtools,
            providers: [
                AkitaDevtools,
                {
                    provide: DEVTOOLS_OPTIONS,
                    useValue: options
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: init,
                    deps: [AkitaDevtools],
                    multi: true
                }
            ]
        };
    };
    AkitaNgDevtools.decorators = [
        { type: NgModule, args: [{},] },
    ];
    return AkitaNgDevtools;
}());
export { AkitaNgDevtools };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZGF0b3JhbWEvYWtpdGEtbmdkZXZ0b29scy8iLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsZUFBZSxFQUVmLFFBQVEsRUFDUixNQUFNLEVBQ04sY0FBYyxFQUNkLE1BQU0sRUFDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsYUFBYSxFQUFtQixNQUFNLGlCQUFpQixDQUFDOztBQUVqRSxXQUFhLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUNoRCxpQkFBaUIsQ0FDbEIsQ0FBQzs7SUFHQSx1QkFDVSxRQUMwQixPQUF3QjtRQURsRCxXQUFNLEdBQU4sTUFBTTtRQUNvQixZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQUUxRCxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDMUM7OztnQkFoQkQsTUFBTTtnREFhSCxNQUFNLFNBQUMsZ0JBQWdCOzt3QkFqQjVCOztTQWNhLGFBQWE7Ozs7Ozs7Ozs7QUFTMUIsTUFBTSxpQkFBZ0I7Ozs7O0FBQ3RCLE1BQU0sZUFBZSxhQUE0QjtJQUMvQyxPQUFPLENBQUMsQ0FBQztDQUNWOzs7Ozs7OztJQUllLHVCQUFPOzs7O2NBQ25CLE9BQWtDO1FBRWxDLE9BQU87WUFDTCxRQUFRLEVBQUUsZUFBZTtZQUN6QixTQUFTLEVBQUU7Z0JBQ1QsYUFBYTtnQkFDYjtvQkFDRSxPQUFPLEVBQUUsZ0JBQWdCO29CQUN6QixRQUFRLEVBQUUsT0FBTztpQkFDbEI7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLGVBQWU7b0JBQ3hCLFVBQVUsRUFBRSxJQUFJO29CQUNoQixJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUM7b0JBQ3JCLEtBQUssRUFBRSxJQUFJO2lCQUNaO2FBQ0Y7U0FDRixDQUFDOzs7Z0JBcEJMLFFBQVEsU0FBQyxFQUFFOzswQkE1Qlo7O1NBNkJhLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBUFBfSU5JVElBTElaRVIsXG4gIE1vZHVsZVdpdGhQcm92aWRlcnMsXG4gIE5nTW9kdWxlLFxuICBOZ1pvbmUsXG4gIEluamVjdGlvblRva2VuLFxuICBJbmplY3Rcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBha2l0YURldnRvb2xzLCBEZXZ0b29sc09wdGlvbnMgfSBmcm9tICdAZGF0b3JhbWEvYWtpdGEnO1xuXG5leHBvcnQgY29uc3QgREVWVE9PTFNfT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxEZXZ0b29sc09wdGlvbnM+KFxuICAnRGV2dG9vbHNPcHRpb25zJ1xuKTtcblxuZXhwb3J0IGNsYXNzIEFraXRhRGV2dG9vbHMge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgIEBJbmplY3QoREVWVE9PTFNfT1BUSU9OUykgcHJpdmF0ZSBvcHRpb25zOiBEZXZ0b29sc09wdGlvbnNcbiAgKSB7XG4gICAgYWtpdGFEZXZ0b29scyh0aGlzLm5nWm9uZSwgdGhpcy5vcHRpb25zKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZCgpIHt9XG5leHBvcnQgZnVuY3Rpb24gaW5pdChha2l0YURldnRvb2xzOiBBa2l0YURldnRvb2xzKSB7XG4gIHJldHVybiBkO1xufVxuXG5ATmdNb2R1bGUoe30pXG5leHBvcnQgY2xhc3MgQWtpdGFOZ0RldnRvb2xzIHtcbiAgcHVibGljIHN0YXRpYyBmb3JSb290KFxuICAgIG9wdGlvbnM/OiBQYXJ0aWFsPERldnRvb2xzT3B0aW9ucz5cbiAgKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBBa2l0YU5nRGV2dG9vbHMsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgQWtpdGFEZXZ0b29scyxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IERFVlRPT0xTX09QVElPTlMsXG4gICAgICAgICAgdXNlVmFsdWU6IG9wdGlvbnNcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcbiAgICAgICAgICB1c2VGYWN0b3J5OiBpbml0LFxuICAgICAgICAgIGRlcHM6IFtBa2l0YURldnRvb2xzXSxcbiAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19