import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
function isFunction(value) {
    return typeof value === 'function';
}
export var untilDestroyed = function (componentInstance, destroyMethodName) {
    if (destroyMethodName === void 0) { destroyMethodName = 'ngOnDestroy'; }
    return function (source) {
        var originalDestroy = componentInstance[destroyMethodName];
        componentInstance['__takeUntilDestroy'] =
            componentInstance['__takeUntilDestroy'] || new Subject();
        componentInstance[destroyMethodName] = function () {
            isFunction(originalDestroy) && originalDestroy.apply(this, arguments);
            componentInstance['__takeUntilDestroy'].next(true);
            componentInstance['__takeUntilDestroy'].complete();
        };
        return source.pipe(takeUntil(componentInstance['__takeUntilDestroy']));
    };
};
//# sourceMappingURL=take-until-destroy.js.map